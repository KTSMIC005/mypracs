
Enviroment Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ffc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080060bc  080060bc  000160bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006174  08006174  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006174  08006174  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006174  08006174  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006174  08006174  00016174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006178  08006178  00016178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800617c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  08006188  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08006188  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001282c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000241c  00000000  00000000  00032860  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  00034c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b10  00000000  00000000  00035888  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fcc7  00000000  00000000  00036398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b36b  00000000  00000000  0004605f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00051e62  00000000  00000000  000513ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a322c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da0  00000000  00000000  000a32a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080060a4 	.word	0x080060a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080060a4 	.word	0x080060a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c08      	adds	r0, r1, #0
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 f8c7 	bl	8000590 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 f849 	bl	80004a4 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 f8b9 	bl	8000590 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f8af 	bl	8000590 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f857 	bl	80004f4 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f84d 	bl	80004f4 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_d2uiz>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	2200      	movs	r2, #0
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <__aeabi_d2uiz+0x38>)
 800046e:	0004      	movs	r4, r0
 8000470:	000d      	movs	r5, r1
 8000472:	f001 fb13 	bl	8001a9c <__aeabi_dcmpge>
 8000476:	2800      	cmp	r0, #0
 8000478:	d104      	bne.n	8000484 <__aeabi_d2uiz+0x1c>
 800047a:	0020      	movs	r0, r4
 800047c:	0029      	movs	r1, r5
 800047e:	f001 f993 	bl	80017a8 <__aeabi_d2iz>
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <__aeabi_d2uiz+0x38>)
 8000486:	2200      	movs	r2, #0
 8000488:	0020      	movs	r0, r4
 800048a:	0029      	movs	r1, r5
 800048c:	f000 fe44 	bl	8001118 <__aeabi_dsub>
 8000490:	f001 f98a 	bl	80017a8 <__aeabi_d2iz>
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	061b      	lsls	r3, r3, #24
 8000498:	469c      	mov	ip, r3
 800049a:	4460      	add	r0, ip
 800049c:	e7f1      	b.n	8000482 <__aeabi_d2uiz+0x1a>
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	41e00000 	.word	0x41e00000

080004a4 <__eqsf2>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	0042      	lsls	r2, r0, #1
 80004a8:	024e      	lsls	r6, r1, #9
 80004aa:	004c      	lsls	r4, r1, #1
 80004ac:	0245      	lsls	r5, r0, #9
 80004ae:	0a6d      	lsrs	r5, r5, #9
 80004b0:	0e12      	lsrs	r2, r2, #24
 80004b2:	0fc3      	lsrs	r3, r0, #31
 80004b4:	0a76      	lsrs	r6, r6, #9
 80004b6:	0e24      	lsrs	r4, r4, #24
 80004b8:	0fc9      	lsrs	r1, r1, #31
 80004ba:	2aff      	cmp	r2, #255	; 0xff
 80004bc:	d00f      	beq.n	80004de <__eqsf2+0x3a>
 80004be:	2cff      	cmp	r4, #255	; 0xff
 80004c0:	d011      	beq.n	80004e6 <__eqsf2+0x42>
 80004c2:	2001      	movs	r0, #1
 80004c4:	42a2      	cmp	r2, r4
 80004c6:	d000      	beq.n	80004ca <__eqsf2+0x26>
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	42b5      	cmp	r5, r6
 80004cc:	d1fc      	bne.n	80004c8 <__eqsf2+0x24>
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d00d      	beq.n	80004ee <__eqsf2+0x4a>
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d1f8      	bne.n	80004c8 <__eqsf2+0x24>
 80004d6:	0028      	movs	r0, r5
 80004d8:	1e45      	subs	r5, r0, #1
 80004da:	41a8      	sbcs	r0, r5
 80004dc:	e7f4      	b.n	80004c8 <__eqsf2+0x24>
 80004de:	2001      	movs	r0, #1
 80004e0:	2d00      	cmp	r5, #0
 80004e2:	d1f1      	bne.n	80004c8 <__eqsf2+0x24>
 80004e4:	e7eb      	b.n	80004be <__eqsf2+0x1a>
 80004e6:	2001      	movs	r0, #1
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d1ed      	bne.n	80004c8 <__eqsf2+0x24>
 80004ec:	e7e9      	b.n	80004c2 <__eqsf2+0x1e>
 80004ee:	2000      	movs	r0, #0
 80004f0:	e7ea      	b.n	80004c8 <__eqsf2+0x24>
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__gesf2>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	004a      	lsls	r2, r1, #1
 80004f8:	024e      	lsls	r6, r1, #9
 80004fa:	0245      	lsls	r5, r0, #9
 80004fc:	0044      	lsls	r4, r0, #1
 80004fe:	0a6d      	lsrs	r5, r5, #9
 8000500:	0e24      	lsrs	r4, r4, #24
 8000502:	0fc3      	lsrs	r3, r0, #31
 8000504:	0a76      	lsrs	r6, r6, #9
 8000506:	0e12      	lsrs	r2, r2, #24
 8000508:	0fc9      	lsrs	r1, r1, #31
 800050a:	2cff      	cmp	r4, #255	; 0xff
 800050c:	d015      	beq.n	800053a <__gesf2+0x46>
 800050e:	2aff      	cmp	r2, #255	; 0xff
 8000510:	d00e      	beq.n	8000530 <__gesf2+0x3c>
 8000512:	2c00      	cmp	r4, #0
 8000514:	d115      	bne.n	8000542 <__gesf2+0x4e>
 8000516:	2a00      	cmp	r2, #0
 8000518:	d101      	bne.n	800051e <__gesf2+0x2a>
 800051a:	2e00      	cmp	r6, #0
 800051c:	d01c      	beq.n	8000558 <__gesf2+0x64>
 800051e:	2d00      	cmp	r5, #0
 8000520:	d014      	beq.n	800054c <__gesf2+0x58>
 8000522:	428b      	cmp	r3, r1
 8000524:	d027      	beq.n	8000576 <__gesf2+0x82>
 8000526:	2002      	movs	r0, #2
 8000528:	3b01      	subs	r3, #1
 800052a:	4018      	ands	r0, r3
 800052c:	3801      	subs	r0, #1
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	2e00      	cmp	r6, #0
 8000532:	d0ee      	beq.n	8000512 <__gesf2+0x1e>
 8000534:	2002      	movs	r0, #2
 8000536:	4240      	negs	r0, r0
 8000538:	e7f9      	b.n	800052e <__gesf2+0x3a>
 800053a:	2d00      	cmp	r5, #0
 800053c:	d1fa      	bne.n	8000534 <__gesf2+0x40>
 800053e:	2aff      	cmp	r2, #255	; 0xff
 8000540:	d00e      	beq.n	8000560 <__gesf2+0x6c>
 8000542:	2a00      	cmp	r2, #0
 8000544:	d10e      	bne.n	8000564 <__gesf2+0x70>
 8000546:	2e00      	cmp	r6, #0
 8000548:	d0ed      	beq.n	8000526 <__gesf2+0x32>
 800054a:	e00b      	b.n	8000564 <__gesf2+0x70>
 800054c:	2301      	movs	r3, #1
 800054e:	3901      	subs	r1, #1
 8000550:	4399      	bics	r1, r3
 8000552:	0008      	movs	r0, r1
 8000554:	3001      	adds	r0, #1
 8000556:	e7ea      	b.n	800052e <__gesf2+0x3a>
 8000558:	2000      	movs	r0, #0
 800055a:	2d00      	cmp	r5, #0
 800055c:	d0e7      	beq.n	800052e <__gesf2+0x3a>
 800055e:	e7e2      	b.n	8000526 <__gesf2+0x32>
 8000560:	2e00      	cmp	r6, #0
 8000562:	d1e7      	bne.n	8000534 <__gesf2+0x40>
 8000564:	428b      	cmp	r3, r1
 8000566:	d1de      	bne.n	8000526 <__gesf2+0x32>
 8000568:	4294      	cmp	r4, r2
 800056a:	dd05      	ble.n	8000578 <__gesf2+0x84>
 800056c:	2102      	movs	r1, #2
 800056e:	1e58      	subs	r0, r3, #1
 8000570:	4008      	ands	r0, r1
 8000572:	3801      	subs	r0, #1
 8000574:	e7db      	b.n	800052e <__gesf2+0x3a>
 8000576:	2400      	movs	r4, #0
 8000578:	42a2      	cmp	r2, r4
 800057a:	dc04      	bgt.n	8000586 <__gesf2+0x92>
 800057c:	42b5      	cmp	r5, r6
 800057e:	d8d2      	bhi.n	8000526 <__gesf2+0x32>
 8000580:	2000      	movs	r0, #0
 8000582:	42b5      	cmp	r5, r6
 8000584:	d2d3      	bcs.n	800052e <__gesf2+0x3a>
 8000586:	1e58      	subs	r0, r3, #1
 8000588:	2301      	movs	r3, #1
 800058a:	4398      	bics	r0, r3
 800058c:	3001      	adds	r0, #1
 800058e:	e7ce      	b.n	800052e <__gesf2+0x3a>

08000590 <__lesf2>:
 8000590:	b530      	push	{r4, r5, lr}
 8000592:	0042      	lsls	r2, r0, #1
 8000594:	0244      	lsls	r4, r0, #9
 8000596:	024d      	lsls	r5, r1, #9
 8000598:	0fc3      	lsrs	r3, r0, #31
 800059a:	0048      	lsls	r0, r1, #1
 800059c:	0a64      	lsrs	r4, r4, #9
 800059e:	0e12      	lsrs	r2, r2, #24
 80005a0:	0a6d      	lsrs	r5, r5, #9
 80005a2:	0e00      	lsrs	r0, r0, #24
 80005a4:	0fc9      	lsrs	r1, r1, #31
 80005a6:	2aff      	cmp	r2, #255	; 0xff
 80005a8:	d012      	beq.n	80005d0 <__lesf2+0x40>
 80005aa:	28ff      	cmp	r0, #255	; 0xff
 80005ac:	d00c      	beq.n	80005c8 <__lesf2+0x38>
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d112      	bne.n	80005d8 <__lesf2+0x48>
 80005b2:	2800      	cmp	r0, #0
 80005b4:	d119      	bne.n	80005ea <__lesf2+0x5a>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d117      	bne.n	80005ea <__lesf2+0x5a>
 80005ba:	2c00      	cmp	r4, #0
 80005bc:	d02b      	beq.n	8000616 <__lesf2+0x86>
 80005be:	2002      	movs	r0, #2
 80005c0:	3b01      	subs	r3, #1
 80005c2:	4018      	ands	r0, r3
 80005c4:	3801      	subs	r0, #1
 80005c6:	e026      	b.n	8000616 <__lesf2+0x86>
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	d0f0      	beq.n	80005ae <__lesf2+0x1e>
 80005cc:	2002      	movs	r0, #2
 80005ce:	e022      	b.n	8000616 <__lesf2+0x86>
 80005d0:	2c00      	cmp	r4, #0
 80005d2:	d1fb      	bne.n	80005cc <__lesf2+0x3c>
 80005d4:	28ff      	cmp	r0, #255	; 0xff
 80005d6:	d01f      	beq.n	8000618 <__lesf2+0x88>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d11f      	bne.n	800061c <__lesf2+0x8c>
 80005dc:	2d00      	cmp	r5, #0
 80005de:	d11d      	bne.n	800061c <__lesf2+0x8c>
 80005e0:	2002      	movs	r0, #2
 80005e2:	3b01      	subs	r3, #1
 80005e4:	4018      	ands	r0, r3
 80005e6:	3801      	subs	r0, #1
 80005e8:	e015      	b.n	8000616 <__lesf2+0x86>
 80005ea:	2c00      	cmp	r4, #0
 80005ec:	d00e      	beq.n	800060c <__lesf2+0x7c>
 80005ee:	428b      	cmp	r3, r1
 80005f0:	d1e5      	bne.n	80005be <__lesf2+0x2e>
 80005f2:	2200      	movs	r2, #0
 80005f4:	4290      	cmp	r0, r2
 80005f6:	dc04      	bgt.n	8000602 <__lesf2+0x72>
 80005f8:	42ac      	cmp	r4, r5
 80005fa:	d8e0      	bhi.n	80005be <__lesf2+0x2e>
 80005fc:	2000      	movs	r0, #0
 80005fe:	42ac      	cmp	r4, r5
 8000600:	d209      	bcs.n	8000616 <__lesf2+0x86>
 8000602:	1e58      	subs	r0, r3, #1
 8000604:	2301      	movs	r3, #1
 8000606:	4398      	bics	r0, r3
 8000608:	3001      	adds	r0, #1
 800060a:	e004      	b.n	8000616 <__lesf2+0x86>
 800060c:	2301      	movs	r3, #1
 800060e:	3901      	subs	r1, #1
 8000610:	4399      	bics	r1, r3
 8000612:	0008      	movs	r0, r1
 8000614:	3001      	adds	r0, #1
 8000616:	bd30      	pop	{r4, r5, pc}
 8000618:	2d00      	cmp	r5, #0
 800061a:	d1d7      	bne.n	80005cc <__lesf2+0x3c>
 800061c:	428b      	cmp	r3, r1
 800061e:	d1ce      	bne.n	80005be <__lesf2+0x2e>
 8000620:	4282      	cmp	r2, r0
 8000622:	dde7      	ble.n	80005f4 <__lesf2+0x64>
 8000624:	2102      	movs	r1, #2
 8000626:	1e58      	subs	r0, r3, #1
 8000628:	4008      	ands	r0, r1
 800062a:	3801      	subs	r0, #1
 800062c:	e7f3      	b.n	8000616 <__lesf2+0x86>
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__aeabi_ddiv>:
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	4657      	mov	r7, sl
 8000634:	46de      	mov	lr, fp
 8000636:	464e      	mov	r6, r9
 8000638:	4645      	mov	r5, r8
 800063a:	b5e0      	push	{r5, r6, r7, lr}
 800063c:	4683      	mov	fp, r0
 800063e:	0007      	movs	r7, r0
 8000640:	030e      	lsls	r6, r1, #12
 8000642:	0048      	lsls	r0, r1, #1
 8000644:	b085      	sub	sp, #20
 8000646:	4692      	mov	sl, r2
 8000648:	001c      	movs	r4, r3
 800064a:	0b36      	lsrs	r6, r6, #12
 800064c:	0d40      	lsrs	r0, r0, #21
 800064e:	0fcd      	lsrs	r5, r1, #31
 8000650:	2800      	cmp	r0, #0
 8000652:	d100      	bne.n	8000656 <__aeabi_ddiv+0x26>
 8000654:	e09d      	b.n	8000792 <__aeabi_ddiv+0x162>
 8000656:	4b95      	ldr	r3, [pc, #596]	; (80008ac <__aeabi_ddiv+0x27c>)
 8000658:	4298      	cmp	r0, r3
 800065a:	d039      	beq.n	80006d0 <__aeabi_ddiv+0xa0>
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	00f6      	lsls	r6, r6, #3
 8000660:	041b      	lsls	r3, r3, #16
 8000662:	431e      	orrs	r6, r3
 8000664:	4a92      	ldr	r2, [pc, #584]	; (80008b0 <__aeabi_ddiv+0x280>)
 8000666:	0f7b      	lsrs	r3, r7, #29
 8000668:	4333      	orrs	r3, r6
 800066a:	4699      	mov	r9, r3
 800066c:	4694      	mov	ip, r2
 800066e:	0003      	movs	r3, r0
 8000670:	4463      	add	r3, ip
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2300      	movs	r3, #0
 8000676:	2600      	movs	r6, #0
 8000678:	00ff      	lsls	r7, r7, #3
 800067a:	9302      	str	r3, [sp, #8]
 800067c:	0323      	lsls	r3, r4, #12
 800067e:	0b1b      	lsrs	r3, r3, #12
 8000680:	4698      	mov	r8, r3
 8000682:	0063      	lsls	r3, r4, #1
 8000684:	0fe4      	lsrs	r4, r4, #31
 8000686:	4652      	mov	r2, sl
 8000688:	0d5b      	lsrs	r3, r3, #21
 800068a:	9401      	str	r4, [sp, #4]
 800068c:	d100      	bne.n	8000690 <__aeabi_ddiv+0x60>
 800068e:	e0b3      	b.n	80007f8 <__aeabi_ddiv+0x1c8>
 8000690:	4986      	ldr	r1, [pc, #536]	; (80008ac <__aeabi_ddiv+0x27c>)
 8000692:	428b      	cmp	r3, r1
 8000694:	d100      	bne.n	8000698 <__aeabi_ddiv+0x68>
 8000696:	e09e      	b.n	80007d6 <__aeabi_ddiv+0x1a6>
 8000698:	4642      	mov	r2, r8
 800069a:	00d1      	lsls	r1, r2, #3
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	0412      	lsls	r2, r2, #16
 80006a0:	430a      	orrs	r2, r1
 80006a2:	4651      	mov	r1, sl
 80006a4:	0f49      	lsrs	r1, r1, #29
 80006a6:	4311      	orrs	r1, r2
 80006a8:	468b      	mov	fp, r1
 80006aa:	4981      	ldr	r1, [pc, #516]	; (80008b0 <__aeabi_ddiv+0x280>)
 80006ac:	4652      	mov	r2, sl
 80006ae:	468c      	mov	ip, r1
 80006b0:	9900      	ldr	r1, [sp, #0]
 80006b2:	4463      	add	r3, ip
 80006b4:	1acb      	subs	r3, r1, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	00d2      	lsls	r2, r2, #3
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	002b      	movs	r3, r5
 80006be:	4063      	eors	r3, r4
 80006c0:	469a      	mov	sl, r3
 80006c2:	2e0f      	cmp	r6, #15
 80006c4:	d900      	bls.n	80006c8 <__aeabi_ddiv+0x98>
 80006c6:	e105      	b.n	80008d4 <__aeabi_ddiv+0x2a4>
 80006c8:	4b7a      	ldr	r3, [pc, #488]	; (80008b4 <__aeabi_ddiv+0x284>)
 80006ca:	00b6      	lsls	r6, r6, #2
 80006cc:	599b      	ldr	r3, [r3, r6]
 80006ce:	469f      	mov	pc, r3
 80006d0:	465b      	mov	r3, fp
 80006d2:	4333      	orrs	r3, r6
 80006d4:	4699      	mov	r9, r3
 80006d6:	d000      	beq.n	80006da <__aeabi_ddiv+0xaa>
 80006d8:	e0b8      	b.n	800084c <__aeabi_ddiv+0x21c>
 80006da:	2302      	movs	r3, #2
 80006dc:	2608      	movs	r6, #8
 80006de:	2700      	movs	r7, #0
 80006e0:	9000      	str	r0, [sp, #0]
 80006e2:	9302      	str	r3, [sp, #8]
 80006e4:	e7ca      	b.n	800067c <__aeabi_ddiv+0x4c>
 80006e6:	46cb      	mov	fp, r9
 80006e8:	003a      	movs	r2, r7
 80006ea:	9902      	ldr	r1, [sp, #8]
 80006ec:	9501      	str	r5, [sp, #4]
 80006ee:	9b01      	ldr	r3, [sp, #4]
 80006f0:	469a      	mov	sl, r3
 80006f2:	2902      	cmp	r1, #2
 80006f4:	d027      	beq.n	8000746 <__aeabi_ddiv+0x116>
 80006f6:	2903      	cmp	r1, #3
 80006f8:	d100      	bne.n	80006fc <__aeabi_ddiv+0xcc>
 80006fa:	e280      	b.n	8000bfe <__aeabi_ddiv+0x5ce>
 80006fc:	2901      	cmp	r1, #1
 80006fe:	d044      	beq.n	800078a <__aeabi_ddiv+0x15a>
 8000700:	496d      	ldr	r1, [pc, #436]	; (80008b8 <__aeabi_ddiv+0x288>)
 8000702:	9b00      	ldr	r3, [sp, #0]
 8000704:	468c      	mov	ip, r1
 8000706:	4463      	add	r3, ip
 8000708:	001c      	movs	r4, r3
 800070a:	2c00      	cmp	r4, #0
 800070c:	dd38      	ble.n	8000780 <__aeabi_ddiv+0x150>
 800070e:	0753      	lsls	r3, r2, #29
 8000710:	d000      	beq.n	8000714 <__aeabi_ddiv+0xe4>
 8000712:	e213      	b.n	8000b3c <__aeabi_ddiv+0x50c>
 8000714:	08d2      	lsrs	r2, r2, #3
 8000716:	465b      	mov	r3, fp
 8000718:	01db      	lsls	r3, r3, #7
 800071a:	d509      	bpl.n	8000730 <__aeabi_ddiv+0x100>
 800071c:	4659      	mov	r1, fp
 800071e:	4b67      	ldr	r3, [pc, #412]	; (80008bc <__aeabi_ddiv+0x28c>)
 8000720:	4019      	ands	r1, r3
 8000722:	468b      	mov	fp, r1
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	00c9      	lsls	r1, r1, #3
 8000728:	468c      	mov	ip, r1
 800072a:	9b00      	ldr	r3, [sp, #0]
 800072c:	4463      	add	r3, ip
 800072e:	001c      	movs	r4, r3
 8000730:	4b63      	ldr	r3, [pc, #396]	; (80008c0 <__aeabi_ddiv+0x290>)
 8000732:	429c      	cmp	r4, r3
 8000734:	dc07      	bgt.n	8000746 <__aeabi_ddiv+0x116>
 8000736:	465b      	mov	r3, fp
 8000738:	0564      	lsls	r4, r4, #21
 800073a:	075f      	lsls	r7, r3, #29
 800073c:	025b      	lsls	r3, r3, #9
 800073e:	4317      	orrs	r7, r2
 8000740:	0b1b      	lsrs	r3, r3, #12
 8000742:	0d62      	lsrs	r2, r4, #21
 8000744:	e002      	b.n	800074c <__aeabi_ddiv+0x11c>
 8000746:	2300      	movs	r3, #0
 8000748:	2700      	movs	r7, #0
 800074a:	4a58      	ldr	r2, [pc, #352]	; (80008ac <__aeabi_ddiv+0x27c>)
 800074c:	2100      	movs	r1, #0
 800074e:	031b      	lsls	r3, r3, #12
 8000750:	0b1c      	lsrs	r4, r3, #12
 8000752:	0d0b      	lsrs	r3, r1, #20
 8000754:	051b      	lsls	r3, r3, #20
 8000756:	4323      	orrs	r3, r4
 8000758:	0514      	lsls	r4, r2, #20
 800075a:	4a5a      	ldr	r2, [pc, #360]	; (80008c4 <__aeabi_ddiv+0x294>)
 800075c:	0038      	movs	r0, r7
 800075e:	4013      	ands	r3, r2
 8000760:	431c      	orrs	r4, r3
 8000762:	4653      	mov	r3, sl
 8000764:	0064      	lsls	r4, r4, #1
 8000766:	07db      	lsls	r3, r3, #31
 8000768:	0864      	lsrs	r4, r4, #1
 800076a:	431c      	orrs	r4, r3
 800076c:	0021      	movs	r1, r4
 800076e:	b005      	add	sp, #20
 8000770:	bc3c      	pop	{r2, r3, r4, r5}
 8000772:	4690      	mov	r8, r2
 8000774:	4699      	mov	r9, r3
 8000776:	46a2      	mov	sl, r4
 8000778:	46ab      	mov	fp, r5
 800077a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800077c:	2201      	movs	r2, #1
 800077e:	4252      	negs	r2, r2
 8000780:	2301      	movs	r3, #1
 8000782:	1b1b      	subs	r3, r3, r4
 8000784:	2b38      	cmp	r3, #56	; 0x38
 8000786:	dc00      	bgt.n	800078a <__aeabi_ddiv+0x15a>
 8000788:	e1ad      	b.n	8000ae6 <__aeabi_ddiv+0x4b6>
 800078a:	2200      	movs	r2, #0
 800078c:	2300      	movs	r3, #0
 800078e:	2700      	movs	r7, #0
 8000790:	e7dc      	b.n	800074c <__aeabi_ddiv+0x11c>
 8000792:	465b      	mov	r3, fp
 8000794:	4333      	orrs	r3, r6
 8000796:	4699      	mov	r9, r3
 8000798:	d05e      	beq.n	8000858 <__aeabi_ddiv+0x228>
 800079a:	2e00      	cmp	r6, #0
 800079c:	d100      	bne.n	80007a0 <__aeabi_ddiv+0x170>
 800079e:	e18a      	b.n	8000ab6 <__aeabi_ddiv+0x486>
 80007a0:	0030      	movs	r0, r6
 80007a2:	f001 f985 	bl	8001ab0 <__clzsi2>
 80007a6:	0003      	movs	r3, r0
 80007a8:	3b0b      	subs	r3, #11
 80007aa:	2b1c      	cmp	r3, #28
 80007ac:	dd00      	ble.n	80007b0 <__aeabi_ddiv+0x180>
 80007ae:	e17b      	b.n	8000aa8 <__aeabi_ddiv+0x478>
 80007b0:	221d      	movs	r2, #29
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	465a      	mov	r2, fp
 80007b6:	0001      	movs	r1, r0
 80007b8:	40da      	lsrs	r2, r3
 80007ba:	3908      	subs	r1, #8
 80007bc:	408e      	lsls	r6, r1
 80007be:	0013      	movs	r3, r2
 80007c0:	465f      	mov	r7, fp
 80007c2:	4333      	orrs	r3, r6
 80007c4:	4699      	mov	r9, r3
 80007c6:	408f      	lsls	r7, r1
 80007c8:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <__aeabi_ddiv+0x298>)
 80007ca:	2600      	movs	r6, #0
 80007cc:	1a1b      	subs	r3, r3, r0
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2300      	movs	r3, #0
 80007d2:	9302      	str	r3, [sp, #8]
 80007d4:	e752      	b.n	800067c <__aeabi_ddiv+0x4c>
 80007d6:	4641      	mov	r1, r8
 80007d8:	4653      	mov	r3, sl
 80007da:	430b      	orrs	r3, r1
 80007dc:	493b      	ldr	r1, [pc, #236]	; (80008cc <__aeabi_ddiv+0x29c>)
 80007de:	469b      	mov	fp, r3
 80007e0:	468c      	mov	ip, r1
 80007e2:	9b00      	ldr	r3, [sp, #0]
 80007e4:	4463      	add	r3, ip
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	465b      	mov	r3, fp
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d13b      	bne.n	8000866 <__aeabi_ddiv+0x236>
 80007ee:	2302      	movs	r3, #2
 80007f0:	2200      	movs	r2, #0
 80007f2:	431e      	orrs	r6, r3
 80007f4:	2102      	movs	r1, #2
 80007f6:	e761      	b.n	80006bc <__aeabi_ddiv+0x8c>
 80007f8:	4643      	mov	r3, r8
 80007fa:	4313      	orrs	r3, r2
 80007fc:	469b      	mov	fp, r3
 80007fe:	d037      	beq.n	8000870 <__aeabi_ddiv+0x240>
 8000800:	4643      	mov	r3, r8
 8000802:	2b00      	cmp	r3, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_ddiv+0x1d8>
 8000806:	e162      	b.n	8000ace <__aeabi_ddiv+0x49e>
 8000808:	4640      	mov	r0, r8
 800080a:	f001 f951 	bl	8001ab0 <__clzsi2>
 800080e:	0003      	movs	r3, r0
 8000810:	3b0b      	subs	r3, #11
 8000812:	2b1c      	cmp	r3, #28
 8000814:	dd00      	ble.n	8000818 <__aeabi_ddiv+0x1e8>
 8000816:	e153      	b.n	8000ac0 <__aeabi_ddiv+0x490>
 8000818:	0002      	movs	r2, r0
 800081a:	4641      	mov	r1, r8
 800081c:	3a08      	subs	r2, #8
 800081e:	4091      	lsls	r1, r2
 8000820:	4688      	mov	r8, r1
 8000822:	211d      	movs	r1, #29
 8000824:	1acb      	subs	r3, r1, r3
 8000826:	4651      	mov	r1, sl
 8000828:	40d9      	lsrs	r1, r3
 800082a:	000b      	movs	r3, r1
 800082c:	4641      	mov	r1, r8
 800082e:	430b      	orrs	r3, r1
 8000830:	469b      	mov	fp, r3
 8000832:	4653      	mov	r3, sl
 8000834:	4093      	lsls	r3, r2
 8000836:	001a      	movs	r2, r3
 8000838:	9b00      	ldr	r3, [sp, #0]
 800083a:	4925      	ldr	r1, [pc, #148]	; (80008d0 <__aeabi_ddiv+0x2a0>)
 800083c:	469c      	mov	ip, r3
 800083e:	4460      	add	r0, ip
 8000840:	0003      	movs	r3, r0
 8000842:	468c      	mov	ip, r1
 8000844:	4463      	add	r3, ip
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2100      	movs	r1, #0
 800084a:	e737      	b.n	80006bc <__aeabi_ddiv+0x8c>
 800084c:	2303      	movs	r3, #3
 800084e:	46b1      	mov	r9, r6
 8000850:	9000      	str	r0, [sp, #0]
 8000852:	260c      	movs	r6, #12
 8000854:	9302      	str	r3, [sp, #8]
 8000856:	e711      	b.n	800067c <__aeabi_ddiv+0x4c>
 8000858:	2300      	movs	r3, #0
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	2604      	movs	r6, #4
 8000860:	2700      	movs	r7, #0
 8000862:	9302      	str	r3, [sp, #8]
 8000864:	e70a      	b.n	800067c <__aeabi_ddiv+0x4c>
 8000866:	2303      	movs	r3, #3
 8000868:	46c3      	mov	fp, r8
 800086a:	431e      	orrs	r6, r3
 800086c:	2103      	movs	r1, #3
 800086e:	e725      	b.n	80006bc <__aeabi_ddiv+0x8c>
 8000870:	3301      	adds	r3, #1
 8000872:	431e      	orrs	r6, r3
 8000874:	2200      	movs	r2, #0
 8000876:	2101      	movs	r1, #1
 8000878:	e720      	b.n	80006bc <__aeabi_ddiv+0x8c>
 800087a:	2300      	movs	r3, #0
 800087c:	469a      	mov	sl, r3
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	2700      	movs	r7, #0
 8000882:	031b      	lsls	r3, r3, #12
 8000884:	4a09      	ldr	r2, [pc, #36]	; (80008ac <__aeabi_ddiv+0x27c>)
 8000886:	e761      	b.n	800074c <__aeabi_ddiv+0x11c>
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	4649      	mov	r1, r9
 800088c:	031b      	lsls	r3, r3, #12
 800088e:	4219      	tst	r1, r3
 8000890:	d100      	bne.n	8000894 <__aeabi_ddiv+0x264>
 8000892:	e0e2      	b.n	8000a5a <__aeabi_ddiv+0x42a>
 8000894:	4659      	mov	r1, fp
 8000896:	4219      	tst	r1, r3
 8000898:	d000      	beq.n	800089c <__aeabi_ddiv+0x26c>
 800089a:	e0de      	b.n	8000a5a <__aeabi_ddiv+0x42a>
 800089c:	430b      	orrs	r3, r1
 800089e:	031b      	lsls	r3, r3, #12
 80008a0:	0017      	movs	r7, r2
 80008a2:	0b1b      	lsrs	r3, r3, #12
 80008a4:	46a2      	mov	sl, r4
 80008a6:	4a01      	ldr	r2, [pc, #4]	; (80008ac <__aeabi_ddiv+0x27c>)
 80008a8:	e750      	b.n	800074c <__aeabi_ddiv+0x11c>
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	000007ff 	.word	0x000007ff
 80008b0:	fffffc01 	.word	0xfffffc01
 80008b4:	080060dc 	.word	0x080060dc
 80008b8:	000003ff 	.word	0x000003ff
 80008bc:	feffffff 	.word	0xfeffffff
 80008c0:	000007fe 	.word	0x000007fe
 80008c4:	800fffff 	.word	0x800fffff
 80008c8:	fffffc0d 	.word	0xfffffc0d
 80008cc:	fffff801 	.word	0xfffff801
 80008d0:	000003f3 	.word	0x000003f3
 80008d4:	45d9      	cmp	r9, fp
 80008d6:	d900      	bls.n	80008da <__aeabi_ddiv+0x2aa>
 80008d8:	e0cb      	b.n	8000a72 <__aeabi_ddiv+0x442>
 80008da:	d100      	bne.n	80008de <__aeabi_ddiv+0x2ae>
 80008dc:	e0c6      	b.n	8000a6c <__aeabi_ddiv+0x43c>
 80008de:	003c      	movs	r4, r7
 80008e0:	4648      	mov	r0, r9
 80008e2:	2700      	movs	r7, #0
 80008e4:	9b00      	ldr	r3, [sp, #0]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	465b      	mov	r3, fp
 80008ec:	0e16      	lsrs	r6, r2, #24
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	431e      	orrs	r6, r3
 80008f2:	0213      	lsls	r3, r2, #8
 80008f4:	4698      	mov	r8, r3
 80008f6:	0433      	lsls	r3, r6, #16
 80008f8:	0c1b      	lsrs	r3, r3, #16
 80008fa:	4699      	mov	r9, r3
 80008fc:	0c31      	lsrs	r1, r6, #16
 80008fe:	9101      	str	r1, [sp, #4]
 8000900:	f7ff fc88 	bl	8000214 <__aeabi_uidivmod>
 8000904:	464a      	mov	r2, r9
 8000906:	4342      	muls	r2, r0
 8000908:	040b      	lsls	r3, r1, #16
 800090a:	0c21      	lsrs	r1, r4, #16
 800090c:	0005      	movs	r5, r0
 800090e:	4319      	orrs	r1, r3
 8000910:	428a      	cmp	r2, r1
 8000912:	d907      	bls.n	8000924 <__aeabi_ddiv+0x2f4>
 8000914:	1989      	adds	r1, r1, r6
 8000916:	3d01      	subs	r5, #1
 8000918:	428e      	cmp	r6, r1
 800091a:	d803      	bhi.n	8000924 <__aeabi_ddiv+0x2f4>
 800091c:	428a      	cmp	r2, r1
 800091e:	d901      	bls.n	8000924 <__aeabi_ddiv+0x2f4>
 8000920:	1e85      	subs	r5, r0, #2
 8000922:	1989      	adds	r1, r1, r6
 8000924:	1a88      	subs	r0, r1, r2
 8000926:	9901      	ldr	r1, [sp, #4]
 8000928:	f7ff fc74 	bl	8000214 <__aeabi_uidivmod>
 800092c:	0409      	lsls	r1, r1, #16
 800092e:	468c      	mov	ip, r1
 8000930:	464a      	mov	r2, r9
 8000932:	0421      	lsls	r1, r4, #16
 8000934:	4664      	mov	r4, ip
 8000936:	4342      	muls	r2, r0
 8000938:	0c09      	lsrs	r1, r1, #16
 800093a:	0003      	movs	r3, r0
 800093c:	4321      	orrs	r1, r4
 800093e:	428a      	cmp	r2, r1
 8000940:	d904      	bls.n	800094c <__aeabi_ddiv+0x31c>
 8000942:	1989      	adds	r1, r1, r6
 8000944:	3b01      	subs	r3, #1
 8000946:	428e      	cmp	r6, r1
 8000948:	d800      	bhi.n	800094c <__aeabi_ddiv+0x31c>
 800094a:	e0f1      	b.n	8000b30 <__aeabi_ddiv+0x500>
 800094c:	042d      	lsls	r5, r5, #16
 800094e:	431d      	orrs	r5, r3
 8000950:	46ab      	mov	fp, r5
 8000952:	4643      	mov	r3, r8
 8000954:	1a89      	subs	r1, r1, r2
 8000956:	4642      	mov	r2, r8
 8000958:	0c28      	lsrs	r0, r5, #16
 800095a:	0412      	lsls	r2, r2, #16
 800095c:	0c1d      	lsrs	r5, r3, #16
 800095e:	465b      	mov	r3, fp
 8000960:	0c14      	lsrs	r4, r2, #16
 8000962:	0022      	movs	r2, r4
 8000964:	041b      	lsls	r3, r3, #16
 8000966:	0c1b      	lsrs	r3, r3, #16
 8000968:	435a      	muls	r2, r3
 800096a:	9403      	str	r4, [sp, #12]
 800096c:	436b      	muls	r3, r5
 800096e:	4344      	muls	r4, r0
 8000970:	9502      	str	r5, [sp, #8]
 8000972:	4368      	muls	r0, r5
 8000974:	191b      	adds	r3, r3, r4
 8000976:	0c15      	lsrs	r5, r2, #16
 8000978:	18eb      	adds	r3, r5, r3
 800097a:	429c      	cmp	r4, r3
 800097c:	d903      	bls.n	8000986 <__aeabi_ddiv+0x356>
 800097e:	2480      	movs	r4, #128	; 0x80
 8000980:	0264      	lsls	r4, r4, #9
 8000982:	46a4      	mov	ip, r4
 8000984:	4460      	add	r0, ip
 8000986:	0c1c      	lsrs	r4, r3, #16
 8000988:	0415      	lsls	r5, r2, #16
 800098a:	041b      	lsls	r3, r3, #16
 800098c:	0c2d      	lsrs	r5, r5, #16
 800098e:	1820      	adds	r0, r4, r0
 8000990:	195d      	adds	r5, r3, r5
 8000992:	4281      	cmp	r1, r0
 8000994:	d377      	bcc.n	8000a86 <__aeabi_ddiv+0x456>
 8000996:	d073      	beq.n	8000a80 <__aeabi_ddiv+0x450>
 8000998:	1a0c      	subs	r4, r1, r0
 800099a:	4aa2      	ldr	r2, [pc, #648]	; (8000c24 <__aeabi_ddiv+0x5f4>)
 800099c:	1b7d      	subs	r5, r7, r5
 800099e:	42af      	cmp	r7, r5
 80009a0:	41bf      	sbcs	r7, r7
 80009a2:	4694      	mov	ip, r2
 80009a4:	9b00      	ldr	r3, [sp, #0]
 80009a6:	427f      	negs	r7, r7
 80009a8:	4463      	add	r3, ip
 80009aa:	1be0      	subs	r0, r4, r7
 80009ac:	001c      	movs	r4, r3
 80009ae:	4286      	cmp	r6, r0
 80009b0:	d100      	bne.n	80009b4 <__aeabi_ddiv+0x384>
 80009b2:	e0db      	b.n	8000b6c <__aeabi_ddiv+0x53c>
 80009b4:	9901      	ldr	r1, [sp, #4]
 80009b6:	f7ff fc2d 	bl	8000214 <__aeabi_uidivmod>
 80009ba:	464a      	mov	r2, r9
 80009bc:	4342      	muls	r2, r0
 80009be:	040b      	lsls	r3, r1, #16
 80009c0:	0c29      	lsrs	r1, r5, #16
 80009c2:	0007      	movs	r7, r0
 80009c4:	4319      	orrs	r1, r3
 80009c6:	428a      	cmp	r2, r1
 80009c8:	d907      	bls.n	80009da <__aeabi_ddiv+0x3aa>
 80009ca:	1989      	adds	r1, r1, r6
 80009cc:	3f01      	subs	r7, #1
 80009ce:	428e      	cmp	r6, r1
 80009d0:	d803      	bhi.n	80009da <__aeabi_ddiv+0x3aa>
 80009d2:	428a      	cmp	r2, r1
 80009d4:	d901      	bls.n	80009da <__aeabi_ddiv+0x3aa>
 80009d6:	1e87      	subs	r7, r0, #2
 80009d8:	1989      	adds	r1, r1, r6
 80009da:	1a88      	subs	r0, r1, r2
 80009dc:	9901      	ldr	r1, [sp, #4]
 80009de:	f7ff fc19 	bl	8000214 <__aeabi_uidivmod>
 80009e2:	0409      	lsls	r1, r1, #16
 80009e4:	464a      	mov	r2, r9
 80009e6:	4689      	mov	r9, r1
 80009e8:	0429      	lsls	r1, r5, #16
 80009ea:	464d      	mov	r5, r9
 80009ec:	4342      	muls	r2, r0
 80009ee:	0c09      	lsrs	r1, r1, #16
 80009f0:	0003      	movs	r3, r0
 80009f2:	4329      	orrs	r1, r5
 80009f4:	428a      	cmp	r2, r1
 80009f6:	d907      	bls.n	8000a08 <__aeabi_ddiv+0x3d8>
 80009f8:	1989      	adds	r1, r1, r6
 80009fa:	3b01      	subs	r3, #1
 80009fc:	428e      	cmp	r6, r1
 80009fe:	d803      	bhi.n	8000a08 <__aeabi_ddiv+0x3d8>
 8000a00:	428a      	cmp	r2, r1
 8000a02:	d901      	bls.n	8000a08 <__aeabi_ddiv+0x3d8>
 8000a04:	1e83      	subs	r3, r0, #2
 8000a06:	1989      	adds	r1, r1, r6
 8000a08:	043f      	lsls	r7, r7, #16
 8000a0a:	1a89      	subs	r1, r1, r2
 8000a0c:	003a      	movs	r2, r7
 8000a0e:	9f03      	ldr	r7, [sp, #12]
 8000a10:	431a      	orrs	r2, r3
 8000a12:	0038      	movs	r0, r7
 8000a14:	0413      	lsls	r3, r2, #16
 8000a16:	0c1b      	lsrs	r3, r3, #16
 8000a18:	4358      	muls	r0, r3
 8000a1a:	4681      	mov	r9, r0
 8000a1c:	9802      	ldr	r0, [sp, #8]
 8000a1e:	0c15      	lsrs	r5, r2, #16
 8000a20:	436f      	muls	r7, r5
 8000a22:	4343      	muls	r3, r0
 8000a24:	4345      	muls	r5, r0
 8000a26:	4648      	mov	r0, r9
 8000a28:	0c00      	lsrs	r0, r0, #16
 8000a2a:	4684      	mov	ip, r0
 8000a2c:	19db      	adds	r3, r3, r7
 8000a2e:	4463      	add	r3, ip
 8000a30:	429f      	cmp	r7, r3
 8000a32:	d903      	bls.n	8000a3c <__aeabi_ddiv+0x40c>
 8000a34:	2080      	movs	r0, #128	; 0x80
 8000a36:	0240      	lsls	r0, r0, #9
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4465      	add	r5, ip
 8000a3c:	4648      	mov	r0, r9
 8000a3e:	0c1f      	lsrs	r7, r3, #16
 8000a40:	0400      	lsls	r0, r0, #16
 8000a42:	041b      	lsls	r3, r3, #16
 8000a44:	0c00      	lsrs	r0, r0, #16
 8000a46:	197d      	adds	r5, r7, r5
 8000a48:	1818      	adds	r0, r3, r0
 8000a4a:	42a9      	cmp	r1, r5
 8000a4c:	d200      	bcs.n	8000a50 <__aeabi_ddiv+0x420>
 8000a4e:	e084      	b.n	8000b5a <__aeabi_ddiv+0x52a>
 8000a50:	d100      	bne.n	8000a54 <__aeabi_ddiv+0x424>
 8000a52:	e07f      	b.n	8000b54 <__aeabi_ddiv+0x524>
 8000a54:	2301      	movs	r3, #1
 8000a56:	431a      	orrs	r2, r3
 8000a58:	e657      	b.n	800070a <__aeabi_ddiv+0xda>
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	464a      	mov	r2, r9
 8000a5e:	031b      	lsls	r3, r3, #12
 8000a60:	4313      	orrs	r3, r2
 8000a62:	031b      	lsls	r3, r3, #12
 8000a64:	0b1b      	lsrs	r3, r3, #12
 8000a66:	46aa      	mov	sl, r5
 8000a68:	4a6f      	ldr	r2, [pc, #444]	; (8000c28 <__aeabi_ddiv+0x5f8>)
 8000a6a:	e66f      	b.n	800074c <__aeabi_ddiv+0x11c>
 8000a6c:	42ba      	cmp	r2, r7
 8000a6e:	d900      	bls.n	8000a72 <__aeabi_ddiv+0x442>
 8000a70:	e735      	b.n	80008de <__aeabi_ddiv+0x2ae>
 8000a72:	464b      	mov	r3, r9
 8000a74:	07dc      	lsls	r4, r3, #31
 8000a76:	0858      	lsrs	r0, r3, #1
 8000a78:	087b      	lsrs	r3, r7, #1
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	07ff      	lsls	r7, r7, #31
 8000a7e:	e734      	b.n	80008ea <__aeabi_ddiv+0x2ba>
 8000a80:	2400      	movs	r4, #0
 8000a82:	42af      	cmp	r7, r5
 8000a84:	d289      	bcs.n	800099a <__aeabi_ddiv+0x36a>
 8000a86:	4447      	add	r7, r8
 8000a88:	4547      	cmp	r7, r8
 8000a8a:	41a4      	sbcs	r4, r4
 8000a8c:	465b      	mov	r3, fp
 8000a8e:	4264      	negs	r4, r4
 8000a90:	19a4      	adds	r4, r4, r6
 8000a92:	1864      	adds	r4, r4, r1
 8000a94:	3b01      	subs	r3, #1
 8000a96:	42a6      	cmp	r6, r4
 8000a98:	d21e      	bcs.n	8000ad8 <__aeabi_ddiv+0x4a8>
 8000a9a:	42a0      	cmp	r0, r4
 8000a9c:	d86d      	bhi.n	8000b7a <__aeabi_ddiv+0x54a>
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_ddiv+0x472>
 8000aa0:	e0b6      	b.n	8000c10 <__aeabi_ddiv+0x5e0>
 8000aa2:	1a24      	subs	r4, r4, r0
 8000aa4:	469b      	mov	fp, r3
 8000aa6:	e778      	b.n	800099a <__aeabi_ddiv+0x36a>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	465a      	mov	r2, fp
 8000aac:	3b28      	subs	r3, #40	; 0x28
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	2700      	movs	r7, #0
 8000ab2:	4691      	mov	r9, r2
 8000ab4:	e688      	b.n	80007c8 <__aeabi_ddiv+0x198>
 8000ab6:	4658      	mov	r0, fp
 8000ab8:	f000 fffa 	bl	8001ab0 <__clzsi2>
 8000abc:	3020      	adds	r0, #32
 8000abe:	e672      	b.n	80007a6 <__aeabi_ddiv+0x176>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	4652      	mov	r2, sl
 8000ac4:	3b28      	subs	r3, #40	; 0x28
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	4693      	mov	fp, r2
 8000aca:	2200      	movs	r2, #0
 8000acc:	e6b4      	b.n	8000838 <__aeabi_ddiv+0x208>
 8000ace:	4650      	mov	r0, sl
 8000ad0:	f000 ffee 	bl	8001ab0 <__clzsi2>
 8000ad4:	3020      	adds	r0, #32
 8000ad6:	e69a      	b.n	800080e <__aeabi_ddiv+0x1de>
 8000ad8:	42a6      	cmp	r6, r4
 8000ada:	d1e2      	bne.n	8000aa2 <__aeabi_ddiv+0x472>
 8000adc:	45b8      	cmp	r8, r7
 8000ade:	d9dc      	bls.n	8000a9a <__aeabi_ddiv+0x46a>
 8000ae0:	1a34      	subs	r4, r6, r0
 8000ae2:	469b      	mov	fp, r3
 8000ae4:	e759      	b.n	800099a <__aeabi_ddiv+0x36a>
 8000ae6:	2b1f      	cmp	r3, #31
 8000ae8:	dc65      	bgt.n	8000bb6 <__aeabi_ddiv+0x586>
 8000aea:	4c50      	ldr	r4, [pc, #320]	; (8000c2c <__aeabi_ddiv+0x5fc>)
 8000aec:	9900      	ldr	r1, [sp, #0]
 8000aee:	46a4      	mov	ip, r4
 8000af0:	465c      	mov	r4, fp
 8000af2:	4461      	add	r1, ip
 8000af4:	0008      	movs	r0, r1
 8000af6:	408c      	lsls	r4, r1
 8000af8:	0011      	movs	r1, r2
 8000afa:	4082      	lsls	r2, r0
 8000afc:	40d9      	lsrs	r1, r3
 8000afe:	1e50      	subs	r0, r2, #1
 8000b00:	4182      	sbcs	r2, r0
 8000b02:	430c      	orrs	r4, r1
 8000b04:	4314      	orrs	r4, r2
 8000b06:	465a      	mov	r2, fp
 8000b08:	40da      	lsrs	r2, r3
 8000b0a:	0013      	movs	r3, r2
 8000b0c:	0762      	lsls	r2, r4, #29
 8000b0e:	d009      	beq.n	8000b24 <__aeabi_ddiv+0x4f4>
 8000b10:	220f      	movs	r2, #15
 8000b12:	4022      	ands	r2, r4
 8000b14:	2a04      	cmp	r2, #4
 8000b16:	d005      	beq.n	8000b24 <__aeabi_ddiv+0x4f4>
 8000b18:	0022      	movs	r2, r4
 8000b1a:	1d14      	adds	r4, r2, #4
 8000b1c:	4294      	cmp	r4, r2
 8000b1e:	4189      	sbcs	r1, r1
 8000b20:	4249      	negs	r1, r1
 8000b22:	185b      	adds	r3, r3, r1
 8000b24:	021a      	lsls	r2, r3, #8
 8000b26:	d562      	bpl.n	8000bee <__aeabi_ddiv+0x5be>
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	2700      	movs	r7, #0
 8000b2e:	e60d      	b.n	800074c <__aeabi_ddiv+0x11c>
 8000b30:	428a      	cmp	r2, r1
 8000b32:	d800      	bhi.n	8000b36 <__aeabi_ddiv+0x506>
 8000b34:	e70a      	b.n	800094c <__aeabi_ddiv+0x31c>
 8000b36:	1e83      	subs	r3, r0, #2
 8000b38:	1989      	adds	r1, r1, r6
 8000b3a:	e707      	b.n	800094c <__aeabi_ddiv+0x31c>
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	4013      	ands	r3, r2
 8000b40:	2b04      	cmp	r3, #4
 8000b42:	d100      	bne.n	8000b46 <__aeabi_ddiv+0x516>
 8000b44:	e5e6      	b.n	8000714 <__aeabi_ddiv+0xe4>
 8000b46:	1d17      	adds	r7, r2, #4
 8000b48:	4297      	cmp	r7, r2
 8000b4a:	4192      	sbcs	r2, r2
 8000b4c:	4253      	negs	r3, r2
 8000b4e:	449b      	add	fp, r3
 8000b50:	08fa      	lsrs	r2, r7, #3
 8000b52:	e5e0      	b.n	8000716 <__aeabi_ddiv+0xe6>
 8000b54:	2800      	cmp	r0, #0
 8000b56:	d100      	bne.n	8000b5a <__aeabi_ddiv+0x52a>
 8000b58:	e5d7      	b.n	800070a <__aeabi_ddiv+0xda>
 8000b5a:	1871      	adds	r1, r6, r1
 8000b5c:	1e53      	subs	r3, r2, #1
 8000b5e:	42b1      	cmp	r1, r6
 8000b60:	d327      	bcc.n	8000bb2 <__aeabi_ddiv+0x582>
 8000b62:	42a9      	cmp	r1, r5
 8000b64:	d315      	bcc.n	8000b92 <__aeabi_ddiv+0x562>
 8000b66:	d058      	beq.n	8000c1a <__aeabi_ddiv+0x5ea>
 8000b68:	001a      	movs	r2, r3
 8000b6a:	e773      	b.n	8000a54 <__aeabi_ddiv+0x424>
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	dc00      	bgt.n	8000b72 <__aeabi_ddiv+0x542>
 8000b70:	e604      	b.n	800077c <__aeabi_ddiv+0x14c>
 8000b72:	2301      	movs	r3, #1
 8000b74:	2200      	movs	r2, #0
 8000b76:	449b      	add	fp, r3
 8000b78:	e5cd      	b.n	8000716 <__aeabi_ddiv+0xe6>
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	4447      	add	r7, r8
 8000b7e:	4547      	cmp	r7, r8
 8000b80:	4189      	sbcs	r1, r1
 8000b82:	425b      	negs	r3, r3
 8000b84:	469c      	mov	ip, r3
 8000b86:	4249      	negs	r1, r1
 8000b88:	1989      	adds	r1, r1, r6
 8000b8a:	190c      	adds	r4, r1, r4
 8000b8c:	44e3      	add	fp, ip
 8000b8e:	1a24      	subs	r4, r4, r0
 8000b90:	e703      	b.n	800099a <__aeabi_ddiv+0x36a>
 8000b92:	4643      	mov	r3, r8
 8000b94:	005f      	lsls	r7, r3, #1
 8000b96:	4547      	cmp	r7, r8
 8000b98:	419b      	sbcs	r3, r3
 8000b9a:	46b8      	mov	r8, r7
 8000b9c:	425b      	negs	r3, r3
 8000b9e:	199e      	adds	r6, r3, r6
 8000ba0:	3a02      	subs	r2, #2
 8000ba2:	1989      	adds	r1, r1, r6
 8000ba4:	42a9      	cmp	r1, r5
 8000ba6:	d000      	beq.n	8000baa <__aeabi_ddiv+0x57a>
 8000ba8:	e754      	b.n	8000a54 <__aeabi_ddiv+0x424>
 8000baa:	4540      	cmp	r0, r8
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_ddiv+0x580>
 8000bae:	e751      	b.n	8000a54 <__aeabi_ddiv+0x424>
 8000bb0:	e5ab      	b.n	800070a <__aeabi_ddiv+0xda>
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	e7f6      	b.n	8000ba4 <__aeabi_ddiv+0x574>
 8000bb6:	211f      	movs	r1, #31
 8000bb8:	465f      	mov	r7, fp
 8000bba:	4249      	negs	r1, r1
 8000bbc:	1b0c      	subs	r4, r1, r4
 8000bbe:	40e7      	lsrs	r7, r4
 8000bc0:	2b20      	cmp	r3, #32
 8000bc2:	d007      	beq.n	8000bd4 <__aeabi_ddiv+0x5a4>
 8000bc4:	491a      	ldr	r1, [pc, #104]	; (8000c30 <__aeabi_ddiv+0x600>)
 8000bc6:	9b00      	ldr	r3, [sp, #0]
 8000bc8:	468c      	mov	ip, r1
 8000bca:	4463      	add	r3, ip
 8000bcc:	0018      	movs	r0, r3
 8000bce:	465b      	mov	r3, fp
 8000bd0:	4083      	lsls	r3, r0
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	1e50      	subs	r0, r2, #1
 8000bd6:	4182      	sbcs	r2, r0
 8000bd8:	433a      	orrs	r2, r7
 8000bda:	2707      	movs	r7, #7
 8000bdc:	2300      	movs	r3, #0
 8000bde:	4017      	ands	r7, r2
 8000be0:	d009      	beq.n	8000bf6 <__aeabi_ddiv+0x5c6>
 8000be2:	210f      	movs	r1, #15
 8000be4:	2300      	movs	r3, #0
 8000be6:	4011      	ands	r1, r2
 8000be8:	0014      	movs	r4, r2
 8000bea:	2904      	cmp	r1, #4
 8000bec:	d195      	bne.n	8000b1a <__aeabi_ddiv+0x4ea>
 8000bee:	0022      	movs	r2, r4
 8000bf0:	075f      	lsls	r7, r3, #29
 8000bf2:	025b      	lsls	r3, r3, #9
 8000bf4:	0b1b      	lsrs	r3, r3, #12
 8000bf6:	08d2      	lsrs	r2, r2, #3
 8000bf8:	4317      	orrs	r7, r2
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	e5a6      	b.n	800074c <__aeabi_ddiv+0x11c>
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	4659      	mov	r1, fp
 8000c02:	031b      	lsls	r3, r3, #12
 8000c04:	430b      	orrs	r3, r1
 8000c06:	031b      	lsls	r3, r3, #12
 8000c08:	0017      	movs	r7, r2
 8000c0a:	0b1b      	lsrs	r3, r3, #12
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <__aeabi_ddiv+0x5f8>)
 8000c0e:	e59d      	b.n	800074c <__aeabi_ddiv+0x11c>
 8000c10:	42bd      	cmp	r5, r7
 8000c12:	d8b2      	bhi.n	8000b7a <__aeabi_ddiv+0x54a>
 8000c14:	469b      	mov	fp, r3
 8000c16:	2400      	movs	r4, #0
 8000c18:	e6bf      	b.n	800099a <__aeabi_ddiv+0x36a>
 8000c1a:	4580      	cmp	r8, r0
 8000c1c:	d3b9      	bcc.n	8000b92 <__aeabi_ddiv+0x562>
 8000c1e:	001a      	movs	r2, r3
 8000c20:	e7c3      	b.n	8000baa <__aeabi_ddiv+0x57a>
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	000003ff 	.word	0x000003ff
 8000c28:	000007ff 	.word	0x000007ff
 8000c2c:	0000041e 	.word	0x0000041e
 8000c30:	0000043e 	.word	0x0000043e

08000c34 <__aeabi_dmul>:
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	4657      	mov	r7, sl
 8000c38:	46de      	mov	lr, fp
 8000c3a:	464e      	mov	r6, r9
 8000c3c:	4645      	mov	r5, r8
 8000c3e:	b5e0      	push	{r5, r6, r7, lr}
 8000c40:	4683      	mov	fp, r0
 8000c42:	0006      	movs	r6, r0
 8000c44:	030f      	lsls	r7, r1, #12
 8000c46:	0048      	lsls	r0, r1, #1
 8000c48:	b087      	sub	sp, #28
 8000c4a:	4692      	mov	sl, r2
 8000c4c:	001d      	movs	r5, r3
 8000c4e:	0b3f      	lsrs	r7, r7, #12
 8000c50:	0d40      	lsrs	r0, r0, #21
 8000c52:	0fcc      	lsrs	r4, r1, #31
 8000c54:	2800      	cmp	r0, #0
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dmul+0x26>
 8000c58:	e06f      	b.n	8000d3a <__aeabi_dmul+0x106>
 8000c5a:	4bde      	ldr	r3, [pc, #888]	; (8000fd4 <__aeabi_dmul+0x3a0>)
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	d038      	beq.n	8000cd2 <__aeabi_dmul+0x9e>
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	00ff      	lsls	r7, r7, #3
 8000c64:	041b      	lsls	r3, r3, #16
 8000c66:	431f      	orrs	r7, r3
 8000c68:	0f73      	lsrs	r3, r6, #29
 8000c6a:	433b      	orrs	r3, r7
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	4bda      	ldr	r3, [pc, #872]	; (8000fd8 <__aeabi_dmul+0x3a4>)
 8000c70:	2700      	movs	r7, #0
 8000c72:	4699      	mov	r9, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	469b      	mov	fp, r3
 8000c78:	00f6      	lsls	r6, r6, #3
 8000c7a:	4481      	add	r9, r0
 8000c7c:	032b      	lsls	r3, r5, #12
 8000c7e:	0069      	lsls	r1, r5, #1
 8000c80:	0b1b      	lsrs	r3, r3, #12
 8000c82:	4652      	mov	r2, sl
 8000c84:	4698      	mov	r8, r3
 8000c86:	0d49      	lsrs	r1, r1, #21
 8000c88:	0fed      	lsrs	r5, r5, #31
 8000c8a:	2900      	cmp	r1, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dmul+0x5c>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_dmul+0x168>
 8000c90:	4bd0      	ldr	r3, [pc, #832]	; (8000fd4 <__aeabi_dmul+0x3a0>)
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dmul+0x64>
 8000c96:	e073      	b.n	8000d80 <__aeabi_dmul+0x14c>
 8000c98:	4643      	mov	r3, r8
 8000c9a:	00da      	lsls	r2, r3, #3
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	041b      	lsls	r3, r3, #16
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	4652      	mov	r2, sl
 8000ca4:	48cc      	ldr	r0, [pc, #816]	; (8000fd8 <__aeabi_dmul+0x3a4>)
 8000ca6:	0f52      	lsrs	r2, r2, #29
 8000ca8:	4684      	mov	ip, r0
 8000caa:	4313      	orrs	r3, r2
 8000cac:	4652      	mov	r2, sl
 8000cae:	2000      	movs	r0, #0
 8000cb0:	4461      	add	r1, ip
 8000cb2:	00d2      	lsls	r2, r2, #3
 8000cb4:	4489      	add	r9, r1
 8000cb6:	0021      	movs	r1, r4
 8000cb8:	4069      	eors	r1, r5
 8000cba:	9100      	str	r1, [sp, #0]
 8000cbc:	468c      	mov	ip, r1
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4449      	add	r1, r9
 8000cc2:	468a      	mov	sl, r1
 8000cc4:	2f0f      	cmp	r7, #15
 8000cc6:	d900      	bls.n	8000cca <__aeabi_dmul+0x96>
 8000cc8:	e090      	b.n	8000dec <__aeabi_dmul+0x1b8>
 8000cca:	49c4      	ldr	r1, [pc, #784]	; (8000fdc <__aeabi_dmul+0x3a8>)
 8000ccc:	00bf      	lsls	r7, r7, #2
 8000cce:	59cf      	ldr	r7, [r1, r7]
 8000cd0:	46bf      	mov	pc, r7
 8000cd2:	465b      	mov	r3, fp
 8000cd4:	433b      	orrs	r3, r7
 8000cd6:	9301      	str	r3, [sp, #4]
 8000cd8:	d000      	beq.n	8000cdc <__aeabi_dmul+0xa8>
 8000cda:	e16a      	b.n	8000fb2 <__aeabi_dmul+0x37e>
 8000cdc:	2302      	movs	r3, #2
 8000cde:	2708      	movs	r7, #8
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	4681      	mov	r9, r0
 8000ce4:	469b      	mov	fp, r3
 8000ce6:	e7c9      	b.n	8000c7c <__aeabi_dmul+0x48>
 8000ce8:	0032      	movs	r2, r6
 8000cea:	4658      	mov	r0, fp
 8000cec:	9b01      	ldr	r3, [sp, #4]
 8000cee:	4661      	mov	r1, ip
 8000cf0:	9100      	str	r1, [sp, #0]
 8000cf2:	2802      	cmp	r0, #2
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_dmul+0xc4>
 8000cf6:	e075      	b.n	8000de4 <__aeabi_dmul+0x1b0>
 8000cf8:	2803      	cmp	r0, #3
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_dmul+0xca>
 8000cfc:	e1fe      	b.n	80010fc <__aeabi_dmul+0x4c8>
 8000cfe:	2801      	cmp	r0, #1
 8000d00:	d000      	beq.n	8000d04 <__aeabi_dmul+0xd0>
 8000d02:	e12c      	b.n	8000f5e <__aeabi_dmul+0x32a>
 8000d04:	2300      	movs	r3, #0
 8000d06:	2700      	movs	r7, #0
 8000d08:	2600      	movs	r6, #0
 8000d0a:	2500      	movs	r5, #0
 8000d0c:	033f      	lsls	r7, r7, #12
 8000d0e:	0d2a      	lsrs	r2, r5, #20
 8000d10:	0b3f      	lsrs	r7, r7, #12
 8000d12:	48b3      	ldr	r0, [pc, #716]	; (8000fe0 <__aeabi_dmul+0x3ac>)
 8000d14:	0512      	lsls	r2, r2, #20
 8000d16:	433a      	orrs	r2, r7
 8000d18:	4002      	ands	r2, r0
 8000d1a:	051b      	lsls	r3, r3, #20
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	9a00      	ldr	r2, [sp, #0]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	07d1      	lsls	r1, r2, #31
 8000d24:	085b      	lsrs	r3, r3, #1
 8000d26:	430b      	orrs	r3, r1
 8000d28:	0030      	movs	r0, r6
 8000d2a:	0019      	movs	r1, r3
 8000d2c:	b007      	add	sp, #28
 8000d2e:	bc3c      	pop	{r2, r3, r4, r5}
 8000d30:	4690      	mov	r8, r2
 8000d32:	4699      	mov	r9, r3
 8000d34:	46a2      	mov	sl, r4
 8000d36:	46ab      	mov	fp, r5
 8000d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d3a:	465b      	mov	r3, fp
 8000d3c:	433b      	orrs	r3, r7
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	d100      	bne.n	8000d44 <__aeabi_dmul+0x110>
 8000d42:	e12f      	b.n	8000fa4 <__aeabi_dmul+0x370>
 8000d44:	2f00      	cmp	r7, #0
 8000d46:	d100      	bne.n	8000d4a <__aeabi_dmul+0x116>
 8000d48:	e1a5      	b.n	8001096 <__aeabi_dmul+0x462>
 8000d4a:	0038      	movs	r0, r7
 8000d4c:	f000 feb0 	bl	8001ab0 <__clzsi2>
 8000d50:	0003      	movs	r3, r0
 8000d52:	3b0b      	subs	r3, #11
 8000d54:	2b1c      	cmp	r3, #28
 8000d56:	dd00      	ble.n	8000d5a <__aeabi_dmul+0x126>
 8000d58:	e196      	b.n	8001088 <__aeabi_dmul+0x454>
 8000d5a:	221d      	movs	r2, #29
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	465a      	mov	r2, fp
 8000d60:	0001      	movs	r1, r0
 8000d62:	40da      	lsrs	r2, r3
 8000d64:	465e      	mov	r6, fp
 8000d66:	3908      	subs	r1, #8
 8000d68:	408f      	lsls	r7, r1
 8000d6a:	0013      	movs	r3, r2
 8000d6c:	408e      	lsls	r6, r1
 8000d6e:	433b      	orrs	r3, r7
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	4b9c      	ldr	r3, [pc, #624]	; (8000fe4 <__aeabi_dmul+0x3b0>)
 8000d74:	2700      	movs	r7, #0
 8000d76:	1a1b      	subs	r3, r3, r0
 8000d78:	4699      	mov	r9, r3
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	469b      	mov	fp, r3
 8000d7e:	e77d      	b.n	8000c7c <__aeabi_dmul+0x48>
 8000d80:	4641      	mov	r1, r8
 8000d82:	4653      	mov	r3, sl
 8000d84:	430b      	orrs	r3, r1
 8000d86:	4993      	ldr	r1, [pc, #588]	; (8000fd4 <__aeabi_dmul+0x3a0>)
 8000d88:	468c      	mov	ip, r1
 8000d8a:	44e1      	add	r9, ip
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d000      	beq.n	8000d92 <__aeabi_dmul+0x15e>
 8000d90:	e11a      	b.n	8000fc8 <__aeabi_dmul+0x394>
 8000d92:	2202      	movs	r2, #2
 8000d94:	2002      	movs	r0, #2
 8000d96:	4317      	orrs	r7, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e78c      	b.n	8000cb6 <__aeabi_dmul+0x82>
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_dmul+0x16e>
 8000da0:	e10d      	b.n	8000fbe <__aeabi_dmul+0x38a>
 8000da2:	4643      	mov	r3, r8
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d100      	bne.n	8000daa <__aeabi_dmul+0x176>
 8000da8:	e181      	b.n	80010ae <__aeabi_dmul+0x47a>
 8000daa:	4640      	mov	r0, r8
 8000dac:	f000 fe80 	bl	8001ab0 <__clzsi2>
 8000db0:	0002      	movs	r2, r0
 8000db2:	3a0b      	subs	r2, #11
 8000db4:	2a1c      	cmp	r2, #28
 8000db6:	dd00      	ble.n	8000dba <__aeabi_dmul+0x186>
 8000db8:	e172      	b.n	80010a0 <__aeabi_dmul+0x46c>
 8000dba:	0001      	movs	r1, r0
 8000dbc:	4643      	mov	r3, r8
 8000dbe:	3908      	subs	r1, #8
 8000dc0:	408b      	lsls	r3, r1
 8000dc2:	4698      	mov	r8, r3
 8000dc4:	231d      	movs	r3, #29
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	4653      	mov	r3, sl
 8000dca:	40d3      	lsrs	r3, r2
 8000dcc:	001a      	movs	r2, r3
 8000dce:	4643      	mov	r3, r8
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4652      	mov	r2, sl
 8000dd4:	408a      	lsls	r2, r1
 8000dd6:	4649      	mov	r1, r9
 8000dd8:	1a08      	subs	r0, r1, r0
 8000dda:	4982      	ldr	r1, [pc, #520]	; (8000fe4 <__aeabi_dmul+0x3b0>)
 8000ddc:	4689      	mov	r9, r1
 8000dde:	4481      	add	r9, r0
 8000de0:	2000      	movs	r0, #0
 8000de2:	e768      	b.n	8000cb6 <__aeabi_dmul+0x82>
 8000de4:	4b7b      	ldr	r3, [pc, #492]	; (8000fd4 <__aeabi_dmul+0x3a0>)
 8000de6:	2700      	movs	r7, #0
 8000de8:	2600      	movs	r6, #0
 8000dea:	e78e      	b.n	8000d0a <__aeabi_dmul+0xd6>
 8000dec:	0c14      	lsrs	r4, r2, #16
 8000dee:	0412      	lsls	r2, r2, #16
 8000df0:	0c12      	lsrs	r2, r2, #16
 8000df2:	0011      	movs	r1, r2
 8000df4:	0c37      	lsrs	r7, r6, #16
 8000df6:	0436      	lsls	r6, r6, #16
 8000df8:	0c35      	lsrs	r5, r6, #16
 8000dfa:	4379      	muls	r1, r7
 8000dfc:	0028      	movs	r0, r5
 8000dfe:	468c      	mov	ip, r1
 8000e00:	002e      	movs	r6, r5
 8000e02:	4360      	muls	r0, r4
 8000e04:	4460      	add	r0, ip
 8000e06:	4683      	mov	fp, r0
 8000e08:	4356      	muls	r6, r2
 8000e0a:	0021      	movs	r1, r4
 8000e0c:	0c30      	lsrs	r0, r6, #16
 8000e0e:	4680      	mov	r8, r0
 8000e10:	4658      	mov	r0, fp
 8000e12:	4379      	muls	r1, r7
 8000e14:	4440      	add	r0, r8
 8000e16:	9102      	str	r1, [sp, #8]
 8000e18:	4584      	cmp	ip, r0
 8000e1a:	d906      	bls.n	8000e2a <__aeabi_dmul+0x1f6>
 8000e1c:	4688      	mov	r8, r1
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	0249      	lsls	r1, r1, #9
 8000e22:	468c      	mov	ip, r1
 8000e24:	44e0      	add	r8, ip
 8000e26:	4641      	mov	r1, r8
 8000e28:	9102      	str	r1, [sp, #8]
 8000e2a:	0436      	lsls	r6, r6, #16
 8000e2c:	0c01      	lsrs	r1, r0, #16
 8000e2e:	0c36      	lsrs	r6, r6, #16
 8000e30:	0400      	lsls	r0, r0, #16
 8000e32:	468b      	mov	fp, r1
 8000e34:	1981      	adds	r1, r0, r6
 8000e36:	0c1e      	lsrs	r6, r3, #16
 8000e38:	041b      	lsls	r3, r3, #16
 8000e3a:	0c1b      	lsrs	r3, r3, #16
 8000e3c:	9103      	str	r1, [sp, #12]
 8000e3e:	0019      	movs	r1, r3
 8000e40:	4379      	muls	r1, r7
 8000e42:	468c      	mov	ip, r1
 8000e44:	0028      	movs	r0, r5
 8000e46:	4375      	muls	r5, r6
 8000e48:	4465      	add	r5, ip
 8000e4a:	46a8      	mov	r8, r5
 8000e4c:	4358      	muls	r0, r3
 8000e4e:	0c05      	lsrs	r5, r0, #16
 8000e50:	4445      	add	r5, r8
 8000e52:	4377      	muls	r7, r6
 8000e54:	42a9      	cmp	r1, r5
 8000e56:	d903      	bls.n	8000e60 <__aeabi_dmul+0x22c>
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	0249      	lsls	r1, r1, #9
 8000e5c:	468c      	mov	ip, r1
 8000e5e:	4467      	add	r7, ip
 8000e60:	0c29      	lsrs	r1, r5, #16
 8000e62:	468c      	mov	ip, r1
 8000e64:	0039      	movs	r1, r7
 8000e66:	0400      	lsls	r0, r0, #16
 8000e68:	0c00      	lsrs	r0, r0, #16
 8000e6a:	042d      	lsls	r5, r5, #16
 8000e6c:	182d      	adds	r5, r5, r0
 8000e6e:	4461      	add	r1, ip
 8000e70:	44ab      	add	fp, r5
 8000e72:	9105      	str	r1, [sp, #20]
 8000e74:	4659      	mov	r1, fp
 8000e76:	9104      	str	r1, [sp, #16]
 8000e78:	9901      	ldr	r1, [sp, #4]
 8000e7a:	040f      	lsls	r7, r1, #16
 8000e7c:	0c3f      	lsrs	r7, r7, #16
 8000e7e:	0c08      	lsrs	r0, r1, #16
 8000e80:	0039      	movs	r1, r7
 8000e82:	4351      	muls	r1, r2
 8000e84:	4342      	muls	r2, r0
 8000e86:	4690      	mov	r8, r2
 8000e88:	0002      	movs	r2, r0
 8000e8a:	468c      	mov	ip, r1
 8000e8c:	0c09      	lsrs	r1, r1, #16
 8000e8e:	468b      	mov	fp, r1
 8000e90:	4362      	muls	r2, r4
 8000e92:	437c      	muls	r4, r7
 8000e94:	4444      	add	r4, r8
 8000e96:	445c      	add	r4, fp
 8000e98:	45a0      	cmp	r8, r4
 8000e9a:	d903      	bls.n	8000ea4 <__aeabi_dmul+0x270>
 8000e9c:	2180      	movs	r1, #128	; 0x80
 8000e9e:	0249      	lsls	r1, r1, #9
 8000ea0:	4688      	mov	r8, r1
 8000ea2:	4442      	add	r2, r8
 8000ea4:	0c21      	lsrs	r1, r4, #16
 8000ea6:	4688      	mov	r8, r1
 8000ea8:	4661      	mov	r1, ip
 8000eaa:	0409      	lsls	r1, r1, #16
 8000eac:	0c09      	lsrs	r1, r1, #16
 8000eae:	468c      	mov	ip, r1
 8000eb0:	0039      	movs	r1, r7
 8000eb2:	4359      	muls	r1, r3
 8000eb4:	4343      	muls	r3, r0
 8000eb6:	4370      	muls	r0, r6
 8000eb8:	437e      	muls	r6, r7
 8000eba:	0c0f      	lsrs	r7, r1, #16
 8000ebc:	18f6      	adds	r6, r6, r3
 8000ebe:	0424      	lsls	r4, r4, #16
 8000ec0:	19be      	adds	r6, r7, r6
 8000ec2:	4464      	add	r4, ip
 8000ec4:	4442      	add	r2, r8
 8000ec6:	468c      	mov	ip, r1
 8000ec8:	42b3      	cmp	r3, r6
 8000eca:	d903      	bls.n	8000ed4 <__aeabi_dmul+0x2a0>
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	025b      	lsls	r3, r3, #9
 8000ed0:	4698      	mov	r8, r3
 8000ed2:	4440      	add	r0, r8
 8000ed4:	9b02      	ldr	r3, [sp, #8]
 8000ed6:	4661      	mov	r1, ip
 8000ed8:	4698      	mov	r8, r3
 8000eda:	9b04      	ldr	r3, [sp, #16]
 8000edc:	0437      	lsls	r7, r6, #16
 8000ede:	4443      	add	r3, r8
 8000ee0:	469b      	mov	fp, r3
 8000ee2:	45ab      	cmp	fp, r5
 8000ee4:	41ad      	sbcs	r5, r5
 8000ee6:	426b      	negs	r3, r5
 8000ee8:	040d      	lsls	r5, r1, #16
 8000eea:	9905      	ldr	r1, [sp, #20]
 8000eec:	0c2d      	lsrs	r5, r5, #16
 8000eee:	468c      	mov	ip, r1
 8000ef0:	197f      	adds	r7, r7, r5
 8000ef2:	4467      	add	r7, ip
 8000ef4:	18fd      	adds	r5, r7, r3
 8000ef6:	46a8      	mov	r8, r5
 8000ef8:	465d      	mov	r5, fp
 8000efa:	192d      	adds	r5, r5, r4
 8000efc:	42a5      	cmp	r5, r4
 8000efe:	41a4      	sbcs	r4, r4
 8000f00:	4693      	mov	fp, r2
 8000f02:	4264      	negs	r4, r4
 8000f04:	46a4      	mov	ip, r4
 8000f06:	44c3      	add	fp, r8
 8000f08:	44dc      	add	ip, fp
 8000f0a:	428f      	cmp	r7, r1
 8000f0c:	41bf      	sbcs	r7, r7
 8000f0e:	4598      	cmp	r8, r3
 8000f10:	419b      	sbcs	r3, r3
 8000f12:	4593      	cmp	fp, r2
 8000f14:	4192      	sbcs	r2, r2
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	41a4      	sbcs	r4, r4
 8000f1a:	425b      	negs	r3, r3
 8000f1c:	427f      	negs	r7, r7
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c36      	lsrs	r6, r6, #16
 8000f22:	4252      	negs	r2, r2
 8000f24:	4264      	negs	r4, r4
 8000f26:	19bf      	adds	r7, r7, r6
 8000f28:	4322      	orrs	r2, r4
 8000f2a:	18bf      	adds	r7, r7, r2
 8000f2c:	4662      	mov	r2, ip
 8000f2e:	1838      	adds	r0, r7, r0
 8000f30:	0243      	lsls	r3, r0, #9
 8000f32:	0dd2      	lsrs	r2, r2, #23
 8000f34:	9903      	ldr	r1, [sp, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	026a      	lsls	r2, r5, #9
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	1e50      	subs	r0, r2, #1
 8000f3e:	4182      	sbcs	r2, r0
 8000f40:	4661      	mov	r1, ip
 8000f42:	0ded      	lsrs	r5, r5, #23
 8000f44:	432a      	orrs	r2, r5
 8000f46:	024e      	lsls	r6, r1, #9
 8000f48:	4332      	orrs	r2, r6
 8000f4a:	01d9      	lsls	r1, r3, #7
 8000f4c:	d400      	bmi.n	8000f50 <__aeabi_dmul+0x31c>
 8000f4e:	e0b3      	b.n	80010b8 <__aeabi_dmul+0x484>
 8000f50:	2601      	movs	r6, #1
 8000f52:	0850      	lsrs	r0, r2, #1
 8000f54:	4032      	ands	r2, r6
 8000f56:	4302      	orrs	r2, r0
 8000f58:	07de      	lsls	r6, r3, #31
 8000f5a:	4332      	orrs	r2, r6
 8000f5c:	085b      	lsrs	r3, r3, #1
 8000f5e:	4c22      	ldr	r4, [pc, #136]	; (8000fe8 <__aeabi_dmul+0x3b4>)
 8000f60:	4454      	add	r4, sl
 8000f62:	2c00      	cmp	r4, #0
 8000f64:	dd62      	ble.n	800102c <__aeabi_dmul+0x3f8>
 8000f66:	0751      	lsls	r1, r2, #29
 8000f68:	d009      	beq.n	8000f7e <__aeabi_dmul+0x34a>
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	4010      	ands	r0, r2
 8000f6e:	2804      	cmp	r0, #4
 8000f70:	d005      	beq.n	8000f7e <__aeabi_dmul+0x34a>
 8000f72:	1d10      	adds	r0, r2, #4
 8000f74:	4290      	cmp	r0, r2
 8000f76:	4192      	sbcs	r2, r2
 8000f78:	4252      	negs	r2, r2
 8000f7a:	189b      	adds	r3, r3, r2
 8000f7c:	0002      	movs	r2, r0
 8000f7e:	01d9      	lsls	r1, r3, #7
 8000f80:	d504      	bpl.n	8000f8c <__aeabi_dmul+0x358>
 8000f82:	2480      	movs	r4, #128	; 0x80
 8000f84:	4819      	ldr	r0, [pc, #100]	; (8000fec <__aeabi_dmul+0x3b8>)
 8000f86:	00e4      	lsls	r4, r4, #3
 8000f88:	4003      	ands	r3, r0
 8000f8a:	4454      	add	r4, sl
 8000f8c:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <__aeabi_dmul+0x3bc>)
 8000f8e:	4284      	cmp	r4, r0
 8000f90:	dd00      	ble.n	8000f94 <__aeabi_dmul+0x360>
 8000f92:	e727      	b.n	8000de4 <__aeabi_dmul+0x1b0>
 8000f94:	075e      	lsls	r6, r3, #29
 8000f96:	025b      	lsls	r3, r3, #9
 8000f98:	08d2      	lsrs	r2, r2, #3
 8000f9a:	0b1f      	lsrs	r7, r3, #12
 8000f9c:	0563      	lsls	r3, r4, #21
 8000f9e:	4316      	orrs	r6, r2
 8000fa0:	0d5b      	lsrs	r3, r3, #21
 8000fa2:	e6b2      	b.n	8000d0a <__aeabi_dmul+0xd6>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	4699      	mov	r9, r3
 8000fa8:	3301      	adds	r3, #1
 8000faa:	2704      	movs	r7, #4
 8000fac:	2600      	movs	r6, #0
 8000fae:	469b      	mov	fp, r3
 8000fb0:	e664      	b.n	8000c7c <__aeabi_dmul+0x48>
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	9701      	str	r7, [sp, #4]
 8000fb6:	4681      	mov	r9, r0
 8000fb8:	270c      	movs	r7, #12
 8000fba:	469b      	mov	fp, r3
 8000fbc:	e65e      	b.n	8000c7c <__aeabi_dmul+0x48>
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	4317      	orrs	r7, r2
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	e676      	b.n	8000cb6 <__aeabi_dmul+0x82>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	2003      	movs	r0, #3
 8000fcc:	431f      	orrs	r7, r3
 8000fce:	4643      	mov	r3, r8
 8000fd0:	e671      	b.n	8000cb6 <__aeabi_dmul+0x82>
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	000007ff 	.word	0x000007ff
 8000fd8:	fffffc01 	.word	0xfffffc01
 8000fdc:	0800611c 	.word	0x0800611c
 8000fe0:	800fffff 	.word	0x800fffff
 8000fe4:	fffffc0d 	.word	0xfffffc0d
 8000fe8:	000003ff 	.word	0x000003ff
 8000fec:	feffffff 	.word	0xfeffffff
 8000ff0:	000007fe 	.word	0x000007fe
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	2780      	movs	r7, #128	; 0x80
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	033f      	lsls	r7, r7, #12
 8000ffc:	2600      	movs	r6, #0
 8000ffe:	4b43      	ldr	r3, [pc, #268]	; (800110c <__aeabi_dmul+0x4d8>)
 8001000:	e683      	b.n	8000d0a <__aeabi_dmul+0xd6>
 8001002:	9b01      	ldr	r3, [sp, #4]
 8001004:	0032      	movs	r2, r6
 8001006:	46a4      	mov	ip, r4
 8001008:	4658      	mov	r0, fp
 800100a:	e670      	b.n	8000cee <__aeabi_dmul+0xba>
 800100c:	46ac      	mov	ip, r5
 800100e:	e66e      	b.n	8000cee <__aeabi_dmul+0xba>
 8001010:	2780      	movs	r7, #128	; 0x80
 8001012:	9901      	ldr	r1, [sp, #4]
 8001014:	033f      	lsls	r7, r7, #12
 8001016:	4239      	tst	r1, r7
 8001018:	d02d      	beq.n	8001076 <__aeabi_dmul+0x442>
 800101a:	423b      	tst	r3, r7
 800101c:	d12b      	bne.n	8001076 <__aeabi_dmul+0x442>
 800101e:	431f      	orrs	r7, r3
 8001020:	033f      	lsls	r7, r7, #12
 8001022:	0b3f      	lsrs	r7, r7, #12
 8001024:	9500      	str	r5, [sp, #0]
 8001026:	0016      	movs	r6, r2
 8001028:	4b38      	ldr	r3, [pc, #224]	; (800110c <__aeabi_dmul+0x4d8>)
 800102a:	e66e      	b.n	8000d0a <__aeabi_dmul+0xd6>
 800102c:	2501      	movs	r5, #1
 800102e:	1b2d      	subs	r5, r5, r4
 8001030:	2d38      	cmp	r5, #56	; 0x38
 8001032:	dd00      	ble.n	8001036 <__aeabi_dmul+0x402>
 8001034:	e666      	b.n	8000d04 <__aeabi_dmul+0xd0>
 8001036:	2d1f      	cmp	r5, #31
 8001038:	dc40      	bgt.n	80010bc <__aeabi_dmul+0x488>
 800103a:	4835      	ldr	r0, [pc, #212]	; (8001110 <__aeabi_dmul+0x4dc>)
 800103c:	001c      	movs	r4, r3
 800103e:	4450      	add	r0, sl
 8001040:	0016      	movs	r6, r2
 8001042:	4082      	lsls	r2, r0
 8001044:	4084      	lsls	r4, r0
 8001046:	40ee      	lsrs	r6, r5
 8001048:	1e50      	subs	r0, r2, #1
 800104a:	4182      	sbcs	r2, r0
 800104c:	4334      	orrs	r4, r6
 800104e:	4314      	orrs	r4, r2
 8001050:	40eb      	lsrs	r3, r5
 8001052:	0762      	lsls	r2, r4, #29
 8001054:	d009      	beq.n	800106a <__aeabi_dmul+0x436>
 8001056:	220f      	movs	r2, #15
 8001058:	4022      	ands	r2, r4
 800105a:	2a04      	cmp	r2, #4
 800105c:	d005      	beq.n	800106a <__aeabi_dmul+0x436>
 800105e:	0022      	movs	r2, r4
 8001060:	1d14      	adds	r4, r2, #4
 8001062:	4294      	cmp	r4, r2
 8001064:	4180      	sbcs	r0, r0
 8001066:	4240      	negs	r0, r0
 8001068:	181b      	adds	r3, r3, r0
 800106a:	021a      	lsls	r2, r3, #8
 800106c:	d53e      	bpl.n	80010ec <__aeabi_dmul+0x4b8>
 800106e:	2301      	movs	r3, #1
 8001070:	2700      	movs	r7, #0
 8001072:	2600      	movs	r6, #0
 8001074:	e649      	b.n	8000d0a <__aeabi_dmul+0xd6>
 8001076:	2780      	movs	r7, #128	; 0x80
 8001078:	9b01      	ldr	r3, [sp, #4]
 800107a:	033f      	lsls	r7, r7, #12
 800107c:	431f      	orrs	r7, r3
 800107e:	033f      	lsls	r7, r7, #12
 8001080:	0b3f      	lsrs	r7, r7, #12
 8001082:	9400      	str	r4, [sp, #0]
 8001084:	4b21      	ldr	r3, [pc, #132]	; (800110c <__aeabi_dmul+0x4d8>)
 8001086:	e640      	b.n	8000d0a <__aeabi_dmul+0xd6>
 8001088:	0003      	movs	r3, r0
 800108a:	465a      	mov	r2, fp
 800108c:	3b28      	subs	r3, #40	; 0x28
 800108e:	409a      	lsls	r2, r3
 8001090:	2600      	movs	r6, #0
 8001092:	9201      	str	r2, [sp, #4]
 8001094:	e66d      	b.n	8000d72 <__aeabi_dmul+0x13e>
 8001096:	4658      	mov	r0, fp
 8001098:	f000 fd0a 	bl	8001ab0 <__clzsi2>
 800109c:	3020      	adds	r0, #32
 800109e:	e657      	b.n	8000d50 <__aeabi_dmul+0x11c>
 80010a0:	0003      	movs	r3, r0
 80010a2:	4652      	mov	r2, sl
 80010a4:	3b28      	subs	r3, #40	; 0x28
 80010a6:	409a      	lsls	r2, r3
 80010a8:	0013      	movs	r3, r2
 80010aa:	2200      	movs	r2, #0
 80010ac:	e693      	b.n	8000dd6 <__aeabi_dmul+0x1a2>
 80010ae:	4650      	mov	r0, sl
 80010b0:	f000 fcfe 	bl	8001ab0 <__clzsi2>
 80010b4:	3020      	adds	r0, #32
 80010b6:	e67b      	b.n	8000db0 <__aeabi_dmul+0x17c>
 80010b8:	46ca      	mov	sl, r9
 80010ba:	e750      	b.n	8000f5e <__aeabi_dmul+0x32a>
 80010bc:	201f      	movs	r0, #31
 80010be:	001e      	movs	r6, r3
 80010c0:	4240      	negs	r0, r0
 80010c2:	1b04      	subs	r4, r0, r4
 80010c4:	40e6      	lsrs	r6, r4
 80010c6:	2d20      	cmp	r5, #32
 80010c8:	d003      	beq.n	80010d2 <__aeabi_dmul+0x49e>
 80010ca:	4c12      	ldr	r4, [pc, #72]	; (8001114 <__aeabi_dmul+0x4e0>)
 80010cc:	4454      	add	r4, sl
 80010ce:	40a3      	lsls	r3, r4
 80010d0:	431a      	orrs	r2, r3
 80010d2:	1e50      	subs	r0, r2, #1
 80010d4:	4182      	sbcs	r2, r0
 80010d6:	4332      	orrs	r2, r6
 80010d8:	2607      	movs	r6, #7
 80010da:	2700      	movs	r7, #0
 80010dc:	4016      	ands	r6, r2
 80010de:	d009      	beq.n	80010f4 <__aeabi_dmul+0x4c0>
 80010e0:	200f      	movs	r0, #15
 80010e2:	2300      	movs	r3, #0
 80010e4:	4010      	ands	r0, r2
 80010e6:	0014      	movs	r4, r2
 80010e8:	2804      	cmp	r0, #4
 80010ea:	d1b9      	bne.n	8001060 <__aeabi_dmul+0x42c>
 80010ec:	0022      	movs	r2, r4
 80010ee:	075e      	lsls	r6, r3, #29
 80010f0:	025b      	lsls	r3, r3, #9
 80010f2:	0b1f      	lsrs	r7, r3, #12
 80010f4:	08d2      	lsrs	r2, r2, #3
 80010f6:	4316      	orrs	r6, r2
 80010f8:	2300      	movs	r3, #0
 80010fa:	e606      	b.n	8000d0a <__aeabi_dmul+0xd6>
 80010fc:	2780      	movs	r7, #128	; 0x80
 80010fe:	033f      	lsls	r7, r7, #12
 8001100:	431f      	orrs	r7, r3
 8001102:	033f      	lsls	r7, r7, #12
 8001104:	0b3f      	lsrs	r7, r7, #12
 8001106:	0016      	movs	r6, r2
 8001108:	4b00      	ldr	r3, [pc, #0]	; (800110c <__aeabi_dmul+0x4d8>)
 800110a:	e5fe      	b.n	8000d0a <__aeabi_dmul+0xd6>
 800110c:	000007ff 	.word	0x000007ff
 8001110:	0000041e 	.word	0x0000041e
 8001114:	0000043e 	.word	0x0000043e

08001118 <__aeabi_dsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4657      	mov	r7, sl
 800111c:	464e      	mov	r6, r9
 800111e:	4645      	mov	r5, r8
 8001120:	46de      	mov	lr, fp
 8001122:	000c      	movs	r4, r1
 8001124:	0309      	lsls	r1, r1, #12
 8001126:	b5e0      	push	{r5, r6, r7, lr}
 8001128:	0a49      	lsrs	r1, r1, #9
 800112a:	0f46      	lsrs	r6, r0, #29
 800112c:	005f      	lsls	r7, r3, #1
 800112e:	4331      	orrs	r1, r6
 8001130:	031e      	lsls	r6, r3, #12
 8001132:	0fdb      	lsrs	r3, r3, #31
 8001134:	0a76      	lsrs	r6, r6, #9
 8001136:	469b      	mov	fp, r3
 8001138:	0f53      	lsrs	r3, r2, #29
 800113a:	4333      	orrs	r3, r6
 800113c:	4ec8      	ldr	r6, [pc, #800]	; (8001460 <__aeabi_dsub+0x348>)
 800113e:	0065      	lsls	r5, r4, #1
 8001140:	00c0      	lsls	r0, r0, #3
 8001142:	0fe4      	lsrs	r4, r4, #31
 8001144:	00d2      	lsls	r2, r2, #3
 8001146:	0d6d      	lsrs	r5, r5, #21
 8001148:	46a2      	mov	sl, r4
 800114a:	4681      	mov	r9, r0
 800114c:	0d7f      	lsrs	r7, r7, #21
 800114e:	469c      	mov	ip, r3
 8001150:	4690      	mov	r8, r2
 8001152:	42b7      	cmp	r7, r6
 8001154:	d100      	bne.n	8001158 <__aeabi_dsub+0x40>
 8001156:	e0b9      	b.n	80012cc <__aeabi_dsub+0x1b4>
 8001158:	465b      	mov	r3, fp
 800115a:	2601      	movs	r6, #1
 800115c:	4073      	eors	r3, r6
 800115e:	469b      	mov	fp, r3
 8001160:	1bee      	subs	r6, r5, r7
 8001162:	45a3      	cmp	fp, r4
 8001164:	d100      	bne.n	8001168 <__aeabi_dsub+0x50>
 8001166:	e083      	b.n	8001270 <__aeabi_dsub+0x158>
 8001168:	2e00      	cmp	r6, #0
 800116a:	dd63      	ble.n	8001234 <__aeabi_dsub+0x11c>
 800116c:	2f00      	cmp	r7, #0
 800116e:	d000      	beq.n	8001172 <__aeabi_dsub+0x5a>
 8001170:	e0b1      	b.n	80012d6 <__aeabi_dsub+0x1be>
 8001172:	4663      	mov	r3, ip
 8001174:	4313      	orrs	r3, r2
 8001176:	d100      	bne.n	800117a <__aeabi_dsub+0x62>
 8001178:	e123      	b.n	80013c2 <__aeabi_dsub+0x2aa>
 800117a:	1e73      	subs	r3, r6, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d000      	beq.n	8001182 <__aeabi_dsub+0x6a>
 8001180:	e1ba      	b.n	80014f8 <__aeabi_dsub+0x3e0>
 8001182:	1a86      	subs	r6, r0, r2
 8001184:	4663      	mov	r3, ip
 8001186:	42b0      	cmp	r0, r6
 8001188:	4180      	sbcs	r0, r0
 800118a:	2501      	movs	r5, #1
 800118c:	1ac9      	subs	r1, r1, r3
 800118e:	4240      	negs	r0, r0
 8001190:	1a09      	subs	r1, r1, r0
 8001192:	020b      	lsls	r3, r1, #8
 8001194:	d400      	bmi.n	8001198 <__aeabi_dsub+0x80>
 8001196:	e147      	b.n	8001428 <__aeabi_dsub+0x310>
 8001198:	0249      	lsls	r1, r1, #9
 800119a:	0a4b      	lsrs	r3, r1, #9
 800119c:	4698      	mov	r8, r3
 800119e:	4643      	mov	r3, r8
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d100      	bne.n	80011a6 <__aeabi_dsub+0x8e>
 80011a4:	e189      	b.n	80014ba <__aeabi_dsub+0x3a2>
 80011a6:	4640      	mov	r0, r8
 80011a8:	f000 fc82 	bl	8001ab0 <__clzsi2>
 80011ac:	0003      	movs	r3, r0
 80011ae:	3b08      	subs	r3, #8
 80011b0:	2b1f      	cmp	r3, #31
 80011b2:	dd00      	ble.n	80011b6 <__aeabi_dsub+0x9e>
 80011b4:	e17c      	b.n	80014b0 <__aeabi_dsub+0x398>
 80011b6:	2220      	movs	r2, #32
 80011b8:	0030      	movs	r0, r6
 80011ba:	1ad2      	subs	r2, r2, r3
 80011bc:	4641      	mov	r1, r8
 80011be:	40d0      	lsrs	r0, r2
 80011c0:	4099      	lsls	r1, r3
 80011c2:	0002      	movs	r2, r0
 80011c4:	409e      	lsls	r6, r3
 80011c6:	430a      	orrs	r2, r1
 80011c8:	429d      	cmp	r5, r3
 80011ca:	dd00      	ble.n	80011ce <__aeabi_dsub+0xb6>
 80011cc:	e16a      	b.n	80014a4 <__aeabi_dsub+0x38c>
 80011ce:	1b5d      	subs	r5, r3, r5
 80011d0:	1c6b      	adds	r3, r5, #1
 80011d2:	2b1f      	cmp	r3, #31
 80011d4:	dd00      	ble.n	80011d8 <__aeabi_dsub+0xc0>
 80011d6:	e194      	b.n	8001502 <__aeabi_dsub+0x3ea>
 80011d8:	2120      	movs	r1, #32
 80011da:	0010      	movs	r0, r2
 80011dc:	0035      	movs	r5, r6
 80011de:	1ac9      	subs	r1, r1, r3
 80011e0:	408e      	lsls	r6, r1
 80011e2:	40da      	lsrs	r2, r3
 80011e4:	4088      	lsls	r0, r1
 80011e6:	40dd      	lsrs	r5, r3
 80011e8:	1e71      	subs	r1, r6, #1
 80011ea:	418e      	sbcs	r6, r1
 80011ec:	0011      	movs	r1, r2
 80011ee:	2207      	movs	r2, #7
 80011f0:	4328      	orrs	r0, r5
 80011f2:	2500      	movs	r5, #0
 80011f4:	4306      	orrs	r6, r0
 80011f6:	4032      	ands	r2, r6
 80011f8:	2a00      	cmp	r2, #0
 80011fa:	d009      	beq.n	8001210 <__aeabi_dsub+0xf8>
 80011fc:	230f      	movs	r3, #15
 80011fe:	4033      	ands	r3, r6
 8001200:	2b04      	cmp	r3, #4
 8001202:	d005      	beq.n	8001210 <__aeabi_dsub+0xf8>
 8001204:	1d33      	adds	r3, r6, #4
 8001206:	42b3      	cmp	r3, r6
 8001208:	41b6      	sbcs	r6, r6
 800120a:	4276      	negs	r6, r6
 800120c:	1989      	adds	r1, r1, r6
 800120e:	001e      	movs	r6, r3
 8001210:	020b      	lsls	r3, r1, #8
 8001212:	d400      	bmi.n	8001216 <__aeabi_dsub+0xfe>
 8001214:	e23d      	b.n	8001692 <__aeabi_dsub+0x57a>
 8001216:	1c6a      	adds	r2, r5, #1
 8001218:	4b91      	ldr	r3, [pc, #580]	; (8001460 <__aeabi_dsub+0x348>)
 800121a:	0555      	lsls	r5, r2, #21
 800121c:	0d6d      	lsrs	r5, r5, #21
 800121e:	429a      	cmp	r2, r3
 8001220:	d100      	bne.n	8001224 <__aeabi_dsub+0x10c>
 8001222:	e119      	b.n	8001458 <__aeabi_dsub+0x340>
 8001224:	4a8f      	ldr	r2, [pc, #572]	; (8001464 <__aeabi_dsub+0x34c>)
 8001226:	08f6      	lsrs	r6, r6, #3
 8001228:	400a      	ands	r2, r1
 800122a:	0757      	lsls	r7, r2, #29
 800122c:	0252      	lsls	r2, r2, #9
 800122e:	4337      	orrs	r7, r6
 8001230:	0b12      	lsrs	r2, r2, #12
 8001232:	e09b      	b.n	800136c <__aeabi_dsub+0x254>
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dsub+0x122>
 8001238:	e0c5      	b.n	80013c6 <__aeabi_dsub+0x2ae>
 800123a:	1c6e      	adds	r6, r5, #1
 800123c:	0576      	lsls	r6, r6, #21
 800123e:	0d76      	lsrs	r6, r6, #21
 8001240:	2e01      	cmp	r6, #1
 8001242:	dc00      	bgt.n	8001246 <__aeabi_dsub+0x12e>
 8001244:	e148      	b.n	80014d8 <__aeabi_dsub+0x3c0>
 8001246:	4667      	mov	r7, ip
 8001248:	1a86      	subs	r6, r0, r2
 800124a:	1bcb      	subs	r3, r1, r7
 800124c:	42b0      	cmp	r0, r6
 800124e:	41bf      	sbcs	r7, r7
 8001250:	427f      	negs	r7, r7
 8001252:	46b8      	mov	r8, r7
 8001254:	001f      	movs	r7, r3
 8001256:	4643      	mov	r3, r8
 8001258:	1aff      	subs	r7, r7, r3
 800125a:	003b      	movs	r3, r7
 800125c:	46b8      	mov	r8, r7
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	d500      	bpl.n	8001264 <__aeabi_dsub+0x14c>
 8001262:	e15f      	b.n	8001524 <__aeabi_dsub+0x40c>
 8001264:	4337      	orrs	r7, r6
 8001266:	d19a      	bne.n	800119e <__aeabi_dsub+0x86>
 8001268:	2200      	movs	r2, #0
 800126a:	2400      	movs	r4, #0
 800126c:	2500      	movs	r5, #0
 800126e:	e079      	b.n	8001364 <__aeabi_dsub+0x24c>
 8001270:	2e00      	cmp	r6, #0
 8001272:	dc00      	bgt.n	8001276 <__aeabi_dsub+0x15e>
 8001274:	e0fa      	b.n	800146c <__aeabi_dsub+0x354>
 8001276:	2f00      	cmp	r7, #0
 8001278:	d100      	bne.n	800127c <__aeabi_dsub+0x164>
 800127a:	e08d      	b.n	8001398 <__aeabi_dsub+0x280>
 800127c:	4b78      	ldr	r3, [pc, #480]	; (8001460 <__aeabi_dsub+0x348>)
 800127e:	429d      	cmp	r5, r3
 8001280:	d067      	beq.n	8001352 <__aeabi_dsub+0x23a>
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	4667      	mov	r7, ip
 8001286:	041b      	lsls	r3, r3, #16
 8001288:	431f      	orrs	r7, r3
 800128a:	46bc      	mov	ip, r7
 800128c:	2e38      	cmp	r6, #56	; 0x38
 800128e:	dc00      	bgt.n	8001292 <__aeabi_dsub+0x17a>
 8001290:	e152      	b.n	8001538 <__aeabi_dsub+0x420>
 8001292:	4663      	mov	r3, ip
 8001294:	4313      	orrs	r3, r2
 8001296:	1e5a      	subs	r2, r3, #1
 8001298:	4193      	sbcs	r3, r2
 800129a:	181e      	adds	r6, r3, r0
 800129c:	4286      	cmp	r6, r0
 800129e:	4180      	sbcs	r0, r0
 80012a0:	4240      	negs	r0, r0
 80012a2:	1809      	adds	r1, r1, r0
 80012a4:	020b      	lsls	r3, r1, #8
 80012a6:	d400      	bmi.n	80012aa <__aeabi_dsub+0x192>
 80012a8:	e0be      	b.n	8001428 <__aeabi_dsub+0x310>
 80012aa:	4b6d      	ldr	r3, [pc, #436]	; (8001460 <__aeabi_dsub+0x348>)
 80012ac:	3501      	adds	r5, #1
 80012ae:	429d      	cmp	r5, r3
 80012b0:	d100      	bne.n	80012b4 <__aeabi_dsub+0x19c>
 80012b2:	e0d2      	b.n	800145a <__aeabi_dsub+0x342>
 80012b4:	4a6b      	ldr	r2, [pc, #428]	; (8001464 <__aeabi_dsub+0x34c>)
 80012b6:	0873      	lsrs	r3, r6, #1
 80012b8:	400a      	ands	r2, r1
 80012ba:	2101      	movs	r1, #1
 80012bc:	400e      	ands	r6, r1
 80012be:	431e      	orrs	r6, r3
 80012c0:	0851      	lsrs	r1, r2, #1
 80012c2:	07d3      	lsls	r3, r2, #31
 80012c4:	2207      	movs	r2, #7
 80012c6:	431e      	orrs	r6, r3
 80012c8:	4032      	ands	r2, r6
 80012ca:	e795      	b.n	80011f8 <__aeabi_dsub+0xe0>
 80012cc:	001e      	movs	r6, r3
 80012ce:	4316      	orrs	r6, r2
 80012d0:	d000      	beq.n	80012d4 <__aeabi_dsub+0x1bc>
 80012d2:	e745      	b.n	8001160 <__aeabi_dsub+0x48>
 80012d4:	e740      	b.n	8001158 <__aeabi_dsub+0x40>
 80012d6:	4b62      	ldr	r3, [pc, #392]	; (8001460 <__aeabi_dsub+0x348>)
 80012d8:	429d      	cmp	r5, r3
 80012da:	d03a      	beq.n	8001352 <__aeabi_dsub+0x23a>
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	4667      	mov	r7, ip
 80012e0:	041b      	lsls	r3, r3, #16
 80012e2:	431f      	orrs	r7, r3
 80012e4:	46bc      	mov	ip, r7
 80012e6:	2e38      	cmp	r6, #56	; 0x38
 80012e8:	dd00      	ble.n	80012ec <__aeabi_dsub+0x1d4>
 80012ea:	e0eb      	b.n	80014c4 <__aeabi_dsub+0x3ac>
 80012ec:	2e1f      	cmp	r6, #31
 80012ee:	dc00      	bgt.n	80012f2 <__aeabi_dsub+0x1da>
 80012f0:	e13a      	b.n	8001568 <__aeabi_dsub+0x450>
 80012f2:	0033      	movs	r3, r6
 80012f4:	4667      	mov	r7, ip
 80012f6:	3b20      	subs	r3, #32
 80012f8:	40df      	lsrs	r7, r3
 80012fa:	003b      	movs	r3, r7
 80012fc:	2e20      	cmp	r6, #32
 80012fe:	d005      	beq.n	800130c <__aeabi_dsub+0x1f4>
 8001300:	2740      	movs	r7, #64	; 0x40
 8001302:	1bbf      	subs	r7, r7, r6
 8001304:	4666      	mov	r6, ip
 8001306:	40be      	lsls	r6, r7
 8001308:	4332      	orrs	r2, r6
 800130a:	4690      	mov	r8, r2
 800130c:	4646      	mov	r6, r8
 800130e:	1e72      	subs	r2, r6, #1
 8001310:	4196      	sbcs	r6, r2
 8001312:	4333      	orrs	r3, r6
 8001314:	e0da      	b.n	80014cc <__aeabi_dsub+0x3b4>
 8001316:	2b00      	cmp	r3, #0
 8001318:	d100      	bne.n	800131c <__aeabi_dsub+0x204>
 800131a:	e214      	b.n	8001746 <__aeabi_dsub+0x62e>
 800131c:	4663      	mov	r3, ip
 800131e:	4313      	orrs	r3, r2
 8001320:	d100      	bne.n	8001324 <__aeabi_dsub+0x20c>
 8001322:	e168      	b.n	80015f6 <__aeabi_dsub+0x4de>
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	074e      	lsls	r6, r1, #29
 8001328:	08c0      	lsrs	r0, r0, #3
 800132a:	08c9      	lsrs	r1, r1, #3
 800132c:	031b      	lsls	r3, r3, #12
 800132e:	4306      	orrs	r6, r0
 8001330:	4219      	tst	r1, r3
 8001332:	d008      	beq.n	8001346 <__aeabi_dsub+0x22e>
 8001334:	4660      	mov	r0, ip
 8001336:	08c0      	lsrs	r0, r0, #3
 8001338:	4218      	tst	r0, r3
 800133a:	d104      	bne.n	8001346 <__aeabi_dsub+0x22e>
 800133c:	4663      	mov	r3, ip
 800133e:	0001      	movs	r1, r0
 8001340:	08d2      	lsrs	r2, r2, #3
 8001342:	075e      	lsls	r6, r3, #29
 8001344:	4316      	orrs	r6, r2
 8001346:	00f3      	lsls	r3, r6, #3
 8001348:	4699      	mov	r9, r3
 800134a:	00c9      	lsls	r1, r1, #3
 800134c:	0f72      	lsrs	r2, r6, #29
 800134e:	4d44      	ldr	r5, [pc, #272]	; (8001460 <__aeabi_dsub+0x348>)
 8001350:	4311      	orrs	r1, r2
 8001352:	464b      	mov	r3, r9
 8001354:	08de      	lsrs	r6, r3, #3
 8001356:	4b42      	ldr	r3, [pc, #264]	; (8001460 <__aeabi_dsub+0x348>)
 8001358:	074f      	lsls	r7, r1, #29
 800135a:	4337      	orrs	r7, r6
 800135c:	08ca      	lsrs	r2, r1, #3
 800135e:	429d      	cmp	r5, r3
 8001360:	d100      	bne.n	8001364 <__aeabi_dsub+0x24c>
 8001362:	e06e      	b.n	8001442 <__aeabi_dsub+0x32a>
 8001364:	0312      	lsls	r2, r2, #12
 8001366:	056d      	lsls	r5, r5, #21
 8001368:	0b12      	lsrs	r2, r2, #12
 800136a:	0d6d      	lsrs	r5, r5, #21
 800136c:	2100      	movs	r1, #0
 800136e:	0312      	lsls	r2, r2, #12
 8001370:	0b13      	lsrs	r3, r2, #12
 8001372:	0d0a      	lsrs	r2, r1, #20
 8001374:	0512      	lsls	r2, r2, #20
 8001376:	431a      	orrs	r2, r3
 8001378:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <__aeabi_dsub+0x350>)
 800137a:	052d      	lsls	r5, r5, #20
 800137c:	4013      	ands	r3, r2
 800137e:	432b      	orrs	r3, r5
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	07e4      	lsls	r4, r4, #31
 8001384:	085b      	lsrs	r3, r3, #1
 8001386:	4323      	orrs	r3, r4
 8001388:	0038      	movs	r0, r7
 800138a:	0019      	movs	r1, r3
 800138c:	bc3c      	pop	{r2, r3, r4, r5}
 800138e:	4690      	mov	r8, r2
 8001390:	4699      	mov	r9, r3
 8001392:	46a2      	mov	sl, r4
 8001394:	46ab      	mov	fp, r5
 8001396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001398:	4663      	mov	r3, ip
 800139a:	4313      	orrs	r3, r2
 800139c:	d011      	beq.n	80013c2 <__aeabi_dsub+0x2aa>
 800139e:	1e73      	subs	r3, r6, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d000      	beq.n	80013a6 <__aeabi_dsub+0x28e>
 80013a4:	e107      	b.n	80015b6 <__aeabi_dsub+0x49e>
 80013a6:	1886      	adds	r6, r0, r2
 80013a8:	4286      	cmp	r6, r0
 80013aa:	4180      	sbcs	r0, r0
 80013ac:	4461      	add	r1, ip
 80013ae:	4240      	negs	r0, r0
 80013b0:	1809      	adds	r1, r1, r0
 80013b2:	2501      	movs	r5, #1
 80013b4:	020b      	lsls	r3, r1, #8
 80013b6:	d537      	bpl.n	8001428 <__aeabi_dsub+0x310>
 80013b8:	2502      	movs	r5, #2
 80013ba:	e77b      	b.n	80012b4 <__aeabi_dsub+0x19c>
 80013bc:	003e      	movs	r6, r7
 80013be:	4661      	mov	r1, ip
 80013c0:	4691      	mov	r9, r2
 80013c2:	0035      	movs	r5, r6
 80013c4:	e7c5      	b.n	8001352 <__aeabi_dsub+0x23a>
 80013c6:	465c      	mov	r4, fp
 80013c8:	2d00      	cmp	r5, #0
 80013ca:	d000      	beq.n	80013ce <__aeabi_dsub+0x2b6>
 80013cc:	e0e1      	b.n	8001592 <__aeabi_dsub+0x47a>
 80013ce:	000b      	movs	r3, r1
 80013d0:	4303      	orrs	r3, r0
 80013d2:	d0f3      	beq.n	80013bc <__aeabi_dsub+0x2a4>
 80013d4:	1c73      	adds	r3, r6, #1
 80013d6:	d100      	bne.n	80013da <__aeabi_dsub+0x2c2>
 80013d8:	e1ac      	b.n	8001734 <__aeabi_dsub+0x61c>
 80013da:	4b21      	ldr	r3, [pc, #132]	; (8001460 <__aeabi_dsub+0x348>)
 80013dc:	429f      	cmp	r7, r3
 80013de:	d100      	bne.n	80013e2 <__aeabi_dsub+0x2ca>
 80013e0:	e13a      	b.n	8001658 <__aeabi_dsub+0x540>
 80013e2:	43f3      	mvns	r3, r6
 80013e4:	2b38      	cmp	r3, #56	; 0x38
 80013e6:	dd00      	ble.n	80013ea <__aeabi_dsub+0x2d2>
 80013e8:	e16f      	b.n	80016ca <__aeabi_dsub+0x5b2>
 80013ea:	2b1f      	cmp	r3, #31
 80013ec:	dd00      	ble.n	80013f0 <__aeabi_dsub+0x2d8>
 80013ee:	e18c      	b.n	800170a <__aeabi_dsub+0x5f2>
 80013f0:	2520      	movs	r5, #32
 80013f2:	000e      	movs	r6, r1
 80013f4:	1aed      	subs	r5, r5, r3
 80013f6:	40ae      	lsls	r6, r5
 80013f8:	46b0      	mov	r8, r6
 80013fa:	0006      	movs	r6, r0
 80013fc:	46aa      	mov	sl, r5
 80013fe:	40de      	lsrs	r6, r3
 8001400:	4645      	mov	r5, r8
 8001402:	4335      	orrs	r5, r6
 8001404:	002e      	movs	r6, r5
 8001406:	4655      	mov	r5, sl
 8001408:	40d9      	lsrs	r1, r3
 800140a:	40a8      	lsls	r0, r5
 800140c:	4663      	mov	r3, ip
 800140e:	1e45      	subs	r5, r0, #1
 8001410:	41a8      	sbcs	r0, r5
 8001412:	1a5b      	subs	r3, r3, r1
 8001414:	469c      	mov	ip, r3
 8001416:	4330      	orrs	r0, r6
 8001418:	1a16      	subs	r6, r2, r0
 800141a:	42b2      	cmp	r2, r6
 800141c:	4192      	sbcs	r2, r2
 800141e:	4663      	mov	r3, ip
 8001420:	4252      	negs	r2, r2
 8001422:	1a99      	subs	r1, r3, r2
 8001424:	003d      	movs	r5, r7
 8001426:	e6b4      	b.n	8001192 <__aeabi_dsub+0x7a>
 8001428:	2207      	movs	r2, #7
 800142a:	4032      	ands	r2, r6
 800142c:	2a00      	cmp	r2, #0
 800142e:	d000      	beq.n	8001432 <__aeabi_dsub+0x31a>
 8001430:	e6e4      	b.n	80011fc <__aeabi_dsub+0xe4>
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <__aeabi_dsub+0x348>)
 8001434:	08f6      	lsrs	r6, r6, #3
 8001436:	074f      	lsls	r7, r1, #29
 8001438:	4337      	orrs	r7, r6
 800143a:	08ca      	lsrs	r2, r1, #3
 800143c:	429d      	cmp	r5, r3
 800143e:	d000      	beq.n	8001442 <__aeabi_dsub+0x32a>
 8001440:	e790      	b.n	8001364 <__aeabi_dsub+0x24c>
 8001442:	003b      	movs	r3, r7
 8001444:	4313      	orrs	r3, r2
 8001446:	d100      	bne.n	800144a <__aeabi_dsub+0x332>
 8001448:	e1a6      	b.n	8001798 <__aeabi_dsub+0x680>
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	031b      	lsls	r3, r3, #12
 800144e:	431a      	orrs	r2, r3
 8001450:	0312      	lsls	r2, r2, #12
 8001452:	0b12      	lsrs	r2, r2, #12
 8001454:	4d02      	ldr	r5, [pc, #8]	; (8001460 <__aeabi_dsub+0x348>)
 8001456:	e789      	b.n	800136c <__aeabi_dsub+0x254>
 8001458:	0015      	movs	r5, r2
 800145a:	2200      	movs	r2, #0
 800145c:	2700      	movs	r7, #0
 800145e:	e785      	b.n	800136c <__aeabi_dsub+0x254>
 8001460:	000007ff 	.word	0x000007ff
 8001464:	ff7fffff 	.word	0xff7fffff
 8001468:	800fffff 	.word	0x800fffff
 800146c:	2e00      	cmp	r6, #0
 800146e:	d000      	beq.n	8001472 <__aeabi_dsub+0x35a>
 8001470:	e0c7      	b.n	8001602 <__aeabi_dsub+0x4ea>
 8001472:	1c6b      	adds	r3, r5, #1
 8001474:	055e      	lsls	r6, r3, #21
 8001476:	0d76      	lsrs	r6, r6, #21
 8001478:	2e01      	cmp	r6, #1
 800147a:	dc00      	bgt.n	800147e <__aeabi_dsub+0x366>
 800147c:	e0f0      	b.n	8001660 <__aeabi_dsub+0x548>
 800147e:	4dc8      	ldr	r5, [pc, #800]	; (80017a0 <__aeabi_dsub+0x688>)
 8001480:	42ab      	cmp	r3, r5
 8001482:	d100      	bne.n	8001486 <__aeabi_dsub+0x36e>
 8001484:	e0b9      	b.n	80015fa <__aeabi_dsub+0x4e2>
 8001486:	1885      	adds	r5, r0, r2
 8001488:	000a      	movs	r2, r1
 800148a:	4285      	cmp	r5, r0
 800148c:	4189      	sbcs	r1, r1
 800148e:	4462      	add	r2, ip
 8001490:	4249      	negs	r1, r1
 8001492:	1851      	adds	r1, r2, r1
 8001494:	2207      	movs	r2, #7
 8001496:	07ce      	lsls	r6, r1, #31
 8001498:	086d      	lsrs	r5, r5, #1
 800149a:	432e      	orrs	r6, r5
 800149c:	0849      	lsrs	r1, r1, #1
 800149e:	4032      	ands	r2, r6
 80014a0:	001d      	movs	r5, r3
 80014a2:	e6a9      	b.n	80011f8 <__aeabi_dsub+0xe0>
 80014a4:	49bf      	ldr	r1, [pc, #764]	; (80017a4 <__aeabi_dsub+0x68c>)
 80014a6:	1aed      	subs	r5, r5, r3
 80014a8:	4011      	ands	r1, r2
 80014aa:	2207      	movs	r2, #7
 80014ac:	4032      	ands	r2, r6
 80014ae:	e6a3      	b.n	80011f8 <__aeabi_dsub+0xe0>
 80014b0:	0032      	movs	r2, r6
 80014b2:	3828      	subs	r0, #40	; 0x28
 80014b4:	4082      	lsls	r2, r0
 80014b6:	2600      	movs	r6, #0
 80014b8:	e686      	b.n	80011c8 <__aeabi_dsub+0xb0>
 80014ba:	0030      	movs	r0, r6
 80014bc:	f000 faf8 	bl	8001ab0 <__clzsi2>
 80014c0:	3020      	adds	r0, #32
 80014c2:	e673      	b.n	80011ac <__aeabi_dsub+0x94>
 80014c4:	4663      	mov	r3, ip
 80014c6:	4313      	orrs	r3, r2
 80014c8:	1e5a      	subs	r2, r3, #1
 80014ca:	4193      	sbcs	r3, r2
 80014cc:	1ac6      	subs	r6, r0, r3
 80014ce:	42b0      	cmp	r0, r6
 80014d0:	4180      	sbcs	r0, r0
 80014d2:	4240      	negs	r0, r0
 80014d4:	1a09      	subs	r1, r1, r0
 80014d6:	e65c      	b.n	8001192 <__aeabi_dsub+0x7a>
 80014d8:	000e      	movs	r6, r1
 80014da:	4667      	mov	r7, ip
 80014dc:	4306      	orrs	r6, r0
 80014de:	4317      	orrs	r7, r2
 80014e0:	2d00      	cmp	r5, #0
 80014e2:	d15e      	bne.n	80015a2 <__aeabi_dsub+0x48a>
 80014e4:	2e00      	cmp	r6, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dsub+0x3d2>
 80014e8:	e0f3      	b.n	80016d2 <__aeabi_dsub+0x5ba>
 80014ea:	2f00      	cmp	r7, #0
 80014ec:	d100      	bne.n	80014f0 <__aeabi_dsub+0x3d8>
 80014ee:	e11e      	b.n	800172e <__aeabi_dsub+0x616>
 80014f0:	465c      	mov	r4, fp
 80014f2:	4661      	mov	r1, ip
 80014f4:	4691      	mov	r9, r2
 80014f6:	e72c      	b.n	8001352 <__aeabi_dsub+0x23a>
 80014f8:	4fa9      	ldr	r7, [pc, #676]	; (80017a0 <__aeabi_dsub+0x688>)
 80014fa:	42be      	cmp	r6, r7
 80014fc:	d07b      	beq.n	80015f6 <__aeabi_dsub+0x4de>
 80014fe:	001e      	movs	r6, r3
 8001500:	e6f1      	b.n	80012e6 <__aeabi_dsub+0x1ce>
 8001502:	0010      	movs	r0, r2
 8001504:	3d1f      	subs	r5, #31
 8001506:	40e8      	lsrs	r0, r5
 8001508:	2b20      	cmp	r3, #32
 800150a:	d003      	beq.n	8001514 <__aeabi_dsub+0x3fc>
 800150c:	2140      	movs	r1, #64	; 0x40
 800150e:	1acb      	subs	r3, r1, r3
 8001510:	409a      	lsls	r2, r3
 8001512:	4316      	orrs	r6, r2
 8001514:	1e73      	subs	r3, r6, #1
 8001516:	419e      	sbcs	r6, r3
 8001518:	2207      	movs	r2, #7
 800151a:	4306      	orrs	r6, r0
 800151c:	4032      	ands	r2, r6
 800151e:	2100      	movs	r1, #0
 8001520:	2500      	movs	r5, #0
 8001522:	e783      	b.n	800142c <__aeabi_dsub+0x314>
 8001524:	1a16      	subs	r6, r2, r0
 8001526:	4663      	mov	r3, ip
 8001528:	42b2      	cmp	r2, r6
 800152a:	4180      	sbcs	r0, r0
 800152c:	1a59      	subs	r1, r3, r1
 800152e:	4240      	negs	r0, r0
 8001530:	1a0b      	subs	r3, r1, r0
 8001532:	4698      	mov	r8, r3
 8001534:	465c      	mov	r4, fp
 8001536:	e632      	b.n	800119e <__aeabi_dsub+0x86>
 8001538:	2e1f      	cmp	r6, #31
 800153a:	dd00      	ble.n	800153e <__aeabi_dsub+0x426>
 800153c:	e0ab      	b.n	8001696 <__aeabi_dsub+0x57e>
 800153e:	2720      	movs	r7, #32
 8001540:	1bbb      	subs	r3, r7, r6
 8001542:	469a      	mov	sl, r3
 8001544:	4663      	mov	r3, ip
 8001546:	4657      	mov	r7, sl
 8001548:	40bb      	lsls	r3, r7
 800154a:	4699      	mov	r9, r3
 800154c:	0013      	movs	r3, r2
 800154e:	464f      	mov	r7, r9
 8001550:	40f3      	lsrs	r3, r6
 8001552:	431f      	orrs	r7, r3
 8001554:	003b      	movs	r3, r7
 8001556:	4657      	mov	r7, sl
 8001558:	40ba      	lsls	r2, r7
 800155a:	1e57      	subs	r7, r2, #1
 800155c:	41ba      	sbcs	r2, r7
 800155e:	4313      	orrs	r3, r2
 8001560:	4662      	mov	r2, ip
 8001562:	40f2      	lsrs	r2, r6
 8001564:	1889      	adds	r1, r1, r2
 8001566:	e698      	b.n	800129a <__aeabi_dsub+0x182>
 8001568:	2720      	movs	r7, #32
 800156a:	1bbb      	subs	r3, r7, r6
 800156c:	469a      	mov	sl, r3
 800156e:	4663      	mov	r3, ip
 8001570:	4657      	mov	r7, sl
 8001572:	40bb      	lsls	r3, r7
 8001574:	4699      	mov	r9, r3
 8001576:	0013      	movs	r3, r2
 8001578:	464f      	mov	r7, r9
 800157a:	40f3      	lsrs	r3, r6
 800157c:	431f      	orrs	r7, r3
 800157e:	003b      	movs	r3, r7
 8001580:	4657      	mov	r7, sl
 8001582:	40ba      	lsls	r2, r7
 8001584:	1e57      	subs	r7, r2, #1
 8001586:	41ba      	sbcs	r2, r7
 8001588:	4313      	orrs	r3, r2
 800158a:	4662      	mov	r2, ip
 800158c:	40f2      	lsrs	r2, r6
 800158e:	1a89      	subs	r1, r1, r2
 8001590:	e79c      	b.n	80014cc <__aeabi_dsub+0x3b4>
 8001592:	4b83      	ldr	r3, [pc, #524]	; (80017a0 <__aeabi_dsub+0x688>)
 8001594:	429f      	cmp	r7, r3
 8001596:	d05f      	beq.n	8001658 <__aeabi_dsub+0x540>
 8001598:	2580      	movs	r5, #128	; 0x80
 800159a:	042d      	lsls	r5, r5, #16
 800159c:	4273      	negs	r3, r6
 800159e:	4329      	orrs	r1, r5
 80015a0:	e720      	b.n	80013e4 <__aeabi_dsub+0x2cc>
 80015a2:	2e00      	cmp	r6, #0
 80015a4:	d10c      	bne.n	80015c0 <__aeabi_dsub+0x4a8>
 80015a6:	2f00      	cmp	r7, #0
 80015a8:	d100      	bne.n	80015ac <__aeabi_dsub+0x494>
 80015aa:	e0d0      	b.n	800174e <__aeabi_dsub+0x636>
 80015ac:	465c      	mov	r4, fp
 80015ae:	4661      	mov	r1, ip
 80015b0:	4691      	mov	r9, r2
 80015b2:	4d7b      	ldr	r5, [pc, #492]	; (80017a0 <__aeabi_dsub+0x688>)
 80015b4:	e6cd      	b.n	8001352 <__aeabi_dsub+0x23a>
 80015b6:	4f7a      	ldr	r7, [pc, #488]	; (80017a0 <__aeabi_dsub+0x688>)
 80015b8:	42be      	cmp	r6, r7
 80015ba:	d01c      	beq.n	80015f6 <__aeabi_dsub+0x4de>
 80015bc:	001e      	movs	r6, r3
 80015be:	e665      	b.n	800128c <__aeabi_dsub+0x174>
 80015c0:	2f00      	cmp	r7, #0
 80015c2:	d018      	beq.n	80015f6 <__aeabi_dsub+0x4de>
 80015c4:	08c0      	lsrs	r0, r0, #3
 80015c6:	074e      	lsls	r6, r1, #29
 80015c8:	4306      	orrs	r6, r0
 80015ca:	2080      	movs	r0, #128	; 0x80
 80015cc:	08c9      	lsrs	r1, r1, #3
 80015ce:	0300      	lsls	r0, r0, #12
 80015d0:	4201      	tst	r1, r0
 80015d2:	d008      	beq.n	80015e6 <__aeabi_dsub+0x4ce>
 80015d4:	4663      	mov	r3, ip
 80015d6:	08dc      	lsrs	r4, r3, #3
 80015d8:	4204      	tst	r4, r0
 80015da:	d104      	bne.n	80015e6 <__aeabi_dsub+0x4ce>
 80015dc:	0021      	movs	r1, r4
 80015de:	46da      	mov	sl, fp
 80015e0:	08d2      	lsrs	r2, r2, #3
 80015e2:	075e      	lsls	r6, r3, #29
 80015e4:	4316      	orrs	r6, r2
 80015e6:	00f3      	lsls	r3, r6, #3
 80015e8:	4699      	mov	r9, r3
 80015ea:	2401      	movs	r4, #1
 80015ec:	4653      	mov	r3, sl
 80015ee:	00c9      	lsls	r1, r1, #3
 80015f0:	0f72      	lsrs	r2, r6, #29
 80015f2:	4311      	orrs	r1, r2
 80015f4:	401c      	ands	r4, r3
 80015f6:	4d6a      	ldr	r5, [pc, #424]	; (80017a0 <__aeabi_dsub+0x688>)
 80015f8:	e6ab      	b.n	8001352 <__aeabi_dsub+0x23a>
 80015fa:	001d      	movs	r5, r3
 80015fc:	2200      	movs	r2, #0
 80015fe:	2700      	movs	r7, #0
 8001600:	e6b4      	b.n	800136c <__aeabi_dsub+0x254>
 8001602:	2d00      	cmp	r5, #0
 8001604:	d159      	bne.n	80016ba <__aeabi_dsub+0x5a2>
 8001606:	000b      	movs	r3, r1
 8001608:	4303      	orrs	r3, r0
 800160a:	d100      	bne.n	800160e <__aeabi_dsub+0x4f6>
 800160c:	e6d6      	b.n	80013bc <__aeabi_dsub+0x2a4>
 800160e:	1c73      	adds	r3, r6, #1
 8001610:	d100      	bne.n	8001614 <__aeabi_dsub+0x4fc>
 8001612:	e0b2      	b.n	800177a <__aeabi_dsub+0x662>
 8001614:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <__aeabi_dsub+0x688>)
 8001616:	429f      	cmp	r7, r3
 8001618:	d01e      	beq.n	8001658 <__aeabi_dsub+0x540>
 800161a:	43f3      	mvns	r3, r6
 800161c:	2b38      	cmp	r3, #56	; 0x38
 800161e:	dc6f      	bgt.n	8001700 <__aeabi_dsub+0x5e8>
 8001620:	2b1f      	cmp	r3, #31
 8001622:	dd00      	ble.n	8001626 <__aeabi_dsub+0x50e>
 8001624:	e097      	b.n	8001756 <__aeabi_dsub+0x63e>
 8001626:	2520      	movs	r5, #32
 8001628:	000e      	movs	r6, r1
 800162a:	1aed      	subs	r5, r5, r3
 800162c:	40ae      	lsls	r6, r5
 800162e:	46b0      	mov	r8, r6
 8001630:	0006      	movs	r6, r0
 8001632:	46aa      	mov	sl, r5
 8001634:	40de      	lsrs	r6, r3
 8001636:	4645      	mov	r5, r8
 8001638:	4335      	orrs	r5, r6
 800163a:	002e      	movs	r6, r5
 800163c:	4655      	mov	r5, sl
 800163e:	40a8      	lsls	r0, r5
 8001640:	40d9      	lsrs	r1, r3
 8001642:	1e45      	subs	r5, r0, #1
 8001644:	41a8      	sbcs	r0, r5
 8001646:	448c      	add	ip, r1
 8001648:	4306      	orrs	r6, r0
 800164a:	18b6      	adds	r6, r6, r2
 800164c:	4296      	cmp	r6, r2
 800164e:	4192      	sbcs	r2, r2
 8001650:	4251      	negs	r1, r2
 8001652:	4461      	add	r1, ip
 8001654:	003d      	movs	r5, r7
 8001656:	e625      	b.n	80012a4 <__aeabi_dsub+0x18c>
 8001658:	003d      	movs	r5, r7
 800165a:	4661      	mov	r1, ip
 800165c:	4691      	mov	r9, r2
 800165e:	e678      	b.n	8001352 <__aeabi_dsub+0x23a>
 8001660:	000b      	movs	r3, r1
 8001662:	4303      	orrs	r3, r0
 8001664:	2d00      	cmp	r5, #0
 8001666:	d000      	beq.n	800166a <__aeabi_dsub+0x552>
 8001668:	e655      	b.n	8001316 <__aeabi_dsub+0x1fe>
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f5      	beq.n	800165a <__aeabi_dsub+0x542>
 800166e:	4663      	mov	r3, ip
 8001670:	4313      	orrs	r3, r2
 8001672:	d100      	bne.n	8001676 <__aeabi_dsub+0x55e>
 8001674:	e66d      	b.n	8001352 <__aeabi_dsub+0x23a>
 8001676:	1886      	adds	r6, r0, r2
 8001678:	4286      	cmp	r6, r0
 800167a:	4180      	sbcs	r0, r0
 800167c:	4461      	add	r1, ip
 800167e:	4240      	negs	r0, r0
 8001680:	1809      	adds	r1, r1, r0
 8001682:	2200      	movs	r2, #0
 8001684:	020b      	lsls	r3, r1, #8
 8001686:	d400      	bmi.n	800168a <__aeabi_dsub+0x572>
 8001688:	e6d0      	b.n	800142c <__aeabi_dsub+0x314>
 800168a:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <__aeabi_dsub+0x68c>)
 800168c:	3501      	adds	r5, #1
 800168e:	4019      	ands	r1, r3
 8001690:	e5b2      	b.n	80011f8 <__aeabi_dsub+0xe0>
 8001692:	46b1      	mov	r9, r6
 8001694:	e65d      	b.n	8001352 <__aeabi_dsub+0x23a>
 8001696:	0033      	movs	r3, r6
 8001698:	4667      	mov	r7, ip
 800169a:	3b20      	subs	r3, #32
 800169c:	40df      	lsrs	r7, r3
 800169e:	003b      	movs	r3, r7
 80016a0:	2e20      	cmp	r6, #32
 80016a2:	d005      	beq.n	80016b0 <__aeabi_dsub+0x598>
 80016a4:	2740      	movs	r7, #64	; 0x40
 80016a6:	1bbf      	subs	r7, r7, r6
 80016a8:	4666      	mov	r6, ip
 80016aa:	40be      	lsls	r6, r7
 80016ac:	4332      	orrs	r2, r6
 80016ae:	4690      	mov	r8, r2
 80016b0:	4646      	mov	r6, r8
 80016b2:	1e72      	subs	r2, r6, #1
 80016b4:	4196      	sbcs	r6, r2
 80016b6:	4333      	orrs	r3, r6
 80016b8:	e5ef      	b.n	800129a <__aeabi_dsub+0x182>
 80016ba:	4b39      	ldr	r3, [pc, #228]	; (80017a0 <__aeabi_dsub+0x688>)
 80016bc:	429f      	cmp	r7, r3
 80016be:	d0cb      	beq.n	8001658 <__aeabi_dsub+0x540>
 80016c0:	2580      	movs	r5, #128	; 0x80
 80016c2:	042d      	lsls	r5, r5, #16
 80016c4:	4273      	negs	r3, r6
 80016c6:	4329      	orrs	r1, r5
 80016c8:	e7a8      	b.n	800161c <__aeabi_dsub+0x504>
 80016ca:	4308      	orrs	r0, r1
 80016cc:	1e41      	subs	r1, r0, #1
 80016ce:	4188      	sbcs	r0, r1
 80016d0:	e6a2      	b.n	8001418 <__aeabi_dsub+0x300>
 80016d2:	2f00      	cmp	r7, #0
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dsub+0x5c0>
 80016d6:	e63c      	b.n	8001352 <__aeabi_dsub+0x23a>
 80016d8:	4663      	mov	r3, ip
 80016da:	1a86      	subs	r6, r0, r2
 80016dc:	1acf      	subs	r7, r1, r3
 80016de:	42b0      	cmp	r0, r6
 80016e0:	419b      	sbcs	r3, r3
 80016e2:	425b      	negs	r3, r3
 80016e4:	1afb      	subs	r3, r7, r3
 80016e6:	4698      	mov	r8, r3
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	d54e      	bpl.n	800178a <__aeabi_dsub+0x672>
 80016ec:	1a16      	subs	r6, r2, r0
 80016ee:	4663      	mov	r3, ip
 80016f0:	42b2      	cmp	r2, r6
 80016f2:	4192      	sbcs	r2, r2
 80016f4:	1a59      	subs	r1, r3, r1
 80016f6:	4252      	negs	r2, r2
 80016f8:	1a89      	subs	r1, r1, r2
 80016fa:	465c      	mov	r4, fp
 80016fc:	2200      	movs	r2, #0
 80016fe:	e57b      	b.n	80011f8 <__aeabi_dsub+0xe0>
 8001700:	4301      	orrs	r1, r0
 8001702:	000e      	movs	r6, r1
 8001704:	1e71      	subs	r1, r6, #1
 8001706:	418e      	sbcs	r6, r1
 8001708:	e79f      	b.n	800164a <__aeabi_dsub+0x532>
 800170a:	001d      	movs	r5, r3
 800170c:	000e      	movs	r6, r1
 800170e:	3d20      	subs	r5, #32
 8001710:	40ee      	lsrs	r6, r5
 8001712:	46b0      	mov	r8, r6
 8001714:	2b20      	cmp	r3, #32
 8001716:	d004      	beq.n	8001722 <__aeabi_dsub+0x60a>
 8001718:	2540      	movs	r5, #64	; 0x40
 800171a:	1aeb      	subs	r3, r5, r3
 800171c:	4099      	lsls	r1, r3
 800171e:	4308      	orrs	r0, r1
 8001720:	4681      	mov	r9, r0
 8001722:	4648      	mov	r0, r9
 8001724:	4643      	mov	r3, r8
 8001726:	1e41      	subs	r1, r0, #1
 8001728:	4188      	sbcs	r0, r1
 800172a:	4318      	orrs	r0, r3
 800172c:	e674      	b.n	8001418 <__aeabi_dsub+0x300>
 800172e:	2200      	movs	r2, #0
 8001730:	2400      	movs	r4, #0
 8001732:	e617      	b.n	8001364 <__aeabi_dsub+0x24c>
 8001734:	1a16      	subs	r6, r2, r0
 8001736:	4663      	mov	r3, ip
 8001738:	42b2      	cmp	r2, r6
 800173a:	4192      	sbcs	r2, r2
 800173c:	1a59      	subs	r1, r3, r1
 800173e:	4252      	negs	r2, r2
 8001740:	1a89      	subs	r1, r1, r2
 8001742:	003d      	movs	r5, r7
 8001744:	e525      	b.n	8001192 <__aeabi_dsub+0x7a>
 8001746:	4661      	mov	r1, ip
 8001748:	4691      	mov	r9, r2
 800174a:	4d15      	ldr	r5, [pc, #84]	; (80017a0 <__aeabi_dsub+0x688>)
 800174c:	e601      	b.n	8001352 <__aeabi_dsub+0x23a>
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	2400      	movs	r4, #0
 8001752:	0312      	lsls	r2, r2, #12
 8001754:	e679      	b.n	800144a <__aeabi_dsub+0x332>
 8001756:	001d      	movs	r5, r3
 8001758:	000e      	movs	r6, r1
 800175a:	3d20      	subs	r5, #32
 800175c:	40ee      	lsrs	r6, r5
 800175e:	46b0      	mov	r8, r6
 8001760:	2b20      	cmp	r3, #32
 8001762:	d004      	beq.n	800176e <__aeabi_dsub+0x656>
 8001764:	2540      	movs	r5, #64	; 0x40
 8001766:	1aeb      	subs	r3, r5, r3
 8001768:	4099      	lsls	r1, r3
 800176a:	4308      	orrs	r0, r1
 800176c:	4681      	mov	r9, r0
 800176e:	464e      	mov	r6, r9
 8001770:	4643      	mov	r3, r8
 8001772:	1e71      	subs	r1, r6, #1
 8001774:	418e      	sbcs	r6, r1
 8001776:	431e      	orrs	r6, r3
 8001778:	e767      	b.n	800164a <__aeabi_dsub+0x532>
 800177a:	1886      	adds	r6, r0, r2
 800177c:	4296      	cmp	r6, r2
 800177e:	419b      	sbcs	r3, r3
 8001780:	4461      	add	r1, ip
 8001782:	425b      	negs	r3, r3
 8001784:	18c9      	adds	r1, r1, r3
 8001786:	003d      	movs	r5, r7
 8001788:	e58c      	b.n	80012a4 <__aeabi_dsub+0x18c>
 800178a:	4647      	mov	r7, r8
 800178c:	4337      	orrs	r7, r6
 800178e:	d0ce      	beq.n	800172e <__aeabi_dsub+0x616>
 8001790:	2207      	movs	r2, #7
 8001792:	4641      	mov	r1, r8
 8001794:	4032      	ands	r2, r6
 8001796:	e649      	b.n	800142c <__aeabi_dsub+0x314>
 8001798:	2700      	movs	r7, #0
 800179a:	003a      	movs	r2, r7
 800179c:	e5e6      	b.n	800136c <__aeabi_dsub+0x254>
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	000007ff 	.word	0x000007ff
 80017a4:	ff7fffff 	.word	0xff7fffff

080017a8 <__aeabi_d2iz>:
 80017a8:	b530      	push	{r4, r5, lr}
 80017aa:	4d14      	ldr	r5, [pc, #80]	; (80017fc <__aeabi_d2iz+0x54>)
 80017ac:	030a      	lsls	r2, r1, #12
 80017ae:	004b      	lsls	r3, r1, #1
 80017b0:	0b12      	lsrs	r2, r2, #12
 80017b2:	0d5b      	lsrs	r3, r3, #21
 80017b4:	0fc9      	lsrs	r1, r1, #31
 80017b6:	2400      	movs	r4, #0
 80017b8:	42ab      	cmp	r3, r5
 80017ba:	dd11      	ble.n	80017e0 <__aeabi_d2iz+0x38>
 80017bc:	4c10      	ldr	r4, [pc, #64]	; (8001800 <__aeabi_d2iz+0x58>)
 80017be:	42a3      	cmp	r3, r4
 80017c0:	dc10      	bgt.n	80017e4 <__aeabi_d2iz+0x3c>
 80017c2:	2480      	movs	r4, #128	; 0x80
 80017c4:	0364      	lsls	r4, r4, #13
 80017c6:	4322      	orrs	r2, r4
 80017c8:	4c0e      	ldr	r4, [pc, #56]	; (8001804 <__aeabi_d2iz+0x5c>)
 80017ca:	1ae4      	subs	r4, r4, r3
 80017cc:	2c1f      	cmp	r4, #31
 80017ce:	dd0c      	ble.n	80017ea <__aeabi_d2iz+0x42>
 80017d0:	480d      	ldr	r0, [pc, #52]	; (8001808 <__aeabi_d2iz+0x60>)
 80017d2:	1ac3      	subs	r3, r0, r3
 80017d4:	40da      	lsrs	r2, r3
 80017d6:	0013      	movs	r3, r2
 80017d8:	425c      	negs	r4, r3
 80017da:	2900      	cmp	r1, #0
 80017dc:	d100      	bne.n	80017e0 <__aeabi_d2iz+0x38>
 80017de:	001c      	movs	r4, r3
 80017e0:	0020      	movs	r0, r4
 80017e2:	bd30      	pop	{r4, r5, pc}
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <__aeabi_d2iz+0x64>)
 80017e6:	18cc      	adds	r4, r1, r3
 80017e8:	e7fa      	b.n	80017e0 <__aeabi_d2iz+0x38>
 80017ea:	4d09      	ldr	r5, [pc, #36]	; (8001810 <__aeabi_d2iz+0x68>)
 80017ec:	40e0      	lsrs	r0, r4
 80017ee:	46ac      	mov	ip, r5
 80017f0:	4463      	add	r3, ip
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	4303      	orrs	r3, r0
 80017f8:	e7ee      	b.n	80017d8 <__aeabi_d2iz+0x30>
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	000003fe 	.word	0x000003fe
 8001800:	0000041d 	.word	0x0000041d
 8001804:	00000433 	.word	0x00000433
 8001808:	00000413 	.word	0x00000413
 800180c:	7fffffff 	.word	0x7fffffff
 8001810:	fffffbed 	.word	0xfffffbed

08001814 <__aeabi_i2d>:
 8001814:	b570      	push	{r4, r5, r6, lr}
 8001816:	2800      	cmp	r0, #0
 8001818:	d02d      	beq.n	8001876 <__aeabi_i2d+0x62>
 800181a:	17c3      	asrs	r3, r0, #31
 800181c:	18c5      	adds	r5, r0, r3
 800181e:	405d      	eors	r5, r3
 8001820:	0fc4      	lsrs	r4, r0, #31
 8001822:	0028      	movs	r0, r5
 8001824:	f000 f944 	bl	8001ab0 <__clzsi2>
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <__aeabi_i2d+0x6c>)
 800182a:	1a1b      	subs	r3, r3, r0
 800182c:	055b      	lsls	r3, r3, #21
 800182e:	0d5b      	lsrs	r3, r3, #21
 8001830:	280a      	cmp	r0, #10
 8001832:	dd15      	ble.n	8001860 <__aeabi_i2d+0x4c>
 8001834:	380b      	subs	r0, #11
 8001836:	4085      	lsls	r5, r0
 8001838:	2200      	movs	r2, #0
 800183a:	032d      	lsls	r5, r5, #12
 800183c:	0b2d      	lsrs	r5, r5, #12
 800183e:	2100      	movs	r1, #0
 8001840:	0010      	movs	r0, r2
 8001842:	032d      	lsls	r5, r5, #12
 8001844:	0d0a      	lsrs	r2, r1, #20
 8001846:	0b2d      	lsrs	r5, r5, #12
 8001848:	0512      	lsls	r2, r2, #20
 800184a:	432a      	orrs	r2, r5
 800184c:	4d0d      	ldr	r5, [pc, #52]	; (8001884 <__aeabi_i2d+0x70>)
 800184e:	051b      	lsls	r3, r3, #20
 8001850:	402a      	ands	r2, r5
 8001852:	4313      	orrs	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	07e4      	lsls	r4, r4, #31
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	4323      	orrs	r3, r4
 800185c:	0019      	movs	r1, r3
 800185e:	bd70      	pop	{r4, r5, r6, pc}
 8001860:	0002      	movs	r2, r0
 8001862:	0029      	movs	r1, r5
 8001864:	3215      	adds	r2, #21
 8001866:	4091      	lsls	r1, r2
 8001868:	000a      	movs	r2, r1
 800186a:	210b      	movs	r1, #11
 800186c:	1a08      	subs	r0, r1, r0
 800186e:	40c5      	lsrs	r5, r0
 8001870:	032d      	lsls	r5, r5, #12
 8001872:	0b2d      	lsrs	r5, r5, #12
 8001874:	e7e3      	b.n	800183e <__aeabi_i2d+0x2a>
 8001876:	2400      	movs	r4, #0
 8001878:	2300      	movs	r3, #0
 800187a:	2500      	movs	r5, #0
 800187c:	2200      	movs	r2, #0
 800187e:	e7de      	b.n	800183e <__aeabi_i2d+0x2a>
 8001880:	0000041e 	.word	0x0000041e
 8001884:	800fffff 	.word	0x800fffff

08001888 <__aeabi_f2d>:
 8001888:	0041      	lsls	r1, r0, #1
 800188a:	0e09      	lsrs	r1, r1, #24
 800188c:	1c4b      	adds	r3, r1, #1
 800188e:	b570      	push	{r4, r5, r6, lr}
 8001890:	b2db      	uxtb	r3, r3
 8001892:	0246      	lsls	r6, r0, #9
 8001894:	0a75      	lsrs	r5, r6, #9
 8001896:	0fc4      	lsrs	r4, r0, #31
 8001898:	2b01      	cmp	r3, #1
 800189a:	dd14      	ble.n	80018c6 <__aeabi_f2d+0x3e>
 800189c:	23e0      	movs	r3, #224	; 0xe0
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	076d      	lsls	r5, r5, #29
 80018a2:	0b36      	lsrs	r6, r6, #12
 80018a4:	18cb      	adds	r3, r1, r3
 80018a6:	2100      	movs	r1, #0
 80018a8:	0d0a      	lsrs	r2, r1, #20
 80018aa:	0028      	movs	r0, r5
 80018ac:	0512      	lsls	r2, r2, #20
 80018ae:	4d1c      	ldr	r5, [pc, #112]	; (8001920 <__aeabi_f2d+0x98>)
 80018b0:	4332      	orrs	r2, r6
 80018b2:	055b      	lsls	r3, r3, #21
 80018b4:	402a      	ands	r2, r5
 80018b6:	085b      	lsrs	r3, r3, #1
 80018b8:	4313      	orrs	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	07e4      	lsls	r4, r4, #31
 80018be:	085b      	lsrs	r3, r3, #1
 80018c0:	4323      	orrs	r3, r4
 80018c2:	0019      	movs	r1, r3
 80018c4:	bd70      	pop	{r4, r5, r6, pc}
 80018c6:	2900      	cmp	r1, #0
 80018c8:	d114      	bne.n	80018f4 <__aeabi_f2d+0x6c>
 80018ca:	2d00      	cmp	r5, #0
 80018cc:	d01e      	beq.n	800190c <__aeabi_f2d+0x84>
 80018ce:	0028      	movs	r0, r5
 80018d0:	f000 f8ee 	bl	8001ab0 <__clzsi2>
 80018d4:	280a      	cmp	r0, #10
 80018d6:	dc1c      	bgt.n	8001912 <__aeabi_f2d+0x8a>
 80018d8:	230b      	movs	r3, #11
 80018da:	002a      	movs	r2, r5
 80018dc:	1a1b      	subs	r3, r3, r0
 80018de:	40da      	lsrs	r2, r3
 80018e0:	0003      	movs	r3, r0
 80018e2:	3315      	adds	r3, #21
 80018e4:	409d      	lsls	r5, r3
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <__aeabi_f2d+0x9c>)
 80018e8:	0312      	lsls	r2, r2, #12
 80018ea:	1a1b      	subs	r3, r3, r0
 80018ec:	055b      	lsls	r3, r3, #21
 80018ee:	0b16      	lsrs	r6, r2, #12
 80018f0:	0d5b      	lsrs	r3, r3, #21
 80018f2:	e7d8      	b.n	80018a6 <__aeabi_f2d+0x1e>
 80018f4:	2d00      	cmp	r5, #0
 80018f6:	d006      	beq.n	8001906 <__aeabi_f2d+0x7e>
 80018f8:	0b32      	lsrs	r2, r6, #12
 80018fa:	2680      	movs	r6, #128	; 0x80
 80018fc:	0336      	lsls	r6, r6, #12
 80018fe:	076d      	lsls	r5, r5, #29
 8001900:	4316      	orrs	r6, r2
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <__aeabi_f2d+0xa0>)
 8001904:	e7cf      	b.n	80018a6 <__aeabi_f2d+0x1e>
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <__aeabi_f2d+0xa0>)
 8001908:	2600      	movs	r6, #0
 800190a:	e7cc      	b.n	80018a6 <__aeabi_f2d+0x1e>
 800190c:	2300      	movs	r3, #0
 800190e:	2600      	movs	r6, #0
 8001910:	e7c9      	b.n	80018a6 <__aeabi_f2d+0x1e>
 8001912:	0003      	movs	r3, r0
 8001914:	002a      	movs	r2, r5
 8001916:	3b0b      	subs	r3, #11
 8001918:	409a      	lsls	r2, r3
 800191a:	2500      	movs	r5, #0
 800191c:	e7e3      	b.n	80018e6 <__aeabi_f2d+0x5e>
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	800fffff 	.word	0x800fffff
 8001924:	00000389 	.word	0x00000389
 8001928:	000007ff 	.word	0x000007ff

0800192c <__aeabi_d2f>:
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192e:	004c      	lsls	r4, r1, #1
 8001930:	0d64      	lsrs	r4, r4, #21
 8001932:	030b      	lsls	r3, r1, #12
 8001934:	1c62      	adds	r2, r4, #1
 8001936:	0a5b      	lsrs	r3, r3, #9
 8001938:	0f46      	lsrs	r6, r0, #29
 800193a:	0552      	lsls	r2, r2, #21
 800193c:	0fc9      	lsrs	r1, r1, #31
 800193e:	431e      	orrs	r6, r3
 8001940:	00c5      	lsls	r5, r0, #3
 8001942:	0d52      	lsrs	r2, r2, #21
 8001944:	2a01      	cmp	r2, #1
 8001946:	dd29      	ble.n	800199c <__aeabi_d2f+0x70>
 8001948:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <__aeabi_d2f+0xfc>)
 800194a:	18e7      	adds	r7, r4, r3
 800194c:	2ffe      	cmp	r7, #254	; 0xfe
 800194e:	dc1c      	bgt.n	800198a <__aeabi_d2f+0x5e>
 8001950:	2f00      	cmp	r7, #0
 8001952:	dd3b      	ble.n	80019cc <__aeabi_d2f+0xa0>
 8001954:	0180      	lsls	r0, r0, #6
 8001956:	1e43      	subs	r3, r0, #1
 8001958:	4198      	sbcs	r0, r3
 800195a:	2207      	movs	r2, #7
 800195c:	00f3      	lsls	r3, r6, #3
 800195e:	0f6d      	lsrs	r5, r5, #29
 8001960:	4303      	orrs	r3, r0
 8001962:	432b      	orrs	r3, r5
 8001964:	401a      	ands	r2, r3
 8001966:	2a00      	cmp	r2, #0
 8001968:	d004      	beq.n	8001974 <__aeabi_d2f+0x48>
 800196a:	220f      	movs	r2, #15
 800196c:	401a      	ands	r2, r3
 800196e:	2a04      	cmp	r2, #4
 8001970:	d000      	beq.n	8001974 <__aeabi_d2f+0x48>
 8001972:	3304      	adds	r3, #4
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	04d2      	lsls	r2, r2, #19
 8001978:	401a      	ands	r2, r3
 800197a:	d024      	beq.n	80019c6 <__aeabi_d2f+0x9a>
 800197c:	3701      	adds	r7, #1
 800197e:	b2fa      	uxtb	r2, r7
 8001980:	2fff      	cmp	r7, #255	; 0xff
 8001982:	d002      	beq.n	800198a <__aeabi_d2f+0x5e>
 8001984:	019b      	lsls	r3, r3, #6
 8001986:	0a58      	lsrs	r0, r3, #9
 8001988:	e001      	b.n	800198e <__aeabi_d2f+0x62>
 800198a:	22ff      	movs	r2, #255	; 0xff
 800198c:	2000      	movs	r0, #0
 800198e:	0240      	lsls	r0, r0, #9
 8001990:	05d2      	lsls	r2, r2, #23
 8001992:	0a40      	lsrs	r0, r0, #9
 8001994:	07c9      	lsls	r1, r1, #31
 8001996:	4310      	orrs	r0, r2
 8001998:	4308      	orrs	r0, r1
 800199a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800199c:	4335      	orrs	r5, r6
 800199e:	2c00      	cmp	r4, #0
 80019a0:	d104      	bne.n	80019ac <__aeabi_d2f+0x80>
 80019a2:	2d00      	cmp	r5, #0
 80019a4:	d10a      	bne.n	80019bc <__aeabi_d2f+0x90>
 80019a6:	2200      	movs	r2, #0
 80019a8:	2000      	movs	r0, #0
 80019aa:	e7f0      	b.n	800198e <__aeabi_d2f+0x62>
 80019ac:	2d00      	cmp	r5, #0
 80019ae:	d0ec      	beq.n	800198a <__aeabi_d2f+0x5e>
 80019b0:	2080      	movs	r0, #128	; 0x80
 80019b2:	03c0      	lsls	r0, r0, #15
 80019b4:	4330      	orrs	r0, r6
 80019b6:	22ff      	movs	r2, #255	; 0xff
 80019b8:	e7e9      	b.n	800198e <__aeabi_d2f+0x62>
 80019ba:	2400      	movs	r4, #0
 80019bc:	2300      	movs	r3, #0
 80019be:	025b      	lsls	r3, r3, #9
 80019c0:	0a58      	lsrs	r0, r3, #9
 80019c2:	b2e2      	uxtb	r2, r4
 80019c4:	e7e3      	b.n	800198e <__aeabi_d2f+0x62>
 80019c6:	08db      	lsrs	r3, r3, #3
 80019c8:	003c      	movs	r4, r7
 80019ca:	e7f8      	b.n	80019be <__aeabi_d2f+0x92>
 80019cc:	003b      	movs	r3, r7
 80019ce:	3317      	adds	r3, #23
 80019d0:	dbf3      	blt.n	80019ba <__aeabi_d2f+0x8e>
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	4333      	orrs	r3, r6
 80019d8:	261e      	movs	r6, #30
 80019da:	1bf6      	subs	r6, r6, r7
 80019dc:	2e1f      	cmp	r6, #31
 80019de:	dd14      	ble.n	8001a0a <__aeabi_d2f+0xde>
 80019e0:	2202      	movs	r2, #2
 80019e2:	4252      	negs	r2, r2
 80019e4:	1bd7      	subs	r7, r2, r7
 80019e6:	001a      	movs	r2, r3
 80019e8:	40fa      	lsrs	r2, r7
 80019ea:	0017      	movs	r7, r2
 80019ec:	2e20      	cmp	r6, #32
 80019ee:	d004      	beq.n	80019fa <__aeabi_d2f+0xce>
 80019f0:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <__aeabi_d2f+0x100>)
 80019f2:	4694      	mov	ip, r2
 80019f4:	4464      	add	r4, ip
 80019f6:	40a3      	lsls	r3, r4
 80019f8:	431d      	orrs	r5, r3
 80019fa:	002b      	movs	r3, r5
 80019fc:	1e5d      	subs	r5, r3, #1
 80019fe:	41ab      	sbcs	r3, r5
 8001a00:	2207      	movs	r2, #7
 8001a02:	433b      	orrs	r3, r7
 8001a04:	401a      	ands	r2, r3
 8001a06:	2700      	movs	r7, #0
 8001a08:	e7ad      	b.n	8001966 <__aeabi_d2f+0x3a>
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <__aeabi_d2f+0x104>)
 8001a0c:	0028      	movs	r0, r5
 8001a0e:	18a2      	adds	r2, r4, r2
 8001a10:	4095      	lsls	r5, r2
 8001a12:	4093      	lsls	r3, r2
 8001a14:	1e6c      	subs	r4, r5, #1
 8001a16:	41a5      	sbcs	r5, r4
 8001a18:	40f0      	lsrs	r0, r6
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	432b      	orrs	r3, r5
 8001a1e:	4303      	orrs	r3, r0
 8001a20:	401a      	ands	r2, r3
 8001a22:	2700      	movs	r7, #0
 8001a24:	e79f      	b.n	8001966 <__aeabi_d2f+0x3a>
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	fffffc80 	.word	0xfffffc80
 8001a2c:	fffffca2 	.word	0xfffffca2
 8001a30:	fffffc82 	.word	0xfffffc82

08001a34 <__aeabi_cdrcmple>:
 8001a34:	4684      	mov	ip, r0
 8001a36:	1c10      	adds	r0, r2, #0
 8001a38:	4662      	mov	r2, ip
 8001a3a:	468c      	mov	ip, r1
 8001a3c:	1c19      	adds	r1, r3, #0
 8001a3e:	4663      	mov	r3, ip
 8001a40:	e000      	b.n	8001a44 <__aeabi_cdcmpeq>
 8001a42:	46c0      	nop			; (mov r8, r8)

08001a44 <__aeabi_cdcmpeq>:
 8001a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001a46:	f000 f8f1 	bl	8001c2c <__ledf2>
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d401      	bmi.n	8001a52 <__aeabi_cdcmpeq+0xe>
 8001a4e:	2100      	movs	r1, #0
 8001a50:	42c8      	cmn	r0, r1
 8001a52:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001a54 <__aeabi_dcmpeq>:
 8001a54:	b510      	push	{r4, lr}
 8001a56:	f000 f849 	bl	8001aec <__eqdf2>
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	3001      	adds	r0, #1
 8001a5e:	bd10      	pop	{r4, pc}

08001a60 <__aeabi_dcmplt>:
 8001a60:	b510      	push	{r4, lr}
 8001a62:	f000 f8e3 	bl	8001c2c <__ledf2>
 8001a66:	2800      	cmp	r0, #0
 8001a68:	db01      	blt.n	8001a6e <__aeabi_dcmplt+0xe>
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	bd10      	pop	{r4, pc}
 8001a6e:	2001      	movs	r0, #1
 8001a70:	bd10      	pop	{r4, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)

08001a74 <__aeabi_dcmple>:
 8001a74:	b510      	push	{r4, lr}
 8001a76:	f000 f8d9 	bl	8001c2c <__ledf2>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	dd01      	ble.n	8001a82 <__aeabi_dcmple+0xe>
 8001a7e:	2000      	movs	r0, #0
 8001a80:	bd10      	pop	{r4, pc}
 8001a82:	2001      	movs	r0, #1
 8001a84:	bd10      	pop	{r4, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)

08001a88 <__aeabi_dcmpgt>:
 8001a88:	b510      	push	{r4, lr}
 8001a8a:	f000 f86b 	bl	8001b64 <__gedf2>
 8001a8e:	2800      	cmp	r0, #0
 8001a90:	dc01      	bgt.n	8001a96 <__aeabi_dcmpgt+0xe>
 8001a92:	2000      	movs	r0, #0
 8001a94:	bd10      	pop	{r4, pc}
 8001a96:	2001      	movs	r0, #1
 8001a98:	bd10      	pop	{r4, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)

08001a9c <__aeabi_dcmpge>:
 8001a9c:	b510      	push	{r4, lr}
 8001a9e:	f000 f861 	bl	8001b64 <__gedf2>
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	da01      	bge.n	8001aaa <__aeabi_dcmpge+0xe>
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	bd10      	pop	{r4, pc}
 8001aaa:	2001      	movs	r0, #1
 8001aac:	bd10      	pop	{r4, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)

08001ab0 <__clzsi2>:
 8001ab0:	211c      	movs	r1, #28
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	041b      	lsls	r3, r3, #16
 8001ab6:	4298      	cmp	r0, r3
 8001ab8:	d301      	bcc.n	8001abe <__clzsi2+0xe>
 8001aba:	0c00      	lsrs	r0, r0, #16
 8001abc:	3910      	subs	r1, #16
 8001abe:	0a1b      	lsrs	r3, r3, #8
 8001ac0:	4298      	cmp	r0, r3
 8001ac2:	d301      	bcc.n	8001ac8 <__clzsi2+0x18>
 8001ac4:	0a00      	lsrs	r0, r0, #8
 8001ac6:	3908      	subs	r1, #8
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	4298      	cmp	r0, r3
 8001acc:	d301      	bcc.n	8001ad2 <__clzsi2+0x22>
 8001ace:	0900      	lsrs	r0, r0, #4
 8001ad0:	3904      	subs	r1, #4
 8001ad2:	a202      	add	r2, pc, #8	; (adr r2, 8001adc <__clzsi2+0x2c>)
 8001ad4:	5c10      	ldrb	r0, [r2, r0]
 8001ad6:	1840      	adds	r0, r0, r1
 8001ad8:	4770      	bx	lr
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	02020304 	.word	0x02020304
 8001ae0:	01010101 	.word	0x01010101
	...

08001aec <__eqdf2>:
 8001aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aee:	464f      	mov	r7, r9
 8001af0:	4646      	mov	r6, r8
 8001af2:	46d6      	mov	lr, sl
 8001af4:	4684      	mov	ip, r0
 8001af6:	b5c0      	push	{r6, r7, lr}
 8001af8:	4680      	mov	r8, r0
 8001afa:	4e19      	ldr	r6, [pc, #100]	; (8001b60 <__eqdf2+0x74>)
 8001afc:	0318      	lsls	r0, r3, #12
 8001afe:	030f      	lsls	r7, r1, #12
 8001b00:	004d      	lsls	r5, r1, #1
 8001b02:	0b00      	lsrs	r0, r0, #12
 8001b04:	005c      	lsls	r4, r3, #1
 8001b06:	4682      	mov	sl, r0
 8001b08:	0b3f      	lsrs	r7, r7, #12
 8001b0a:	0d6d      	lsrs	r5, r5, #21
 8001b0c:	0fc9      	lsrs	r1, r1, #31
 8001b0e:	4691      	mov	r9, r2
 8001b10:	0d64      	lsrs	r4, r4, #21
 8001b12:	0fdb      	lsrs	r3, r3, #31
 8001b14:	2001      	movs	r0, #1
 8001b16:	42b5      	cmp	r5, r6
 8001b18:	d00a      	beq.n	8001b30 <__eqdf2+0x44>
 8001b1a:	42b4      	cmp	r4, r6
 8001b1c:	d003      	beq.n	8001b26 <__eqdf2+0x3a>
 8001b1e:	42a5      	cmp	r5, r4
 8001b20:	d101      	bne.n	8001b26 <__eqdf2+0x3a>
 8001b22:	4557      	cmp	r7, sl
 8001b24:	d00c      	beq.n	8001b40 <__eqdf2+0x54>
 8001b26:	bc1c      	pop	{r2, r3, r4}
 8001b28:	4690      	mov	r8, r2
 8001b2a:	4699      	mov	r9, r3
 8001b2c:	46a2      	mov	sl, r4
 8001b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b30:	4666      	mov	r6, ip
 8001b32:	433e      	orrs	r6, r7
 8001b34:	d1f7      	bne.n	8001b26 <__eqdf2+0x3a>
 8001b36:	42ac      	cmp	r4, r5
 8001b38:	d1f5      	bne.n	8001b26 <__eqdf2+0x3a>
 8001b3a:	4654      	mov	r4, sl
 8001b3c:	4314      	orrs	r4, r2
 8001b3e:	d1f2      	bne.n	8001b26 <__eqdf2+0x3a>
 8001b40:	2001      	movs	r0, #1
 8001b42:	45c8      	cmp	r8, r9
 8001b44:	d1ef      	bne.n	8001b26 <__eqdf2+0x3a>
 8001b46:	4299      	cmp	r1, r3
 8001b48:	d007      	beq.n	8001b5a <__eqdf2+0x6e>
 8001b4a:	2d00      	cmp	r5, #0
 8001b4c:	d1eb      	bne.n	8001b26 <__eqdf2+0x3a>
 8001b4e:	4663      	mov	r3, ip
 8001b50:	431f      	orrs	r7, r3
 8001b52:	0038      	movs	r0, r7
 8001b54:	1e47      	subs	r7, r0, #1
 8001b56:	41b8      	sbcs	r0, r7
 8001b58:	e7e5      	b.n	8001b26 <__eqdf2+0x3a>
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	e7e3      	b.n	8001b26 <__eqdf2+0x3a>
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	000007ff 	.word	0x000007ff

08001b64 <__gedf2>:
 8001b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b66:	464f      	mov	r7, r9
 8001b68:	4646      	mov	r6, r8
 8001b6a:	46d6      	mov	lr, sl
 8001b6c:	004d      	lsls	r5, r1, #1
 8001b6e:	b5c0      	push	{r6, r7, lr}
 8001b70:	030e      	lsls	r6, r1, #12
 8001b72:	0fc9      	lsrs	r1, r1, #31
 8001b74:	468a      	mov	sl, r1
 8001b76:	492c      	ldr	r1, [pc, #176]	; (8001c28 <__gedf2+0xc4>)
 8001b78:	031f      	lsls	r7, r3, #12
 8001b7a:	005c      	lsls	r4, r3, #1
 8001b7c:	4680      	mov	r8, r0
 8001b7e:	0b36      	lsrs	r6, r6, #12
 8001b80:	0d6d      	lsrs	r5, r5, #21
 8001b82:	4691      	mov	r9, r2
 8001b84:	0b3f      	lsrs	r7, r7, #12
 8001b86:	0d64      	lsrs	r4, r4, #21
 8001b88:	0fdb      	lsrs	r3, r3, #31
 8001b8a:	428d      	cmp	r5, r1
 8001b8c:	d01e      	beq.n	8001bcc <__gedf2+0x68>
 8001b8e:	428c      	cmp	r4, r1
 8001b90:	d016      	beq.n	8001bc0 <__gedf2+0x5c>
 8001b92:	2d00      	cmp	r5, #0
 8001b94:	d11e      	bne.n	8001bd4 <__gedf2+0x70>
 8001b96:	4330      	orrs	r0, r6
 8001b98:	4684      	mov	ip, r0
 8001b9a:	2c00      	cmp	r4, #0
 8001b9c:	d101      	bne.n	8001ba2 <__gedf2+0x3e>
 8001b9e:	433a      	orrs	r2, r7
 8001ba0:	d023      	beq.n	8001bea <__gedf2+0x86>
 8001ba2:	4662      	mov	r2, ip
 8001ba4:	2a00      	cmp	r2, #0
 8001ba6:	d01a      	beq.n	8001bde <__gedf2+0x7a>
 8001ba8:	459a      	cmp	sl, r3
 8001baa:	d029      	beq.n	8001c00 <__gedf2+0x9c>
 8001bac:	4651      	mov	r1, sl
 8001bae:	2002      	movs	r0, #2
 8001bb0:	3901      	subs	r1, #1
 8001bb2:	4008      	ands	r0, r1
 8001bb4:	3801      	subs	r0, #1
 8001bb6:	bc1c      	pop	{r2, r3, r4}
 8001bb8:	4690      	mov	r8, r2
 8001bba:	4699      	mov	r9, r3
 8001bbc:	46a2      	mov	sl, r4
 8001bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc0:	0039      	movs	r1, r7
 8001bc2:	4311      	orrs	r1, r2
 8001bc4:	d0e5      	beq.n	8001b92 <__gedf2+0x2e>
 8001bc6:	2002      	movs	r0, #2
 8001bc8:	4240      	negs	r0, r0
 8001bca:	e7f4      	b.n	8001bb6 <__gedf2+0x52>
 8001bcc:	4330      	orrs	r0, r6
 8001bce:	d1fa      	bne.n	8001bc6 <__gedf2+0x62>
 8001bd0:	42ac      	cmp	r4, r5
 8001bd2:	d00f      	beq.n	8001bf4 <__gedf2+0x90>
 8001bd4:	2c00      	cmp	r4, #0
 8001bd6:	d10f      	bne.n	8001bf8 <__gedf2+0x94>
 8001bd8:	433a      	orrs	r2, r7
 8001bda:	d0e7      	beq.n	8001bac <__gedf2+0x48>
 8001bdc:	e00c      	b.n	8001bf8 <__gedf2+0x94>
 8001bde:	2201      	movs	r2, #1
 8001be0:	3b01      	subs	r3, #1
 8001be2:	4393      	bics	r3, r2
 8001be4:	0018      	movs	r0, r3
 8001be6:	3001      	adds	r0, #1
 8001be8:	e7e5      	b.n	8001bb6 <__gedf2+0x52>
 8001bea:	4663      	mov	r3, ip
 8001bec:	2000      	movs	r0, #0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0e1      	beq.n	8001bb6 <__gedf2+0x52>
 8001bf2:	e7db      	b.n	8001bac <__gedf2+0x48>
 8001bf4:	433a      	orrs	r2, r7
 8001bf6:	d1e6      	bne.n	8001bc6 <__gedf2+0x62>
 8001bf8:	459a      	cmp	sl, r3
 8001bfa:	d1d7      	bne.n	8001bac <__gedf2+0x48>
 8001bfc:	42a5      	cmp	r5, r4
 8001bfe:	dcd5      	bgt.n	8001bac <__gedf2+0x48>
 8001c00:	42a5      	cmp	r5, r4
 8001c02:	db05      	blt.n	8001c10 <__gedf2+0xac>
 8001c04:	42be      	cmp	r6, r7
 8001c06:	d8d1      	bhi.n	8001bac <__gedf2+0x48>
 8001c08:	d008      	beq.n	8001c1c <__gedf2+0xb8>
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	42be      	cmp	r6, r7
 8001c0e:	d2d2      	bcs.n	8001bb6 <__gedf2+0x52>
 8001c10:	4650      	mov	r0, sl
 8001c12:	2301      	movs	r3, #1
 8001c14:	3801      	subs	r0, #1
 8001c16:	4398      	bics	r0, r3
 8001c18:	3001      	adds	r0, #1
 8001c1a:	e7cc      	b.n	8001bb6 <__gedf2+0x52>
 8001c1c:	45c8      	cmp	r8, r9
 8001c1e:	d8c5      	bhi.n	8001bac <__gedf2+0x48>
 8001c20:	2000      	movs	r0, #0
 8001c22:	45c8      	cmp	r8, r9
 8001c24:	d3f4      	bcc.n	8001c10 <__gedf2+0xac>
 8001c26:	e7c6      	b.n	8001bb6 <__gedf2+0x52>
 8001c28:	000007ff 	.word	0x000007ff

08001c2c <__ledf2>:
 8001c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c2e:	464f      	mov	r7, r9
 8001c30:	4646      	mov	r6, r8
 8001c32:	46d6      	mov	lr, sl
 8001c34:	004d      	lsls	r5, r1, #1
 8001c36:	b5c0      	push	{r6, r7, lr}
 8001c38:	030e      	lsls	r6, r1, #12
 8001c3a:	0fc9      	lsrs	r1, r1, #31
 8001c3c:	468a      	mov	sl, r1
 8001c3e:	492e      	ldr	r1, [pc, #184]	; (8001cf8 <__ledf2+0xcc>)
 8001c40:	031f      	lsls	r7, r3, #12
 8001c42:	005c      	lsls	r4, r3, #1
 8001c44:	4680      	mov	r8, r0
 8001c46:	0b36      	lsrs	r6, r6, #12
 8001c48:	0d6d      	lsrs	r5, r5, #21
 8001c4a:	4691      	mov	r9, r2
 8001c4c:	0b3f      	lsrs	r7, r7, #12
 8001c4e:	0d64      	lsrs	r4, r4, #21
 8001c50:	0fdb      	lsrs	r3, r3, #31
 8001c52:	428d      	cmp	r5, r1
 8001c54:	d018      	beq.n	8001c88 <__ledf2+0x5c>
 8001c56:	428c      	cmp	r4, r1
 8001c58:	d011      	beq.n	8001c7e <__ledf2+0x52>
 8001c5a:	2d00      	cmp	r5, #0
 8001c5c:	d118      	bne.n	8001c90 <__ledf2+0x64>
 8001c5e:	4330      	orrs	r0, r6
 8001c60:	4684      	mov	ip, r0
 8001c62:	2c00      	cmp	r4, #0
 8001c64:	d11e      	bne.n	8001ca4 <__ledf2+0x78>
 8001c66:	433a      	orrs	r2, r7
 8001c68:	d11c      	bne.n	8001ca4 <__ledf2+0x78>
 8001c6a:	4663      	mov	r3, ip
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d030      	beq.n	8001cd4 <__ledf2+0xa8>
 8001c72:	4651      	mov	r1, sl
 8001c74:	2002      	movs	r0, #2
 8001c76:	3901      	subs	r1, #1
 8001c78:	4008      	ands	r0, r1
 8001c7a:	3801      	subs	r0, #1
 8001c7c:	e02a      	b.n	8001cd4 <__ledf2+0xa8>
 8001c7e:	0039      	movs	r1, r7
 8001c80:	4311      	orrs	r1, r2
 8001c82:	d0ea      	beq.n	8001c5a <__ledf2+0x2e>
 8001c84:	2002      	movs	r0, #2
 8001c86:	e025      	b.n	8001cd4 <__ledf2+0xa8>
 8001c88:	4330      	orrs	r0, r6
 8001c8a:	d1fb      	bne.n	8001c84 <__ledf2+0x58>
 8001c8c:	42ac      	cmp	r4, r5
 8001c8e:	d026      	beq.n	8001cde <__ledf2+0xb2>
 8001c90:	2c00      	cmp	r4, #0
 8001c92:	d126      	bne.n	8001ce2 <__ledf2+0xb6>
 8001c94:	433a      	orrs	r2, r7
 8001c96:	d124      	bne.n	8001ce2 <__ledf2+0xb6>
 8001c98:	4651      	mov	r1, sl
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	3901      	subs	r1, #1
 8001c9e:	4008      	ands	r0, r1
 8001ca0:	3801      	subs	r0, #1
 8001ca2:	e017      	b.n	8001cd4 <__ledf2+0xa8>
 8001ca4:	4662      	mov	r2, ip
 8001ca6:	2a00      	cmp	r2, #0
 8001ca8:	d00f      	beq.n	8001cca <__ledf2+0x9e>
 8001caa:	459a      	cmp	sl, r3
 8001cac:	d1e1      	bne.n	8001c72 <__ledf2+0x46>
 8001cae:	42a5      	cmp	r5, r4
 8001cb0:	db05      	blt.n	8001cbe <__ledf2+0x92>
 8001cb2:	42be      	cmp	r6, r7
 8001cb4:	d8dd      	bhi.n	8001c72 <__ledf2+0x46>
 8001cb6:	d019      	beq.n	8001cec <__ledf2+0xc0>
 8001cb8:	2000      	movs	r0, #0
 8001cba:	42be      	cmp	r6, r7
 8001cbc:	d20a      	bcs.n	8001cd4 <__ledf2+0xa8>
 8001cbe:	4650      	mov	r0, sl
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	3801      	subs	r0, #1
 8001cc4:	4398      	bics	r0, r3
 8001cc6:	3001      	adds	r0, #1
 8001cc8:	e004      	b.n	8001cd4 <__ledf2+0xa8>
 8001cca:	2201      	movs	r2, #1
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	4393      	bics	r3, r2
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	3001      	adds	r0, #1
 8001cd4:	bc1c      	pop	{r2, r3, r4}
 8001cd6:	4690      	mov	r8, r2
 8001cd8:	4699      	mov	r9, r3
 8001cda:	46a2      	mov	sl, r4
 8001cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cde:	433a      	orrs	r2, r7
 8001ce0:	d1d0      	bne.n	8001c84 <__ledf2+0x58>
 8001ce2:	459a      	cmp	sl, r3
 8001ce4:	d1c5      	bne.n	8001c72 <__ledf2+0x46>
 8001ce6:	42a5      	cmp	r5, r4
 8001ce8:	dcc3      	bgt.n	8001c72 <__ledf2+0x46>
 8001cea:	e7e0      	b.n	8001cae <__ledf2+0x82>
 8001cec:	45c8      	cmp	r8, r9
 8001cee:	d8c0      	bhi.n	8001c72 <__ledf2+0x46>
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	45c8      	cmp	r8, r9
 8001cf4:	d3e3      	bcc.n	8001cbe <__ledf2+0x92>
 8001cf6:	e7ed      	b.n	8001cd4 <__ledf2+0xa8>
 8001cf8:	000007ff 	.word	0x000007ff

08001cfc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <HAL_Init+0x24>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_Init+0x24>)
 8001d06:	2110      	movs	r1, #16
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f000 f809 	bl	8001d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d12:	f003 ffbf 	bl	8005c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	40022000 	.word	0x40022000

08001d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8001d2c:	f001 fd5e 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8001d30:	0002      	movs	r2, r0
 8001d32:	23fa      	movs	r3, #250	; 0xfa
 8001d34:	0099      	lsls	r1, r3, #2
 8001d36:	0010      	movs	r0, r2
 8001d38:	f7fe f9e6 	bl	8000108 <__udivsi3>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f000 f90d 	bl	8001f5e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	2301      	movs	r3, #1
 8001d48:	425b      	negs	r3, r3
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f000 f8e1 	bl	8001f14 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick++;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <HAL_IncTick+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	4b02      	ldr	r3, [pc, #8]	; (8001d70 <HAL_IncTick+0x14>)
 8001d68:	601a      	str	r2, [r3, #0]
}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	2000002c 	.word	0x2000002c

08001d74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <HAL_GetTick+0x10>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	2000002c 	.word	0x2000002c

08001d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff fff0 	bl	8001d74 <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	d002      	beq.n	8001da8 <HAL_Delay+0x20>
  {
     wait++;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3301      	adds	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	f7ff ffe3 	bl	8001d74 <HAL_GetTick>
 8001dae:	0002      	movs	r2, r0
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d8f7      	bhi.n	8001daa <HAL_Delay+0x22>
  {
  }
}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b004      	add	sp, #16
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	0002      	movs	r2, r0
 8001dcc:	1dfb      	adds	r3, r7, #7
 8001dce:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001dd0:	1dfb      	adds	r3, r7, #7
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	231f      	movs	r3, #31
 8001dd8:	401a      	ands	r2, r3
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <NVIC_EnableIRQ+0x28>)
 8001ddc:	2101      	movs	r1, #1
 8001dde:	4091      	lsls	r1, r2
 8001de0:	000a      	movs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
}
 8001de4:	46c0      	nop			; (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b002      	add	sp, #8
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	0002      	movs	r2, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	1dfb      	adds	r3, r7, #7
 8001dfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001dfe:	1dfb      	adds	r3, r7, #7
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b7f      	cmp	r3, #127	; 0x7f
 8001e04:	d932      	bls.n	8001e6c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e06:	4a2f      	ldr	r2, [pc, #188]	; (8001ec4 <NVIC_SetPriority+0xd4>)
 8001e08:	1dfb      	adds	r3, r7, #7
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	230f      	movs	r3, #15
 8001e10:	400b      	ands	r3, r1
 8001e12:	3b08      	subs	r3, #8
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3306      	adds	r3, #6
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	18d3      	adds	r3, r2, r3
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	1dfa      	adds	r2, r7, #7
 8001e22:	7812      	ldrb	r2, [r2, #0]
 8001e24:	0011      	movs	r1, r2
 8001e26:	2203      	movs	r2, #3
 8001e28:	400a      	ands	r2, r1
 8001e2a:	00d2      	lsls	r2, r2, #3
 8001e2c:	21ff      	movs	r1, #255	; 0xff
 8001e2e:	4091      	lsls	r1, r2
 8001e30:	000a      	movs	r2, r1
 8001e32:	43d2      	mvns	r2, r2
 8001e34:	401a      	ands	r2, r3
 8001e36:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	019b      	lsls	r3, r3, #6
 8001e3c:	22ff      	movs	r2, #255	; 0xff
 8001e3e:	401a      	ands	r2, r3
 8001e40:	1dfb      	adds	r3, r7, #7
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	0018      	movs	r0, r3
 8001e46:	2303      	movs	r3, #3
 8001e48:	4003      	ands	r3, r0
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e4e:	481d      	ldr	r0, [pc, #116]	; (8001ec4 <NVIC_SetPriority+0xd4>)
 8001e50:	1dfb      	adds	r3, r7, #7
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	001c      	movs	r4, r3
 8001e56:	230f      	movs	r3, #15
 8001e58:	4023      	ands	r3, r4
 8001e5a:	3b08      	subs	r3, #8
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	3306      	adds	r3, #6
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	18c3      	adds	r3, r0, r3
 8001e66:	3304      	adds	r3, #4
 8001e68:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e6a:	e027      	b.n	8001ebc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e6c:	4a16      	ldr	r2, [pc, #88]	; (8001ec8 <NVIC_SetPriority+0xd8>)
 8001e6e:	1dfb      	adds	r3, r7, #7
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	b25b      	sxtb	r3, r3
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	33c0      	adds	r3, #192	; 0xc0
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	589b      	ldr	r3, [r3, r2]
 8001e7c:	1dfa      	adds	r2, r7, #7
 8001e7e:	7812      	ldrb	r2, [r2, #0]
 8001e80:	0011      	movs	r1, r2
 8001e82:	2203      	movs	r2, #3
 8001e84:	400a      	ands	r2, r1
 8001e86:	00d2      	lsls	r2, r2, #3
 8001e88:	21ff      	movs	r1, #255	; 0xff
 8001e8a:	4091      	lsls	r1, r2
 8001e8c:	000a      	movs	r2, r1
 8001e8e:	43d2      	mvns	r2, r2
 8001e90:	401a      	ands	r2, r3
 8001e92:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	019b      	lsls	r3, r3, #6
 8001e98:	22ff      	movs	r2, #255	; 0xff
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	1dfb      	adds	r3, r7, #7
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	4003      	ands	r3, r0
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eaa:	4807      	ldr	r0, [pc, #28]	; (8001ec8 <NVIC_SetPriority+0xd8>)
 8001eac:	1dfb      	adds	r3, r7, #7
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b25b      	sxtb	r3, r3
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	33c0      	adds	r3, #192	; 0xc0
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	501a      	str	r2, [r3, r0]
}
 8001ebc:	46c0      	nop			; (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b003      	add	sp, #12
 8001ec2:	bd90      	pop	{r4, r7, pc}
 8001ec4:	e000ed00 	.word	0xe000ed00
 8001ec8:	e000e100 	.word	0xe000e100

08001ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	4a0c      	ldr	r2, [pc, #48]	; (8001f0c <SysTick_Config+0x40>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e010      	b.n	8001f04 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <SysTick_Config+0x44>)
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	3a01      	subs	r2, #1
 8001ee8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eea:	2301      	movs	r3, #1
 8001eec:	425b      	negs	r3, r3
 8001eee:	2103      	movs	r1, #3
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f7ff ff7d 	bl	8001df0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <SysTick_Config+0x44>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <SysTick_Config+0x44>)
 8001efe:	2207      	movs	r2, #7
 8001f00:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	00ffffff 	.word	0x00ffffff
 8001f10:	e000e010 	.word	0xe000e010

08001f14 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	210f      	movs	r1, #15
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	1c02      	adds	r2, r0, #0
 8001f24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	187b      	adds	r3, r7, r1
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	b25b      	sxtb	r3, r3
 8001f2e:	0011      	movs	r1, r2
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7ff ff5d 	bl	8001df0 <NVIC_SetPriority>
}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b004      	add	sp, #16
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	0002      	movs	r2, r0
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f4a:	1dfb      	adds	r3, r7, #7
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b25b      	sxtb	r3, r3
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7ff ff37 	bl	8001dc4 <NVIC_EnableIRQ>
}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b002      	add	sp, #8
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f7ff ffaf 	bl	8001ecc <SysTick_Config>
 8001f6e:	0003      	movs	r3, r0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f80:	230f      	movs	r3, #15
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2221      	movs	r2, #33	; 0x21
 8001f8c:	5c9b      	ldrb	r3, [r3, r2]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d007      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2204      	movs	r2, #4
 8001f98:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f9a:	230f      	movs	r3, #15
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
 8001fa2:	e028      	b.n	8001ff6 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	210e      	movs	r1, #14
 8001fb0:	438a      	bics	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	438a      	bics	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	2101      	movs	r1, #1
 8001fce:	4091      	lsls	r1, r2
 8001fd0:	000a      	movs	r2, r1
 8001fd2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2221      	movs	r2, #33	; 0x21
 8001fd8:	2101      	movs	r1, #1
 8001fda:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d004      	beq.n	8001ff6 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	0010      	movs	r0, r2
 8001ff4:	4798      	blx	r3
    } 
  }
  return status;
 8001ff6:	230f      	movs	r3, #15
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	781b      	ldrb	r3, [r3, #0]
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b004      	add	sp, #16
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800201a:	e14f      	b.n	80022bc <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2101      	movs	r1, #1
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4091      	lsls	r1, r2
 8002026:	000a      	movs	r2, r1
 8002028:	4013      	ands	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d100      	bne.n	8002034 <HAL_GPIO_Init+0x30>
 8002032:	e140      	b.n	80022b6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x40>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b12      	cmp	r3, #18
 8002042:	d123      	bne.n	800208c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	08da      	lsrs	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3208      	adds	r2, #8
 800204c:	0092      	lsls	r2, r2, #2
 800204e:	58d3      	ldr	r3, [r2, r3]
 8002050:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2207      	movs	r2, #7
 8002056:	4013      	ands	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	409a      	lsls	r2, r3
 800205e:	0013      	movs	r3, r2
 8002060:	43da      	mvns	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2107      	movs	r1, #7
 8002070:	400b      	ands	r3, r1
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	409a      	lsls	r2, r3
 8002076:	0013      	movs	r3, r2
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	08da      	lsrs	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3208      	adds	r2, #8
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	6939      	ldr	r1, [r7, #16]
 800208a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	409a      	lsls	r2, r3
 800209a:	0013      	movs	r3, r2
 800209c:	43da      	mvns	r2, r3
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2203      	movs	r2, #3
 80020aa:	401a      	ands	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	409a      	lsls	r2, r3
 80020b2:	0013      	movs	r3, r2
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d00b      	beq.n	80020e0 <HAL_GPIO_Init+0xdc>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d007      	beq.n	80020e0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020d4:	2b11      	cmp	r3, #17
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b12      	cmp	r3, #18
 80020de:	d130      	bne.n	8002142 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	409a      	lsls	r2, r3
 80020ee:	0013      	movs	r3, r2
 80020f0:	43da      	mvns	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	409a      	lsls	r2, r3
 8002102:	0013      	movs	r3, r2
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002116:	2201      	movs	r2, #1
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	409a      	lsls	r2, r3
 800211c:	0013      	movs	r3, r2
 800211e:	43da      	mvns	r2, r3
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	2201      	movs	r2, #1
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
 8002134:	0013      	movs	r3, r2
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	409a      	lsls	r2, r3
 8002150:	0013      	movs	r3, r2
 8002152:	43da      	mvns	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	409a      	lsls	r2, r3
 8002164:	0013      	movs	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	055b      	lsls	r3, r3, #21
 800217a:	4013      	ands	r3, r2
 800217c:	d100      	bne.n	8002180 <HAL_GPIO_Init+0x17c>
 800217e:	e09a      	b.n	80022b6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002180:	4b54      	ldr	r3, [pc, #336]	; (80022d4 <HAL_GPIO_Init+0x2d0>)
 8002182:	699a      	ldr	r2, [r3, #24]
 8002184:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <HAL_GPIO_Init+0x2d0>)
 8002186:	2101      	movs	r1, #1
 8002188:	430a      	orrs	r2, r1
 800218a:	619a      	str	r2, [r3, #24]
 800218c:	4b51      	ldr	r3, [pc, #324]	; (80022d4 <HAL_GPIO_Init+0x2d0>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2201      	movs	r2, #1
 8002192:	4013      	ands	r3, r2
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8002198:	4a4f      	ldr	r2, [pc, #316]	; (80022d8 <HAL_GPIO_Init+0x2d4>)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	589b      	ldr	r3, [r3, r2]
 80021a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2203      	movs	r2, #3
 80021aa:	4013      	ands	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	220f      	movs	r2, #15
 80021b0:	409a      	lsls	r2, r3
 80021b2:	0013      	movs	r3, r2
 80021b4:	43da      	mvns	r2, r3
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	2390      	movs	r3, #144	; 0x90
 80021c0:	05db      	lsls	r3, r3, #23
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d013      	beq.n	80021ee <HAL_GPIO_Init+0x1ea>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a44      	ldr	r2, [pc, #272]	; (80022dc <HAL_GPIO_Init+0x2d8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00d      	beq.n	80021ea <HAL_GPIO_Init+0x1e6>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a43      	ldr	r2, [pc, #268]	; (80022e0 <HAL_GPIO_Init+0x2dc>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <HAL_GPIO_Init+0x1e2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a42      	ldr	r2, [pc, #264]	; (80022e4 <HAL_GPIO_Init+0x2e0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d101      	bne.n	80021e2 <HAL_GPIO_Init+0x1de>
 80021de:	2303      	movs	r3, #3
 80021e0:	e006      	b.n	80021f0 <HAL_GPIO_Init+0x1ec>
 80021e2:	2305      	movs	r3, #5
 80021e4:	e004      	b.n	80021f0 <HAL_GPIO_Init+0x1ec>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e002      	b.n	80021f0 <HAL_GPIO_Init+0x1ec>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_GPIO_Init+0x1ec>
 80021ee:	2300      	movs	r3, #0
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	2103      	movs	r1, #3
 80021f4:	400a      	ands	r2, r1
 80021f6:	0092      	lsls	r2, r2, #2
 80021f8:	4093      	lsls	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002200:	4935      	ldr	r1, [pc, #212]	; (80022d8 <HAL_GPIO_Init+0x2d4>)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <HAL_GPIO_Init+0x2e4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	43da      	mvns	r2, r3
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	025b      	lsls	r3, r3, #9
 8002226:	4013      	ands	r3, r2
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002232:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <HAL_GPIO_Init+0x2e4>)
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002238:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_GPIO_Init+0x2e4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	43da      	mvns	r2, r3
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	029b      	lsls	r3, r3, #10
 8002250:	4013      	ands	r3, r2
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800225c:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <HAL_GPIO_Init+0x2e4>)
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002262:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <HAL_GPIO_Init+0x2e4>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	43da      	mvns	r2, r3
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	035b      	lsls	r3, r3, #13
 800227a:	4013      	ands	r3, r2
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_GPIO_Init+0x2e4>)
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800228c:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <HAL_GPIO_Init+0x2e4>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	43da      	mvns	r2, r3
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	039b      	lsls	r3, r3, #14
 80022a4:	4013      	ands	r3, r2
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022b0:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_GPIO_Init+0x2e4>)
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	40da      	lsrs	r2, r3
 80022c4:	1e13      	subs	r3, r2, #0
 80022c6:	d000      	beq.n	80022ca <HAL_GPIO_Init+0x2c6>
 80022c8:	e6a8      	b.n	800201c <HAL_GPIO_Init+0x18>
  } 
}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b006      	add	sp, #24
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010000 	.word	0x40010000
 80022dc:	48000400 	.word	0x48000400
 80022e0:	48000800 	.word	0x48000800
 80022e4:	48000c00 	.word	0x48000c00
 80022e8:	40010400 	.word	0x40010400

080022ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	0008      	movs	r0, r1
 80022f6:	0011      	movs	r1, r2
 80022f8:	1cbb      	adds	r3, r7, #2
 80022fa:	1c02      	adds	r2, r0, #0
 80022fc:	801a      	strh	r2, [r3, #0]
 80022fe:	1c7b      	adds	r3, r7, #1
 8002300:	1c0a      	adds	r2, r1, #0
 8002302:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002304:	1c7b      	adds	r3, r7, #1
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d004      	beq.n	8002316 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800230c:	1cbb      	adds	r3, r7, #2
 800230e:	881a      	ldrh	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002314:	e003      	b.n	800231e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002316:	1cbb      	adds	r3, r7, #2
 8002318:	881a      	ldrh	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	b002      	add	sp, #8
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	000a      	movs	r2, r1
 8002330:	1cbb      	adds	r3, r7, #2
 8002332:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	1cbb      	adds	r3, r7, #2
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	405a      	eors	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	615a      	str	r2, [r3, #20]
}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	46bd      	mov	sp, r7
 8002346:	b002      	add	sp, #8
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	0002      	movs	r2, r0
 8002354:	1dbb      	adds	r3, r7, #6
 8002356:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	1dba      	adds	r2, r7, #6
 800235e:	8812      	ldrh	r2, [r2, #0]
 8002360:	4013      	ands	r3, r2
 8002362:	d008      	beq.n	8002376 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002366:	1dba      	adds	r2, r7, #6
 8002368:	8812      	ldrh	r2, [r2, #0]
 800236a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800236c:	1dbb      	adds	r3, r7, #6
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	0018      	movs	r0, r3
 8002372:	f003 fb9d 	bl	8005ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	46bd      	mov	sp, r7
 800237a:	b002      	add	sp, #8
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	40010400 	.word	0x40010400

08002384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e082      	b.n	800249c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2241      	movs	r2, #65	; 0x41
 800239a:	5c9b      	ldrb	r3, [r3, r2]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d107      	bne.n	80023b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2240      	movs	r2, #64	; 0x40
 80023a6:	2100      	movs	r1, #0
 80023a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f003 fc95 	bl	8005cdc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2241      	movs	r2, #65	; 0x41
 80023b6:	2124      	movs	r1, #36	; 0x24
 80023b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2101      	movs	r1, #1
 80023c6:	438a      	bics	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4934      	ldr	r1, [pc, #208]	; (80024a4 <HAL_I2C_Init+0x120>)
 80023d4:	400a      	ands	r2, r1
 80023d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4931      	ldr	r1, [pc, #196]	; (80024a8 <HAL_I2C_Init+0x124>)
 80023e4:	400a      	ands	r2, r1
 80023e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d108      	bne.n	8002402 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2180      	movs	r1, #128	; 0x80
 80023fa:	0209      	lsls	r1, r1, #8
 80023fc:	430a      	orrs	r2, r1
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	e007      	b.n	8002412 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2184      	movs	r1, #132	; 0x84
 800240c:	0209      	lsls	r1, r1, #8
 800240e:	430a      	orrs	r2, r1
 8002410:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d104      	bne.n	8002424 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	0112      	lsls	r2, r2, #4
 8002422:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	491f      	ldr	r1, [pc, #124]	; (80024ac <HAL_I2C_Init+0x128>)
 8002430:	430a      	orrs	r2, r1
 8002432:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	491a      	ldr	r1, [pc, #104]	; (80024a8 <HAL_I2C_Init+0x124>)
 8002440:	400a      	ands	r2, r1
 8002442:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	431a      	orrs	r2, r3
 800244e:	0011      	movs	r1, r2
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	021a      	lsls	r2, r3, #8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69d9      	ldr	r1, [r3, #28]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1a      	ldr	r2, [r3, #32]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2101      	movs	r1, #1
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2241      	movs	r2, #65	; 0x41
 8002488:	2120      	movs	r1, #32
 800248a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2242      	movs	r2, #66	; 0x42
 8002496:	2100      	movs	r1, #0
 8002498:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	0018      	movs	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	b002      	add	sp, #8
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	f0ffffff 	.word	0xf0ffffff
 80024a8:	ffff7fff 	.word	0xffff7fff
 80024ac:	02008000 	.word	0x02008000

080024b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	000c      	movs	r4, r1
 80024ba:	0010      	movs	r0, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	230a      	movs	r3, #10
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	1c22      	adds	r2, r4, #0
 80024c4:	801a      	strh	r2, [r3, #0]
 80024c6:	2308      	movs	r3, #8
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	1c02      	adds	r2, r0, #0
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	1dbb      	adds	r3, r7, #6
 80024d0:	1c0a      	adds	r2, r1, #0
 80024d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2241      	movs	r2, #65	; 0x41
 80024dc:	5c9b      	ldrb	r3, [r3, r2]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d000      	beq.n	80024e6 <HAL_I2C_Mem_Write+0x36>
 80024e4:	e11c      	b.n	8002720 <HAL_I2C_Mem_Write+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <HAL_I2C_Mem_Write+0x46>
 80024ec:	232c      	movs	r3, #44	; 0x2c
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_I2C_Mem_Write+0x4a>
    {
      return  HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e113      	b.n	8002722 <HAL_I2C_Mem_Write+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2240      	movs	r2, #64	; 0x40
 80024fe:	5c9b      	ldrb	r3, [r3, r2]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_I2C_Mem_Write+0x58>
 8002504:	2302      	movs	r3, #2
 8002506:	e10c      	b.n	8002722 <HAL_I2C_Mem_Write+0x272>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2240      	movs	r2, #64	; 0x40
 800250c:	2101      	movs	r1, #1
 800250e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002510:	f7ff fc30 	bl	8001d74 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	0219      	lsls	r1, r3, #8
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	2319      	movs	r3, #25
 8002524:	2201      	movs	r2, #1
 8002526:	f000 fb3f 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 800252a:	1e03      	subs	r3, r0, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Mem_Write+0x82>
    {
      return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e0f7      	b.n	8002722 <HAL_I2C_Mem_Write+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2241      	movs	r2, #65	; 0x41
 8002536:	2121      	movs	r1, #33	; 0x21
 8002538:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2242      	movs	r2, #66	; 0x42
 800253e:	2140      	movs	r1, #64	; 0x40
 8002540:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800254c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	222c      	movs	r2, #44	; 0x2c
 8002552:	18ba      	adds	r2, r7, r2
 8002554:	8812      	ldrh	r2, [r2, #0]
 8002556:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800255e:	1dbb      	adds	r3, r7, #6
 8002560:	881c      	ldrh	r4, [r3, #0]
 8002562:	2308      	movs	r3, #8
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	881a      	ldrh	r2, [r3, #0]
 8002568:	230a      	movs	r3, #10
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	8819      	ldrh	r1, [r3, #0]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	0023      	movs	r3, r4
 800257a:	f000 fa19 	bl	80029b0 <I2C_RequestMemoryWrite>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d00f      	beq.n	80025a2 <HAL_I2C_Mem_Write+0xf2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	2b04      	cmp	r3, #4
 8002588:	d105      	bne.n	8002596 <HAL_I2C_Mem_Write+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2240      	movs	r2, #64	; 0x40
 800258e:	2100      	movs	r1, #0
 8002590:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0c5      	b.n	8002722 <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2240      	movs	r2, #64	; 0x40
 800259a:	2100      	movs	r1, #0
 800259c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0bf      	b.n	8002722 <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2bff      	cmp	r3, #255	; 0xff
 80025aa:	d911      	bls.n	80025d0 <HAL_I2C_Mem_Write+0x120>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	22ff      	movs	r2, #255	; 0xff
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	045c      	lsls	r4, r3, #17
 80025bc:	230a      	movs	r3, #10
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	8819      	ldrh	r1, [r3, #0]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	2300      	movs	r3, #0
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	0023      	movs	r3, r4
 80025ca:	f000 fbff 	bl	8002dcc <I2C_TransferConfig>
 80025ce:	e012      	b.n	80025f6 <HAL_I2C_Mem_Write+0x146>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	049c      	lsls	r4, r3, #18
 80025e4:	230a      	movs	r3, #10
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	8819      	ldrh	r1, [r3, #0]
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	2300      	movs	r3, #0
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	0023      	movs	r3, r4
 80025f2:	f000 fbeb 	bl	8002dcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 fb0c 	bl	8002c1a <I2C_WaitOnTXISFlagUntilTimeout>
 8002602:	1e03      	subs	r3, r0, #0
 8002604:	d007      	beq.n	8002616 <HAL_I2C_Mem_Write+0x166>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	2b04      	cmp	r3, #4
 800260c:	d101      	bne.n	8002612 <HAL_I2C_Mem_Write+0x162>
        {
          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e087      	b.n	8002722 <HAL_I2C_Mem_Write+0x272>
        }
        else
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e085      	b.n	8002722 <HAL_I2C_Mem_Write+0x272>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	1c59      	adds	r1, r3, #1
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	6251      	str	r1, [r2, #36]	; 0x24
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002646:	2b00      	cmp	r3, #0
 8002648:	d13b      	bne.n	80026c2 <HAL_I2C_Mem_Write+0x212>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d036      	beq.n	80026c2 <HAL_I2C_Mem_Write+0x212>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	0013      	movs	r3, r2
 800265e:	2200      	movs	r2, #0
 8002660:	2180      	movs	r1, #128	; 0x80
 8002662:	f000 faa1 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002666:	1e03      	subs	r3, r0, #0
 8002668:	d001      	beq.n	800266e <HAL_I2C_Mem_Write+0x1be>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e059      	b.n	8002722 <HAL_I2C_Mem_Write+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	2bff      	cmp	r3, #255	; 0xff
 8002676:	d911      	bls.n	800269c <HAL_I2C_Mem_Write+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	22ff      	movs	r2, #255	; 0xff
 800267c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002682:	b2da      	uxtb	r2, r3
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	045c      	lsls	r4, r3, #17
 8002688:	230a      	movs	r3, #10
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	8819      	ldrh	r1, [r3, #0]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	2300      	movs	r3, #0
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	0023      	movs	r3, r4
 8002696:	f000 fb99 	bl	8002dcc <I2C_TransferConfig>
 800269a:	e012      	b.n	80026c2 <HAL_I2C_Mem_Write+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	049c      	lsls	r4, r3, #18
 80026b0:	230a      	movs	r3, #10
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	8819      	ldrh	r1, [r3, #0]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	2300      	movs	r3, #0
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	0023      	movs	r3, r4
 80026be:	f000 fb85 	bl	8002dcc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d194      	bne.n	80025f6 <HAL_I2C_Mem_Write+0x146>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 fae0 	bl	8002c98 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026d8:	1e03      	subs	r3, r0, #0
 80026da:	d007      	beq.n	80026ec <HAL_I2C_Mem_Write+0x23c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d101      	bne.n	80026e8 <HAL_I2C_Mem_Write+0x238>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e01c      	b.n	8002722 <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e01a      	b.n	8002722 <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2220      	movs	r2, #32
 80026f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	490b      	ldr	r1, [pc, #44]	; (800272c <HAL_I2C_Mem_Write+0x27c>)
 8002700:	400a      	ands	r2, r1
 8002702:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2241      	movs	r2, #65	; 0x41
 8002708:	2120      	movs	r1, #32
 800270a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2242      	movs	r2, #66	; 0x42
 8002710:	2100      	movs	r1, #0
 8002712:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2240      	movs	r2, #64	; 0x40
 8002718:	2100      	movs	r1, #0
 800271a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	e000      	b.n	8002722 <HAL_I2C_Mem_Write+0x272>
  }
  else
  {
    return HAL_BUSY;
 8002720:	2302      	movs	r3, #2
  }
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b007      	add	sp, #28
 8002728:	bd90      	pop	{r4, r7, pc}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	fe00e800 	.word	0xfe00e800

08002730 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	000c      	movs	r4, r1
 800273a:	0010      	movs	r0, r2
 800273c:	0019      	movs	r1, r3
 800273e:	230a      	movs	r3, #10
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	1c22      	adds	r2, r4, #0
 8002744:	801a      	strh	r2, [r3, #0]
 8002746:	2308      	movs	r3, #8
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	1c02      	adds	r2, r0, #0
 800274c:	801a      	strh	r2, [r3, #0]
 800274e:	1dbb      	adds	r3, r7, #6
 8002750:	1c0a      	adds	r2, r1, #0
 8002752:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2241      	movs	r2, #65	; 0x41
 800275c:	5c9b      	ldrb	r3, [r3, r2]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b20      	cmp	r3, #32
 8002762:	d000      	beq.n	8002766 <HAL_I2C_Mem_Read+0x36>
 8002764:	e11c      	b.n	80029a0 <HAL_I2C_Mem_Read+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	2b00      	cmp	r3, #0
 800276a:	d004      	beq.n	8002776 <HAL_I2C_Mem_Read+0x46>
 800276c:	232c      	movs	r3, #44	; 0x2c
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_I2C_Mem_Read+0x4a>
    {
      return  HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e113      	b.n	80029a2 <HAL_I2C_Mem_Read+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	5c9b      	ldrb	r3, [r3, r2]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_I2C_Mem_Read+0x58>
 8002784:	2302      	movs	r3, #2
 8002786:	e10c      	b.n	80029a2 <HAL_I2C_Mem_Read+0x272>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2240      	movs	r2, #64	; 0x40
 800278c:	2101      	movs	r1, #1
 800278e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002790:	f7ff faf0 	bl	8001d74 <HAL_GetTick>
 8002794:	0003      	movs	r3, r0
 8002796:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	0219      	lsls	r1, r3, #8
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2319      	movs	r3, #25
 80027a4:	2201      	movs	r2, #1
 80027a6:	f000 f9ff 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 80027aa:	1e03      	subs	r3, r0, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Mem_Read+0x82>
    {
      return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0f7      	b.n	80029a2 <HAL_I2C_Mem_Read+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2241      	movs	r2, #65	; 0x41
 80027b6:	2122      	movs	r1, #34	; 0x22
 80027b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2242      	movs	r2, #66	; 0x42
 80027be:	2140      	movs	r1, #64	; 0x40
 80027c0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	222c      	movs	r2, #44	; 0x2c
 80027d2:	18ba      	adds	r2, r7, r2
 80027d4:	8812      	ldrh	r2, [r2, #0]
 80027d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027de:	1dbb      	adds	r3, r7, #6
 80027e0:	881c      	ldrh	r4, [r3, #0]
 80027e2:	2308      	movs	r3, #8
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	881a      	ldrh	r2, [r3, #0]
 80027e8:	230a      	movs	r3, #10
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	8819      	ldrh	r1, [r3, #0]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	0023      	movs	r3, r4
 80027fa:	f000 f947 	bl	8002a8c <I2C_RequestMemoryRead>
 80027fe:	1e03      	subs	r3, r0, #0
 8002800:	d00f      	beq.n	8002822 <HAL_I2C_Mem_Read+0xf2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	2b04      	cmp	r3, #4
 8002808:	d105      	bne.n	8002816 <HAL_I2C_Mem_Read+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2240      	movs	r2, #64	; 0x40
 800280e:	2100      	movs	r1, #0
 8002810:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e0c5      	b.n	80029a2 <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2240      	movs	r2, #64	; 0x40
 800281a:	2100      	movs	r1, #0
 800281c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e0bf      	b.n	80029a2 <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	2bff      	cmp	r3, #255	; 0xff
 800282a:	d912      	bls.n	8002852 <HAL_I2C_Mem_Read+0x122>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	22ff      	movs	r2, #255	; 0xff
 8002830:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	b2da      	uxtb	r2, r3
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	045c      	lsls	r4, r3, #17
 800283c:	230a      	movs	r3, #10
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	8819      	ldrh	r1, [r3, #0]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	2390      	movs	r3, #144	; 0x90
 8002846:	019b      	lsls	r3, r3, #6
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	0023      	movs	r3, r4
 800284c:	f000 fabe 	bl	8002dcc <I2C_TransferConfig>
 8002850:	e013      	b.n	800287a <HAL_I2C_Mem_Read+0x14a>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002860:	b2da      	uxtb	r2, r3
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	049c      	lsls	r4, r3, #18
 8002866:	230a      	movs	r3, #10
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	8819      	ldrh	r1, [r3, #0]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	2390      	movs	r3, #144	; 0x90
 8002870:	019b      	lsls	r3, r3, #6
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	0023      	movs	r3, r4
 8002876:	f000 faa9 	bl	8002dcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800287a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	0013      	movs	r3, r2
 8002884:	2200      	movs	r2, #0
 8002886:	2104      	movs	r1, #4
 8002888:	f000 f98e 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 800288c:	1e03      	subs	r3, r0, #0
 800288e:	d001      	beq.n	8002894 <HAL_I2C_Mem_Read+0x164>
      {
        return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e086      	b.n	80029a2 <HAL_I2C_Mem_Read+0x272>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	1c59      	adds	r1, r3, #1
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	6251      	str	r1, [r2, #36]	; 0x24
 80028a4:	b2c2      	uxtb	r2, r0
 80028a6:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d13b      	bne.n	8002942 <HAL_I2C_Mem_Read+0x212>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d036      	beq.n	8002942 <HAL_I2C_Mem_Read+0x212>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	0013      	movs	r3, r2
 80028de:	2200      	movs	r2, #0
 80028e0:	2180      	movs	r1, #128	; 0x80
 80028e2:	f000 f961 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d001      	beq.n	80028ee <HAL_I2C_Mem_Read+0x1be>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e059      	b.n	80029a2 <HAL_I2C_Mem_Read+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2bff      	cmp	r3, #255	; 0xff
 80028f6:	d911      	bls.n	800291c <HAL_I2C_Mem_Read+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	22ff      	movs	r2, #255	; 0xff
 80028fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002902:	b2da      	uxtb	r2, r3
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	045c      	lsls	r4, r3, #17
 8002908:	230a      	movs	r3, #10
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	8819      	ldrh	r1, [r3, #0]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	2300      	movs	r3, #0
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	0023      	movs	r3, r4
 8002916:	f000 fa59 	bl	8002dcc <I2C_TransferConfig>
 800291a:	e012      	b.n	8002942 <HAL_I2C_Mem_Read+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	b2da      	uxtb	r2, r3
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	049c      	lsls	r4, r3, #18
 8002930:	230a      	movs	r3, #10
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	8819      	ldrh	r1, [r3, #0]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	2300      	movs	r3, #0
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	0023      	movs	r3, r4
 800293e:	f000 fa45 	bl	8002dcc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d196      	bne.n	800287a <HAL_I2C_Mem_Read+0x14a>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	0018      	movs	r0, r3
 8002954:	f000 f9a0 	bl	8002c98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002958:	1e03      	subs	r3, r0, #0
 800295a:	d007      	beq.n	800296c <HAL_I2C_Mem_Read+0x23c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002960:	2b04      	cmp	r3, #4
 8002962:	d101      	bne.n	8002968 <HAL_I2C_Mem_Read+0x238>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e01c      	b.n	80029a2 <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e01a      	b.n	80029a2 <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2220      	movs	r2, #32
 8002972:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	490b      	ldr	r1, [pc, #44]	; (80029ac <HAL_I2C_Mem_Read+0x27c>)
 8002980:	400a      	ands	r2, r1
 8002982:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2241      	movs	r2, #65	; 0x41
 8002988:	2120      	movs	r1, #32
 800298a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2242      	movs	r2, #66	; 0x42
 8002990:	2100      	movs	r1, #0
 8002992:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2240      	movs	r2, #64	; 0x40
 8002998:	2100      	movs	r1, #0
 800299a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	e000      	b.n	80029a2 <HAL_I2C_Mem_Read+0x272>
  }
  else
  {
    return HAL_BUSY;
 80029a0:	2302      	movs	r3, #2
  }
}
 80029a2:	0018      	movs	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b007      	add	sp, #28
 80029a8:	bd90      	pop	{r4, r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	fe00e800 	.word	0xfe00e800

080029b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	000c      	movs	r4, r1
 80029ba:	0010      	movs	r0, r2
 80029bc:	0019      	movs	r1, r3
 80029be:	250a      	movs	r5, #10
 80029c0:	197b      	adds	r3, r7, r5
 80029c2:	1c22      	adds	r2, r4, #0
 80029c4:	801a      	strh	r2, [r3, #0]
 80029c6:	2308      	movs	r3, #8
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	1c02      	adds	r2, r0, #0
 80029cc:	801a      	strh	r2, [r3, #0]
 80029ce:	1dbb      	adds	r3, r7, #6
 80029d0:	1c0a      	adds	r2, r1, #0
 80029d2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029d4:	1dbb      	adds	r3, r7, #6
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	045c      	lsls	r4, r3, #17
 80029de:	197b      	adds	r3, r7, r5
 80029e0:	8819      	ldrh	r1, [r3, #0]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	019b      	lsls	r3, r3, #6
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	0023      	movs	r3, r4
 80029ec:	f000 f9ee 	bl	8002dcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f2:	6a39      	ldr	r1, [r7, #32]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	0018      	movs	r0, r3
 80029f8:	f000 f90f 	bl	8002c1a <I2C_WaitOnTXISFlagUntilTimeout>
 80029fc:	1e03      	subs	r3, r0, #0
 80029fe:	d007      	beq.n	8002a10 <I2C_RequestMemoryWrite+0x60>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d101      	bne.n	8002a0c <I2C_RequestMemoryWrite+0x5c>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e03b      	b.n	8002a84 <I2C_RequestMemoryWrite+0xd4>
    }
    else
    {
      return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e039      	b.n	8002a84 <I2C_RequestMemoryWrite+0xd4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a10:	1dbb      	adds	r3, r7, #6
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d107      	bne.n	8002a28 <I2C_RequestMemoryWrite+0x78>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a18:	2308      	movs	r3, #8
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	629a      	str	r2, [r3, #40]	; 0x28
 8002a26:	e01f      	b.n	8002a68 <I2C_RequestMemoryWrite+0xb8>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a28:	2308      	movs	r3, #8
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3c:	6a39      	ldr	r1, [r7, #32]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f000 f8ea 	bl	8002c1a <I2C_WaitOnTXISFlagUntilTimeout>
 8002a46:	1e03      	subs	r3, r0, #0
 8002a48:	d007      	beq.n	8002a5a <I2C_RequestMemoryWrite+0xaa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d101      	bne.n	8002a56 <I2C_RequestMemoryWrite+0xa6>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e016      	b.n	8002a84 <I2C_RequestMemoryWrite+0xd4>
      }
      else
      {
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e014      	b.n	8002a84 <I2C_RequestMemoryWrite+0xd4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a68:	6a3a      	ldr	r2, [r7, #32]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	0013      	movs	r3, r2
 8002a72:	2200      	movs	r2, #0
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	f000 f897 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002a7a:	1e03      	subs	r3, r0, #0
 8002a7c:	d001      	beq.n	8002a82 <I2C_RequestMemoryWrite+0xd2>
  {
    return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e000      	b.n	8002a84 <I2C_RequestMemoryWrite+0xd4>
  }

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b004      	add	sp, #16
 8002a8a:	bdb0      	pop	{r4, r5, r7, pc}

08002a8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b5b0      	push	{r4, r5, r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	000c      	movs	r4, r1
 8002a96:	0010      	movs	r0, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	250a      	movs	r5, #10
 8002a9c:	197b      	adds	r3, r7, r5
 8002a9e:	1c22      	adds	r2, r4, #0
 8002aa0:	801a      	strh	r2, [r3, #0]
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	1c02      	adds	r2, r0, #0
 8002aa8:	801a      	strh	r2, [r3, #0]
 8002aaa:	1dbb      	adds	r3, r7, #6
 8002aac:	1c0a      	adds	r2, r1, #0
 8002aae:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ab0:	1dbb      	adds	r3, r7, #6
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	197b      	adds	r3, r7, r5
 8002ab8:	8819      	ldrh	r1, [r3, #0]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	019b      	lsls	r3, r3, #6
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f000 f982 	bl	8002dcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aca:	6a39      	ldr	r1, [r7, #32]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 f8a3 	bl	8002c1a <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad4:	1e03      	subs	r3, r0, #0
 8002ad6:	d007      	beq.n	8002ae8 <I2C_RequestMemoryRead+0x5c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d101      	bne.n	8002ae4 <I2C_RequestMemoryRead+0x58>
    {
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e03b      	b.n	8002b5c <I2C_RequestMemoryRead+0xd0>
    }
    else
    {
      return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e039      	b.n	8002b5c <I2C_RequestMemoryRead+0xd0>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ae8:	1dbb      	adds	r3, r7, #6
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d107      	bne.n	8002b00 <I2C_RequestMemoryRead+0x74>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002af0:	2308      	movs	r3, #8
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
 8002afe:	e01f      	b.n	8002b40 <I2C_RequestMemoryRead+0xb4>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b00:	2308      	movs	r3, #8
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	6a39      	ldr	r1, [r7, #32]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 f87e 	bl	8002c1a <I2C_WaitOnTXISFlagUntilTimeout>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d007      	beq.n	8002b32 <I2C_RequestMemoryRead+0xa6>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d101      	bne.n	8002b2e <I2C_RequestMemoryRead+0xa2>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e016      	b.n	8002b5c <I2C_RequestMemoryRead+0xd0>
      }
      else
      {
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e014      	b.n	8002b5c <I2C_RequestMemoryRead+0xd0>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b32:	2308      	movs	r3, #8
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b40:	6a3a      	ldr	r2, [r7, #32]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	0013      	movs	r3, r2
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2140      	movs	r1, #64	; 0x40
 8002b4e:	f000 f82b 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002b52:	1e03      	subs	r3, r0, #0
 8002b54:	d001      	beq.n	8002b5a <I2C_RequestMemoryRead+0xce>
  {
    return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e000      	b.n	8002b5c <I2C_RequestMemoryRead+0xd0>
  }

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b004      	add	sp, #16
 8002b62:	bdb0      	pop	{r4, r5, r7, pc}

08002b64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2202      	movs	r2, #2
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d103      	bne.n	8002b82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d007      	beq.n	8002ba0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	619a      	str	r2, [r3, #24]
  }
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	1dfb      	adds	r3, r7, #7
 8002bb6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb8:	e01b      	b.n	8002bf2 <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	d018      	beq.n	8002bf2 <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002bc6:	f7ff f8d5 	bl	8001d74 <HAL_GetTick>
 8002bca:	0002      	movs	r2, r0
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d20d      	bcs.n	8002bf2 <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2241      	movs	r2, #65	; 0x41
 8002bda:	2120      	movs	r1, #32
 8002bdc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2242      	movs	r2, #66	; 0x42
 8002be2:	2100      	movs	r1, #0
 8002be4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2240      	movs	r2, #64	; 0x40
 8002bea:	2100      	movs	r1, #0
 8002bec:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e00f      	b.n	8002c12 <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	425a      	negs	r2, r3
 8002c02:	4153      	adcs	r3, r2
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	001a      	movs	r2, r3
 8002c08:	1dfb      	adds	r3, r7, #7
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d0d4      	beq.n	8002bba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b004      	add	sp, #16
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c26:	e02b      	b.n	8002c80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f000 f86e 	bl	8002d10 <I2C_IsAcknowledgeFailed>
 8002c34:	1e03      	subs	r3, r0, #0
 8002c36:	d001      	beq.n	8002c3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e029      	b.n	8002c90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	d01e      	beq.n	8002c80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002c48:	f7ff f894 	bl	8001d74 <HAL_GetTick>
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d213      	bcs.n	8002c80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2241      	movs	r2, #65	; 0x41
 8002c68:	2120      	movs	r1, #32
 8002c6a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2242      	movs	r2, #66	; 0x42
 8002c70:	2100      	movs	r1, #0
 8002c72:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2240      	movs	r2, #64	; 0x40
 8002c78:	2100      	movs	r1, #0
 8002c7a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e007      	b.n	8002c90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2202      	movs	r2, #2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d1cc      	bne.n	8002c28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b004      	add	sp, #16
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ca4:	e028      	b.n	8002cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f000 f82f 	bl	8002d10 <I2C_IsAcknowledgeFailed>
 8002cb2:	1e03      	subs	r3, r0, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e026      	b.n	8002d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cc0:	f7ff f858 	bl	8001d74 <HAL_GetTick>
 8002cc4:	0002      	movs	r2, r0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d213      	bcs.n	8002cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2241      	movs	r2, #65	; 0x41
 8002ce0:	2120      	movs	r1, #32
 8002ce2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2242      	movs	r2, #66	; 0x42
 8002ce8:	2100      	movs	r1, #0
 8002cea:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2240      	movs	r2, #64	; 0x40
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e007      	b.n	8002d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d1cf      	bne.n	8002ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b004      	add	sp, #16
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	2210      	movs	r2, #16
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d148      	bne.n	8002dbc <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d2a:	e01b      	b.n	8002d64 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	d018      	beq.n	8002d64 <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d007      	beq.n	8002d48 <I2C_IsAcknowledgeFailed+0x38>
 8002d38:	f7ff f81c 	bl	8001d74 <HAL_GetTick>
 8002d3c:	0002      	movs	r2, r0
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d20d      	bcs.n	8002d64 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2241      	movs	r2, #65	; 0x41
 8002d4c:	2120      	movs	r1, #32
 8002d4e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2242      	movs	r2, #66	; 0x42
 8002d54:	2100      	movs	r1, #0
 8002d56:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2240      	movs	r2, #64	; 0x40
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e02c      	b.n	8002dbe <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b20      	cmp	r3, #32
 8002d70:	d1dc      	bne.n	8002d2c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2210      	movs	r2, #16
 8002d78:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7ff feed 	bl	8002b64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	490c      	ldr	r1, [pc, #48]	; (8002dc8 <I2C_IsAcknowledgeFailed+0xb8>)
 8002d96:	400a      	ands	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2241      	movs	r2, #65	; 0x41
 8002da4:	2120      	movs	r1, #32
 8002da6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2242      	movs	r2, #66	; 0x42
 8002dac:	2100      	movs	r1, #0
 8002dae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2240      	movs	r2, #64	; 0x40
 8002db4:	2100      	movs	r1, #0
 8002db6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	fe00e800 	.word	0xfe00e800

08002dcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	0008      	movs	r0, r1
 8002dd6:	0011      	movs	r1, r2
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	240a      	movs	r4, #10
 8002ddc:	193b      	adds	r3, r7, r4
 8002dde:	1c02      	adds	r2, r0, #0
 8002de0:	801a      	strh	r2, [r3, #0]
 8002de2:	2009      	movs	r0, #9
 8002de4:	183b      	adds	r3, r7, r0
 8002de6:	1c0a      	adds	r2, r1, #0
 8002de8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <I2C_TransferConfig+0x68>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002dfe:	193b      	adds	r3, r7, r4
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	059b      	lsls	r3, r3, #22
 8002e04:	0d9a      	lsrs	r2, r3, #22
 8002e06:	183b      	adds	r3, r7, r0
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	0419      	lsls	r1, r3, #16
 8002e0c:	23ff      	movs	r3, #255	; 0xff
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	400b      	ands	r3, r1
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	605a      	str	r2, [r3, #4]
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b007      	add	sp, #28
 8002e30:	bd90      	pop	{r4, r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	fc009800 	.word	0xfc009800

08002e38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2241      	movs	r2, #65	; 0x41
 8002e46:	5c9b      	ldrb	r3, [r3, r2]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d138      	bne.n	8002ec0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2240      	movs	r2, #64	; 0x40
 8002e52:	5c9b      	ldrb	r3, [r3, r2]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e032      	b.n	8002ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2240      	movs	r2, #64	; 0x40
 8002e60:	2101      	movs	r1, #1
 8002e62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2241      	movs	r2, #65	; 0x41
 8002e68:	2124      	movs	r1, #36	; 0x24
 8002e6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2101      	movs	r1, #1
 8002e78:	438a      	bics	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4911      	ldr	r1, [pc, #68]	; (8002ecc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002e88:	400a      	ands	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2241      	movs	r2, #65	; 0x41
 8002eb0:	2120      	movs	r1, #32
 8002eb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2240      	movs	r2, #64	; 0x40
 8002eb8:	2100      	movs	r1, #0
 8002eba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e000      	b.n	8002ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ec0:	2302      	movs	r3, #2
  }
}
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b002      	add	sp, #8
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	ffffefff 	.word	0xffffefff

08002ed0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2241      	movs	r2, #65	; 0x41
 8002ee2:	5c9b      	ldrb	r3, [r3, r2]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d139      	bne.n	8002f5e <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2240      	movs	r2, #64	; 0x40
 8002eee:	5c9b      	ldrb	r3, [r3, r2]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e033      	b.n	8002f60 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2240      	movs	r2, #64	; 0x40
 8002efc:	2101      	movs	r1, #1
 8002efe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2241      	movs	r2, #65	; 0x41
 8002f04:	2124      	movs	r1, #36	; 0x24
 8002f06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2101      	movs	r1, #1
 8002f14:	438a      	bics	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4a11      	ldr	r2, [pc, #68]	; (8002f68 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2101      	movs	r1, #1
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2241      	movs	r2, #65	; 0x41
 8002f4e:	2120      	movs	r1, #32
 8002f50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2240      	movs	r2, #64	; 0x40
 8002f56:	2100      	movs	r1, #0
 8002f58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
  }
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b004      	add	sp, #16
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	fffff0ff 	.word	0xfffff0ff

08002f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d100      	bne.n	8002f84 <HAL_RCC_OscConfig+0x18>
 8002f82:	e08d      	b.n	80030a0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f84:	4bc3      	ldr	r3, [pc, #780]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	220c      	movs	r2, #12
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d00e      	beq.n	8002fae <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f90:	4bc0      	ldr	r3, [pc, #768]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	220c      	movs	r2, #12
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d116      	bne.n	8002fca <HAL_RCC_OscConfig+0x5e>
 8002f9c:	4bbd      	ldr	r3, [pc, #756]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	025b      	lsls	r3, r3, #9
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	025b      	lsls	r3, r3, #9
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d10d      	bne.n	8002fca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fae:	4bb9      	ldr	r3, [pc, #740]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	029b      	lsls	r3, r3, #10
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d100      	bne.n	8002fbc <HAL_RCC_OscConfig+0x50>
 8002fba:	e070      	b.n	800309e <HAL_RCC_OscConfig+0x132>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d000      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x5a>
 8002fc4:	e06b      	b.n	800309e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e2b6      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x76>
 8002fd2:	4bb0      	ldr	r3, [pc, #704]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4baf      	ldr	r3, [pc, #700]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8002fd8:	2180      	movs	r1, #128	; 0x80
 8002fda:	0249      	lsls	r1, r1, #9
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e02f      	b.n	8003042 <HAL_RCC_OscConfig+0xd6>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10c      	bne.n	8003004 <HAL_RCC_OscConfig+0x98>
 8002fea:	4baa      	ldr	r3, [pc, #680]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4ba9      	ldr	r3, [pc, #676]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8002ff0:	49a9      	ldr	r1, [pc, #676]	; (8003298 <HAL_RCC_OscConfig+0x32c>)
 8002ff2:	400a      	ands	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	4ba7      	ldr	r3, [pc, #668]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4ba6      	ldr	r3, [pc, #664]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8002ffc:	49a7      	ldr	r1, [pc, #668]	; (800329c <HAL_RCC_OscConfig+0x330>)
 8002ffe:	400a      	ands	r2, r1
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	e01e      	b.n	8003042 <HAL_RCC_OscConfig+0xd6>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b05      	cmp	r3, #5
 800300a:	d10e      	bne.n	800302a <HAL_RCC_OscConfig+0xbe>
 800300c:	4ba1      	ldr	r3, [pc, #644]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4ba0      	ldr	r3, [pc, #640]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	02c9      	lsls	r1, r1, #11
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	4b9e      	ldr	r3, [pc, #632]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4b9d      	ldr	r3, [pc, #628]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003020:	2180      	movs	r1, #128	; 0x80
 8003022:	0249      	lsls	r1, r1, #9
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e00b      	b.n	8003042 <HAL_RCC_OscConfig+0xd6>
 800302a:	4b9a      	ldr	r3, [pc, #616]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4b99      	ldr	r3, [pc, #612]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003030:	4999      	ldr	r1, [pc, #612]	; (8003298 <HAL_RCC_OscConfig+0x32c>)
 8003032:	400a      	ands	r2, r1
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	4b97      	ldr	r3, [pc, #604]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b96      	ldr	r3, [pc, #600]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 800303c:	4997      	ldr	r1, [pc, #604]	; (800329c <HAL_RCC_OscConfig+0x330>)
 800303e:	400a      	ands	r2, r1
 8003040:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d014      	beq.n	8003074 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fe fe93 	bl	8001d74 <HAL_GetTick>
 800304e:	0003      	movs	r3, r0
 8003050:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003054:	f7fe fe8e 	bl	8001d74 <HAL_GetTick>
 8003058:	0002      	movs	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	; 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e268      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b8b      	ldr	r3, [pc, #556]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	029b      	lsls	r3, r3, #10
 800306e:	4013      	ands	r3, r2
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0xe8>
 8003072:	e015      	b.n	80030a0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe fe7e 	bl	8001d74 <HAL_GetTick>
 8003078:	0003      	movs	r3, r0
 800307a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800307e:	f7fe fe79 	bl	8001d74 <HAL_GetTick>
 8003082:	0002      	movs	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b64      	cmp	r3, #100	; 0x64
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e253      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003090:	4b80      	ldr	r3, [pc, #512]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	029b      	lsls	r3, r3, #10
 8003098:	4013      	ands	r3, r2
 800309a:	d1f0      	bne.n	800307e <HAL_RCC_OscConfig+0x112>
 800309c:	e000      	b.n	80030a0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2202      	movs	r2, #2
 80030a6:	4013      	ands	r3, r2
 80030a8:	d100      	bne.n	80030ac <HAL_RCC_OscConfig+0x140>
 80030aa:	e069      	b.n	8003180 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80030ac:	4b79      	ldr	r3, [pc, #484]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	220c      	movs	r2, #12
 80030b2:	4013      	ands	r3, r2
 80030b4:	d00b      	beq.n	80030ce <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030b6:	4b77      	ldr	r3, [pc, #476]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	220c      	movs	r2, #12
 80030bc:	4013      	ands	r3, r2
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d11c      	bne.n	80030fc <HAL_RCC_OscConfig+0x190>
 80030c2:	4b74      	ldr	r3, [pc, #464]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	025b      	lsls	r3, r3, #9
 80030ca:	4013      	ands	r3, r2
 80030cc:	d116      	bne.n	80030fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ce:	4b71      	ldr	r3, [pc, #452]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2202      	movs	r2, #2
 80030d4:	4013      	ands	r3, r2
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_OscConfig+0x178>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e229      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b6b      	ldr	r3, [pc, #428]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	22f8      	movs	r2, #248	; 0xf8
 80030ea:	4393      	bics	r3, r2
 80030ec:	0019      	movs	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	00da      	lsls	r2, r3, #3
 80030f4:	4b67      	ldr	r3, [pc, #412]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 80030f6:	430a      	orrs	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	e041      	b.n	8003180 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d024      	beq.n	800314e <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003104:	4b63      	ldr	r3, [pc, #396]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b62      	ldr	r3, [pc, #392]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 800310a:	2101      	movs	r1, #1
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe fe30 	bl	8001d74 <HAL_GetTick>
 8003114:	0003      	movs	r3, r0
 8003116:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800311a:	f7fe fe2b 	bl	8001d74 <HAL_GetTick>
 800311e:	0002      	movs	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e205      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312c:	4b59      	ldr	r3, [pc, #356]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2202      	movs	r2, #2
 8003132:	4013      	ands	r3, r2
 8003134:	d0f1      	beq.n	800311a <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003136:	4b57      	ldr	r3, [pc, #348]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	22f8      	movs	r2, #248	; 0xf8
 800313c:	4393      	bics	r3, r2
 800313e:	0019      	movs	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	00da      	lsls	r2, r3, #3
 8003146:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003148:	430a      	orrs	r2, r1
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	e018      	b.n	8003180 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800314e:	4b51      	ldr	r3, [pc, #324]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b50      	ldr	r3, [pc, #320]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003154:	2101      	movs	r1, #1
 8003156:	438a      	bics	r2, r1
 8003158:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315a:	f7fe fe0b 	bl	8001d74 <HAL_GetTick>
 800315e:	0003      	movs	r3, r0
 8003160:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003164:	f7fe fe06 	bl	8001d74 <HAL_GetTick>
 8003168:	0002      	movs	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e1e0      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003176:	4b47      	ldr	r3, [pc, #284]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2202      	movs	r2, #2
 800317c:	4013      	ands	r3, r2
 800317e:	d1f1      	bne.n	8003164 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2208      	movs	r2, #8
 8003186:	4013      	ands	r3, r2
 8003188:	d036      	beq.n	80031f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d019      	beq.n	80031c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003192:	4b40      	ldr	r3, [pc, #256]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003196:	4b3f      	ldr	r3, [pc, #252]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003198:	2101      	movs	r1, #1
 800319a:	430a      	orrs	r2, r1
 800319c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319e:	f7fe fde9 	bl	8001d74 <HAL_GetTick>
 80031a2:	0003      	movs	r3, r0
 80031a4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a8:	f7fe fde4 	bl	8001d74 <HAL_GetTick>
 80031ac:	0002      	movs	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e1be      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ba:	4b36      	ldr	r3, [pc, #216]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	2202      	movs	r2, #2
 80031c0:	4013      	ands	r3, r2
 80031c2:	d0f1      	beq.n	80031a8 <HAL_RCC_OscConfig+0x23c>
 80031c4:	e018      	b.n	80031f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c6:	4b33      	ldr	r3, [pc, #204]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 80031c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ca:	4b32      	ldr	r3, [pc, #200]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 80031cc:	2101      	movs	r1, #1
 80031ce:	438a      	bics	r2, r1
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d2:	f7fe fdcf 	bl	8001d74 <HAL_GetTick>
 80031d6:	0003      	movs	r3, r0
 80031d8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031dc:	f7fe fdca 	bl	8001d74 <HAL_GetTick>
 80031e0:	0002      	movs	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e1a4      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ee:	4b29      	ldr	r3, [pc, #164]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2202      	movs	r2, #2
 80031f4:	4013      	ands	r3, r2
 80031f6:	d1f1      	bne.n	80031dc <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2204      	movs	r2, #4
 80031fe:	4013      	ands	r3, r2
 8003200:	d100      	bne.n	8003204 <HAL_RCC_OscConfig+0x298>
 8003202:	e0b5      	b.n	8003370 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003204:	2317      	movs	r3, #23
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320c:	4b21      	ldr	r3, [pc, #132]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	055b      	lsls	r3, r3, #21
 8003214:	4013      	ands	r3, r2
 8003216:	d111      	bne.n	800323c <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003218:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 800321a:	69da      	ldr	r2, [r3, #28]
 800321c:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 800321e:	2180      	movs	r1, #128	; 0x80
 8003220:	0549      	lsls	r1, r1, #21
 8003222:	430a      	orrs	r2, r1
 8003224:	61da      	str	r2, [r3, #28]
 8003226:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003228:	69da      	ldr	r2, [r3, #28]
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	055b      	lsls	r3, r3, #21
 800322e:	4013      	ands	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003234:	2317      	movs	r3, #23
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323c:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <HAL_RCC_OscConfig+0x334>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4013      	ands	r3, r2
 8003246:	d11a      	bne.n	800327e <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003248:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <HAL_RCC_OscConfig+0x334>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <HAL_RCC_OscConfig+0x334>)
 800324e:	2180      	movs	r1, #128	; 0x80
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	430a      	orrs	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003256:	f7fe fd8d 	bl	8001d74 <HAL_GetTick>
 800325a:	0003      	movs	r3, r0
 800325c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003260:	f7fe fd88 	bl	8001d74 <HAL_GetTick>
 8003264:	0002      	movs	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e162      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_RCC_OscConfig+0x334>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4013      	ands	r3, r2
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d10e      	bne.n	80032a4 <HAL_RCC_OscConfig+0x338>
 8003286:	4b03      	ldr	r3, [pc, #12]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 8003288:	6a1a      	ldr	r2, [r3, #32]
 800328a:	4b02      	ldr	r3, [pc, #8]	; (8003294 <HAL_RCC_OscConfig+0x328>)
 800328c:	2101      	movs	r1, #1
 800328e:	430a      	orrs	r2, r1
 8003290:	621a      	str	r2, [r3, #32]
 8003292:	e035      	b.n	8003300 <HAL_RCC_OscConfig+0x394>
 8003294:	40021000 	.word	0x40021000
 8003298:	fffeffff 	.word	0xfffeffff
 800329c:	fffbffff 	.word	0xfffbffff
 80032a0:	40007000 	.word	0x40007000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10c      	bne.n	80032c6 <HAL_RCC_OscConfig+0x35a>
 80032ac:	4ba4      	ldr	r3, [pc, #656]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80032ae:	6a1a      	ldr	r2, [r3, #32]
 80032b0:	4ba3      	ldr	r3, [pc, #652]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80032b2:	2101      	movs	r1, #1
 80032b4:	438a      	bics	r2, r1
 80032b6:	621a      	str	r2, [r3, #32]
 80032b8:	4ba1      	ldr	r3, [pc, #644]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80032ba:	6a1a      	ldr	r2, [r3, #32]
 80032bc:	4ba0      	ldr	r3, [pc, #640]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80032be:	2104      	movs	r1, #4
 80032c0:	438a      	bics	r2, r1
 80032c2:	621a      	str	r2, [r3, #32]
 80032c4:	e01c      	b.n	8003300 <HAL_RCC_OscConfig+0x394>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b05      	cmp	r3, #5
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x37c>
 80032ce:	4b9c      	ldr	r3, [pc, #624]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80032d0:	6a1a      	ldr	r2, [r3, #32]
 80032d2:	4b9b      	ldr	r3, [pc, #620]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80032d4:	2104      	movs	r1, #4
 80032d6:	430a      	orrs	r2, r1
 80032d8:	621a      	str	r2, [r3, #32]
 80032da:	4b99      	ldr	r3, [pc, #612]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80032dc:	6a1a      	ldr	r2, [r3, #32]
 80032de:	4b98      	ldr	r3, [pc, #608]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80032e0:	2101      	movs	r1, #1
 80032e2:	430a      	orrs	r2, r1
 80032e4:	621a      	str	r2, [r3, #32]
 80032e6:	e00b      	b.n	8003300 <HAL_RCC_OscConfig+0x394>
 80032e8:	4b95      	ldr	r3, [pc, #596]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80032ea:	6a1a      	ldr	r2, [r3, #32]
 80032ec:	4b94      	ldr	r3, [pc, #592]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80032ee:	2101      	movs	r1, #1
 80032f0:	438a      	bics	r2, r1
 80032f2:	621a      	str	r2, [r3, #32]
 80032f4:	4b92      	ldr	r3, [pc, #584]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80032f6:	6a1a      	ldr	r2, [r3, #32]
 80032f8:	4b91      	ldr	r3, [pc, #580]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80032fa:	2104      	movs	r1, #4
 80032fc:	438a      	bics	r2, r1
 80032fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d014      	beq.n	8003332 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003308:	f7fe fd34 	bl	8001d74 <HAL_GetTick>
 800330c:	0003      	movs	r3, r0
 800330e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003310:	e009      	b.n	8003326 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003312:	f7fe fd2f 	bl	8001d74 <HAL_GetTick>
 8003316:	0002      	movs	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	4a89      	ldr	r2, [pc, #548]	; (8003544 <HAL_RCC_OscConfig+0x5d8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e108      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003326:	4b86      	ldr	r3, [pc, #536]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	2202      	movs	r2, #2
 800332c:	4013      	ands	r3, r2
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x3a6>
 8003330:	e013      	b.n	800335a <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003332:	f7fe fd1f 	bl	8001d74 <HAL_GetTick>
 8003336:	0003      	movs	r3, r0
 8003338:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333a:	e009      	b.n	8003350 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fe fd1a 	bl	8001d74 <HAL_GetTick>
 8003340:	0002      	movs	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	4a7f      	ldr	r2, [pc, #508]	; (8003544 <HAL_RCC_OscConfig+0x5d8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e0f3      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003350:	4b7b      	ldr	r3, [pc, #492]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	2202      	movs	r2, #2
 8003356:	4013      	ands	r3, r2
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800335a:	2317      	movs	r3, #23
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d105      	bne.n	8003370 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003364:	4b76      	ldr	r3, [pc, #472]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 8003366:	69da      	ldr	r2, [r3, #28]
 8003368:	4b75      	ldr	r3, [pc, #468]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 800336a:	4977      	ldr	r1, [pc, #476]	; (8003548 <HAL_RCC_OscConfig+0x5dc>)
 800336c:	400a      	ands	r2, r1
 800336e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2210      	movs	r2, #16
 8003376:	4013      	ands	r3, r2
 8003378:	d063      	beq.n	8003442 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d12a      	bne.n	80033d8 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003382:	4b6f      	ldr	r3, [pc, #444]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 8003384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003386:	4b6e      	ldr	r3, [pc, #440]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 8003388:	2104      	movs	r1, #4
 800338a:	430a      	orrs	r2, r1
 800338c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800338e:	4b6c      	ldr	r3, [pc, #432]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 8003390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003392:	4b6b      	ldr	r3, [pc, #428]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 8003394:	2101      	movs	r1, #1
 8003396:	430a      	orrs	r2, r1
 8003398:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339a:	f7fe fceb 	bl	8001d74 <HAL_GetTick>
 800339e:	0003      	movs	r3, r0
 80033a0:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80033a4:	f7fe fce6 	bl	8001d74 <HAL_GetTick>
 80033a8:	0002      	movs	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0c0      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80033b6:	4b62      	ldr	r3, [pc, #392]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ba:	2202      	movs	r2, #2
 80033bc:	4013      	ands	r3, r2
 80033be:	d0f1      	beq.n	80033a4 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033c0:	4b5f      	ldr	r3, [pc, #380]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80033c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c4:	22f8      	movs	r2, #248	; 0xf8
 80033c6:	4393      	bics	r3, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	00da      	lsls	r2, r3, #3
 80033d0:	4b5b      	ldr	r3, [pc, #364]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80033d2:	430a      	orrs	r2, r1
 80033d4:	635a      	str	r2, [r3, #52]	; 0x34
 80033d6:	e034      	b.n	8003442 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	3305      	adds	r3, #5
 80033de:	d111      	bne.n	8003404 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80033e0:	4b57      	ldr	r3, [pc, #348]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80033e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e4:	4b56      	ldr	r3, [pc, #344]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80033e6:	2104      	movs	r1, #4
 80033e8:	438a      	bics	r2, r1
 80033ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033ec:	4b54      	ldr	r3, [pc, #336]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80033ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f0:	22f8      	movs	r2, #248	; 0xf8
 80033f2:	4393      	bics	r3, r2
 80033f4:	0019      	movs	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	00da      	lsls	r2, r3, #3
 80033fc:	4b50      	ldr	r3, [pc, #320]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80033fe:	430a      	orrs	r2, r1
 8003400:	635a      	str	r2, [r3, #52]	; 0x34
 8003402:	e01e      	b.n	8003442 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003404:	4b4e      	ldr	r3, [pc, #312]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 8003406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003408:	4b4d      	ldr	r3, [pc, #308]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 800340a:	2104      	movs	r1, #4
 800340c:	430a      	orrs	r2, r1
 800340e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003410:	4b4b      	ldr	r3, [pc, #300]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 8003412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003414:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 8003416:	2101      	movs	r1, #1
 8003418:	438a      	bics	r2, r1
 800341a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341c:	f7fe fcaa 	bl	8001d74 <HAL_GetTick>
 8003420:	0003      	movs	r3, r0
 8003422:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003426:	f7fe fca5 	bl	8001d74 <HAL_GetTick>
 800342a:	0002      	movs	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e07f      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003438:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 800343a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343c:	2202      	movs	r2, #2
 800343e:	4013      	ands	r3, r2
 8003440:	d1f1      	bne.n	8003426 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d100      	bne.n	800344c <HAL_RCC_OscConfig+0x4e0>
 800344a:	e074      	b.n	8003536 <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800344c:	4b3c      	ldr	r3, [pc, #240]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	220c      	movs	r2, #12
 8003452:	4013      	ands	r3, r2
 8003454:	2b08      	cmp	r3, #8
 8003456:	d100      	bne.n	800345a <HAL_RCC_OscConfig+0x4ee>
 8003458:	e06b      	b.n	8003532 <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d14c      	bne.n	80034fc <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003462:	4b37      	ldr	r3, [pc, #220]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4b36      	ldr	r3, [pc, #216]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 8003468:	4938      	ldr	r1, [pc, #224]	; (800354c <HAL_RCC_OscConfig+0x5e0>)
 800346a:	400a      	ands	r2, r1
 800346c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7fe fc81 	bl	8001d74 <HAL_GetTick>
 8003472:	0003      	movs	r3, r0
 8003474:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003478:	f7fe fc7c 	bl	8001d74 <HAL_GetTick>
 800347c:	0002      	movs	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e056      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348a:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	049b      	lsls	r3, r3, #18
 8003492:	4013      	ands	r3, r2
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003496:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	220f      	movs	r2, #15
 800349c:	4393      	bics	r3, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	4b26      	ldr	r3, [pc, #152]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80034a6:	430a      	orrs	r2, r1
 80034a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80034aa:	4b25      	ldr	r3, [pc, #148]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4a28      	ldr	r2, [pc, #160]	; (8003550 <HAL_RCC_OscConfig+0x5e4>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	431a      	orrs	r2, r3
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80034c0:	430a      	orrs	r2, r1
 80034c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c4:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80034ca:	2180      	movs	r1, #128	; 0x80
 80034cc:	0449      	lsls	r1, r1, #17
 80034ce:	430a      	orrs	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fe fc4f 	bl	8001d74 <HAL_GetTick>
 80034d6:	0003      	movs	r3, r0
 80034d8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fe fc4a 	bl	8001d74 <HAL_GetTick>
 80034e0:	0002      	movs	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e024      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ee:	4b14      	ldr	r3, [pc, #80]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	049b      	lsls	r3, r3, #18
 80034f6:	4013      	ands	r3, r2
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0x570>
 80034fa:	e01c      	b.n	8003536 <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fc:	4b10      	ldr	r3, [pc, #64]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 8003502:	4912      	ldr	r1, [pc, #72]	; (800354c <HAL_RCC_OscConfig+0x5e0>)
 8003504:	400a      	ands	r2, r1
 8003506:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7fe fc34 	bl	8001d74 <HAL_GetTick>
 800350c:	0003      	movs	r3, r0
 800350e:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003512:	f7fe fc2f 	bl	8001d74 <HAL_GetTick>
 8003516:	0002      	movs	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e009      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_RCC_OscConfig+0x5d4>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	049b      	lsls	r3, r3, #18
 800352c:	4013      	ands	r3, r2
 800352e:	d1f0      	bne.n	8003512 <HAL_RCC_OscConfig+0x5a6>
 8003530:	e001      	b.n	8003536 <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	0018      	movs	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	b006      	add	sp, #24
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000
 8003544:	00001388 	.word	0x00001388
 8003548:	efffffff 	.word	0xefffffff
 800354c:	feffffff 	.word	0xfeffffff
 8003550:	ffc2ffff 	.word	0xffc2ffff

08003554 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003562:	4b6a      	ldr	r3, [pc, #424]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2201      	movs	r2, #1
 8003568:	4013      	ands	r3, r2
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d911      	bls.n	8003594 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003570:	4b66      	ldr	r3, [pc, #408]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2201      	movs	r2, #1
 8003576:	4393      	bics	r3, r2
 8003578:	0019      	movs	r1, r3
 800357a:	4b64      	ldr	r3, [pc, #400]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003582:	4b62      	ldr	r3, [pc, #392]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2201      	movs	r2, #1
 8003588:	4013      	ands	r3, r2
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0b6      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2202      	movs	r2, #2
 800359a:	4013      	ands	r3, r2
 800359c:	d009      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800359e:	4b5c      	ldr	r3, [pc, #368]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	22f0      	movs	r2, #240	; 0xf0
 80035a4:	4393      	bics	r3, r2
 80035a6:	0019      	movs	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	4b58      	ldr	r3, [pc, #352]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2201      	movs	r2, #1
 80035b8:	4013      	ands	r3, r2
 80035ba:	d100      	bne.n	80035be <HAL_RCC_ClockConfig+0x6a>
 80035bc:	e067      	b.n	800368e <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	4b52      	ldr	r3, [pc, #328]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	029b      	lsls	r3, r3, #10
 80035ce:	4013      	ands	r3, r2
 80035d0:	d114      	bne.n	80035fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e095      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035de:	4b4c      	ldr	r3, [pc, #304]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	049b      	lsls	r3, r3, #18
 80035e6:	4013      	ands	r3, r2
 80035e8:	d108      	bne.n	80035fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e089      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ee:	4b48      	ldr	r3, [pc, #288]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2202      	movs	r2, #2
 80035f4:	4013      	ands	r3, r2
 80035f6:	d101      	bne.n	80035fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e082      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035fc:	4b44      	ldr	r3, [pc, #272]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2203      	movs	r2, #3
 8003602:	4393      	bics	r3, r2
 8003604:	0019      	movs	r1, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	4b41      	ldr	r3, [pc, #260]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003610:	f7fe fbb0 	bl	8001d74 <HAL_GetTick>
 8003614:	0003      	movs	r3, r0
 8003616:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d111      	bne.n	8003644 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003620:	e009      	b.n	8003636 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003622:	f7fe fba7 	bl	8001d74 <HAL_GetTick>
 8003626:	0002      	movs	r2, r0
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	4a39      	ldr	r2, [pc, #228]	; (8003714 <HAL_RCC_ClockConfig+0x1c0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e065      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003636:	4b36      	ldr	r3, [pc, #216]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	220c      	movs	r2, #12
 800363c:	4013      	ands	r3, r2
 800363e:	2b04      	cmp	r3, #4
 8003640:	d1ef      	bne.n	8003622 <HAL_RCC_ClockConfig+0xce>
 8003642:	e024      	b.n	800368e <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d11b      	bne.n	8003684 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800364c:	e009      	b.n	8003662 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800364e:	f7fe fb91 	bl	8001d74 <HAL_GetTick>
 8003652:	0002      	movs	r2, r0
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	4a2e      	ldr	r2, [pc, #184]	; (8003714 <HAL_RCC_ClockConfig+0x1c0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e04f      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003662:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	220c      	movs	r2, #12
 8003668:	4013      	ands	r3, r2
 800366a:	2b08      	cmp	r3, #8
 800366c:	d1ef      	bne.n	800364e <HAL_RCC_ClockConfig+0xfa>
 800366e:	e00e      	b.n	800368e <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7fe fb80 	bl	8001d74 <HAL_GetTick>
 8003674:	0002      	movs	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	4a26      	ldr	r2, [pc, #152]	; (8003714 <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e03e      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003684:	4b22      	ldr	r3, [pc, #136]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	220c      	movs	r2, #12
 800368a:	4013      	ands	r3, r2
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800368e:	4b1f      	ldr	r3, [pc, #124]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2201      	movs	r2, #1
 8003694:	4013      	ands	r3, r2
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d211      	bcs.n	80036c0 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2201      	movs	r2, #1
 80036a2:	4393      	bics	r3, r2
 80036a4:	0019      	movs	r1, r3
 80036a6:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036ae:	4b17      	ldr	r3, [pc, #92]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2201      	movs	r2, #1
 80036b4:	4013      	ands	r3, r2
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e020      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2204      	movs	r2, #4
 80036c6:	4013      	ands	r3, r2
 80036c8:	d009      	beq.n	80036de <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4a12      	ldr	r2, [pc, #72]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	0019      	movs	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036de:	f000 f821 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80036e2:	0001      	movs	r1, r0
 80036e4:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	220f      	movs	r2, #15
 80036ec:	4013      	ands	r3, r2
 80036ee:	4a0b      	ldr	r2, [pc, #44]	; (800371c <HAL_RCC_ClockConfig+0x1c8>)
 80036f0:	5cd3      	ldrb	r3, [r2, r3]
 80036f2:	000a      	movs	r2, r1
 80036f4:	40da      	lsrs	r2, r3
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_RCC_ClockConfig+0x1cc>)
 80036f8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80036fa:	2000      	movs	r0, #0
 80036fc:	f7fe fb12 	bl	8001d24 <HAL_InitTick>
  
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b004      	add	sp, #16
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	40022000 	.word	0x40022000
 8003710:	40021000 	.word	0x40021000
 8003714:	00001388 	.word	0x00001388
 8003718:	fffff8ff 	.word	0xfffff8ff
 800371c:	0800615c 	.word	0x0800615c
 8003720:	20000008 	.word	0x20000008

08003724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b08f      	sub	sp, #60	; 0x3c
 8003728:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800372a:	2314      	movs	r3, #20
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	4a2b      	ldr	r2, [pc, #172]	; (80037dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003730:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003732:	c313      	stmia	r3!, {r0, r1, r4}
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	4a29      	ldr	r2, [pc, #164]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800373c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800373e:	c313      	stmia	r3!, {r0, r1, r4}
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003748:	2300      	movs	r3, #0
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
 800374c:	2300      	movs	r3, #0
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
 8003750:	2300      	movs	r3, #0
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003758:	4b22      	ldr	r3, [pc, #136]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003760:	220c      	movs	r2, #12
 8003762:	4013      	ands	r3, r2
 8003764:	2b04      	cmp	r3, #4
 8003766:	d002      	beq.n	800376e <HAL_RCC_GetSysClockFreq+0x4a>
 8003768:	2b08      	cmp	r3, #8
 800376a:	d003      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x50>
 800376c:	e02d      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800376e:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003770:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003772:	e02d      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003776:	0c9b      	lsrs	r3, r3, #18
 8003778:	220f      	movs	r2, #15
 800377a:	4013      	ands	r3, r2
 800377c:	2214      	movs	r2, #20
 800377e:	18ba      	adds	r2, r7, r2
 8003780:	5cd3      	ldrb	r3, [r2, r3]
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003784:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	220f      	movs	r2, #15
 800378a:	4013      	ands	r3, r2
 800378c:	1d3a      	adds	r2, r7, #4
 800378e:	5cd3      	ldrb	r3, [r2, r3]
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	025b      	lsls	r3, r3, #9
 8003798:	4013      	ands	r3, r2
 800379a:	d009      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800379c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800379e:	4812      	ldr	r0, [pc, #72]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037a0:	f7fc fcb2 	bl	8000108 <__udivsi3>
 80037a4:	0003      	movs	r3, r0
 80037a6:	001a      	movs	r2, r3
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	4353      	muls	r3, r2
 80037ac:	637b      	str	r3, [r7, #52]	; 0x34
 80037ae:	e009      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80037b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037b2:	000a      	movs	r2, r1
 80037b4:	0152      	lsls	r2, r2, #5
 80037b6:	1a52      	subs	r2, r2, r1
 80037b8:	0193      	lsls	r3, r2, #6
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	185b      	adds	r3, r3, r1
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80037c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037c8:	e002      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037ce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80037d2:	0018      	movs	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b00f      	add	sp, #60	; 0x3c
 80037d8:	bd90      	pop	{r4, r7, pc}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	080060bc 	.word	0x080060bc
 80037e0:	080060cc 	.word	0x080060cc
 80037e4:	40021000 	.word	0x40021000
 80037e8:	007a1200 	.word	0x007a1200

080037ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f0:	4b02      	ldr	r3, [pc, #8]	; (80037fc <HAL_RCC_GetHCLKFreq+0x10>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	20000008 	.word	0x20000008

08003800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003804:	f7ff fff2 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8003808:	0001      	movs	r1, r0
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_RCC_GetPCLK1Freq+0x24>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	2207      	movs	r2, #7
 8003812:	4013      	ands	r3, r2
 8003814:	4a04      	ldr	r2, [pc, #16]	; (8003828 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003816:	5cd3      	ldrb	r3, [r2, r3]
 8003818:	40d9      	lsrs	r1, r3
 800381a:	000b      	movs	r3, r1
}    
 800381c:	0018      	movs	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	40021000 	.word	0x40021000
 8003828:	0800616c 	.word	0x0800616c

0800382c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	025b      	lsls	r3, r3, #9
 8003844:	4013      	ands	r3, r2
 8003846:	d100      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003848:	e08f      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800384a:	2317      	movs	r3, #23
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003852:	4b5f      	ldr	r3, [pc, #380]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	055b      	lsls	r3, r3, #21
 800385a:	4013      	ands	r3, r2
 800385c:	d111      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800385e:	4b5c      	ldr	r3, [pc, #368]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003864:	2180      	movs	r1, #128	; 0x80
 8003866:	0549      	lsls	r1, r1, #21
 8003868:	430a      	orrs	r2, r1
 800386a:	61da      	str	r2, [r3, #28]
 800386c:	4b58      	ldr	r3, [pc, #352]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	2380      	movs	r3, #128	; 0x80
 8003872:	055b      	lsls	r3, r3, #21
 8003874:	4013      	ands	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800387a:	2317      	movs	r3, #23
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	2201      	movs	r2, #1
 8003880:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003882:	4b54      	ldr	r3, [pc, #336]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4013      	ands	r3, r2
 800388c:	d11a      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800388e:	4b51      	ldr	r3, [pc, #324]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4b50      	ldr	r3, [pc, #320]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003894:	2180      	movs	r1, #128	; 0x80
 8003896:	0049      	lsls	r1, r1, #1
 8003898:	430a      	orrs	r2, r1
 800389a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389c:	f7fe fa6a 	bl	8001d74 <HAL_GetTick>
 80038a0:	0003      	movs	r3, r0
 80038a2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a4:	e008      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fe fa65 	bl	8001d74 <HAL_GetTick>
 80038aa:	0002      	movs	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b64      	cmp	r3, #100	; 0x64
 80038b2:	d901      	bls.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e087      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b8:	4b46      	ldr	r3, [pc, #280]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	4013      	ands	r3, r2
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038c4:	4b42      	ldr	r3, [pc, #264]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038c6:	6a1a      	ldr	r2, [r3, #32]
 80038c8:	23c0      	movs	r3, #192	; 0xc0
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4013      	ands	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d034      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	23c0      	movs	r3, #192	; 0xc0
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4013      	ands	r3, r2
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d02c      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038e6:	4b3a      	ldr	r3, [pc, #232]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	4a3b      	ldr	r2, [pc, #236]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038f0:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038f2:	6a1a      	ldr	r2, [r3, #32]
 80038f4:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038f6:	2180      	movs	r1, #128	; 0x80
 80038f8:	0249      	lsls	r1, r1, #9
 80038fa:	430a      	orrs	r2, r1
 80038fc:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038fe:	4b34      	ldr	r3, [pc, #208]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003900:	6a1a      	ldr	r2, [r3, #32]
 8003902:	4b33      	ldr	r3, [pc, #204]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003904:	4935      	ldr	r1, [pc, #212]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003906:	400a      	ands	r2, r1
 8003908:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800390a:	4b31      	ldr	r3, [pc, #196]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	4013      	ands	r3, r2
 8003916:	d013      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fe fa2c 	bl	8001d74 <HAL_GetTick>
 800391c:	0003      	movs	r3, r0
 800391e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003920:	e009      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003922:	f7fe fa27 	bl	8001d74 <HAL_GetTick>
 8003926:	0002      	movs	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	4a2c      	ldr	r2, [pc, #176]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e048      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003936:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	2202      	movs	r2, #2
 800393c:	4013      	ands	r3, r2
 800393e:	d0f0      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003940:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	4a24      	ldr	r2, [pc, #144]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003946:	4013      	ands	r3, r2
 8003948:	0019      	movs	r1, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003950:	430a      	orrs	r2, r1
 8003952:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003954:	2317      	movs	r3, #23
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d105      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395e:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003964:	491f      	ldr	r1, [pc, #124]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003966:	400a      	ands	r2, r1
 8003968:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2201      	movs	r2, #1
 8003970:	4013      	ands	r3, r2
 8003972:	d009      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003974:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	2203      	movs	r2, #3
 800397a:	4393      	bics	r3, r2
 800397c:	0019      	movs	r1, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003984:	430a      	orrs	r2, r1
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2220      	movs	r2, #32
 800398e:	4013      	ands	r3, r2
 8003990:	d009      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003992:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	2210      	movs	r2, #16
 8003998:	4393      	bics	r3, r2
 800399a:	0019      	movs	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80039a2:	430a      	orrs	r2, r1
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4013      	ands	r3, r2
 80039b0:	d009      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039b2:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	2240      	movs	r2, #64	; 0x40
 80039b8:	4393      	bics	r3, r2
 80039ba:	0019      	movs	r1, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80039c2:	430a      	orrs	r2, r1
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b006      	add	sp, #24
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40007000 	.word	0x40007000
 80039d8:	fffffcff 	.word	0xfffffcff
 80039dc:	fffeffff 	.word	0xfffeffff
 80039e0:	00001388 	.word	0x00001388
 80039e4:	efffffff 	.word	0xefffffff

080039e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e08a      	b.n	8003b10 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	225d      	movs	r2, #93	; 0x5d
 8003a04:	5c9b      	ldrb	r3, [r3, r2]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d107      	bne.n	8003a1c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	225c      	movs	r2, #92	; 0x5c
 8003a10:	2100      	movs	r1, #0
 8003a12:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f002 f9ae 	bl	8005d78 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	225d      	movs	r2, #93	; 0x5d
 8003a20:	2102      	movs	r1, #2
 8003a22:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2140      	movs	r1, #64	; 0x40
 8003a30:	438a      	bics	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	23e0      	movs	r3, #224	; 0xe0
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d902      	bls.n	8003a46 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	e002      	b.n	8003a4c <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	015b      	lsls	r3, r3, #5
 8003a4a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	23f0      	movs	r3, #240	; 0xf0
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d008      	beq.n	8003a6a <HAL_SPI_Init+0x82>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	23e0      	movs	r3, #224	; 0xe0
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d002      	beq.n	8003a6a <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10c      	bne.n	8003a8c <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	23e0      	movs	r3, #224	; 0xe0
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d903      	bls.n	8003a86 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
 8003a84:	e002      	b.n	8003a8c <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6999      	ldr	r1, [r3, #24]
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	400b      	ands	r3, r1
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	0011      	movs	r1, r2
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	2204      	movs	r2, #4
 8003ad0:	401a      	ands	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	0011      	movs	r1, r2
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4907      	ldr	r1, [pc, #28]	; (8003b18 <HAL_SPI_Init+0x130>)
 8003afc:	400a      	ands	r2, r1
 8003afe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	225d      	movs	r2, #93	; 0x5d
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	0018      	movs	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b004      	add	sp, #16
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	fffff7ff 	.word	0xfffff7ff

08003b1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	1dbb      	adds	r3, r7, #6
 8003b2a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b30:	231f      	movs	r3, #31
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	225c      	movs	r2, #92	; 0x5c
 8003b3c:	5c9b      	ldrb	r3, [r3, r2]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_SPI_Transmit+0x2a>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e14f      	b.n	8003de6 <HAL_SPI_Transmit+0x2ca>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	225c      	movs	r2, #92	; 0x5c
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b4e:	f7fe f911 	bl	8001d74 <HAL_GetTick>
 8003b52:	0003      	movs	r3, r0
 8003b54:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	225d      	movs	r2, #93	; 0x5d
 8003b5a:	5c9b      	ldrb	r3, [r3, r2]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d004      	beq.n	8003b6c <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 8003b62:	231f      	movs	r3, #31
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	2202      	movs	r2, #2
 8003b68:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b6a:	e131      	b.n	8003dd0 <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_SPI_Transmit+0x5e>
 8003b72:	1dbb      	adds	r3, r7, #6
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d104      	bne.n	8003b84 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 8003b7a:	231f      	movs	r3, #31
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b82:	e125      	b.n	8003dd0 <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	225d      	movs	r2, #93	; 0x5d
 8003b88:	2103      	movs	r1, #3
 8003b8a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1dba      	adds	r2, r7, #6
 8003b9c:	8812      	ldrh	r2, [r2, #0]
 8003b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	1dba      	adds	r2, r7, #6
 8003ba4:	8812      	ldrh	r2, [r2, #0]
 8003ba6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2244      	movs	r2, #68	; 0x44
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2246      	movs	r2, #70	; 0x46
 8003bba:	2100      	movs	r1, #0
 8003bbc:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d108      	bne.n	8003be8 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2180      	movs	r1, #128	; 0x80
 8003be2:	01c9      	lsls	r1, r1, #7
 8003be4:	430a      	orrs	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2240      	movs	r2, #64	; 0x40
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d007      	beq.n	8003c06 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2140      	movs	r1, #64	; 0x40
 8003c02:	430a      	orrs	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	23e0      	movs	r3, #224	; 0xe0
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d948      	bls.n	8003ca4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <HAL_SPI_Transmit+0x108>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d139      	bne.n	8003c98 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	881a      	ldrh	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	3302      	adds	r3, #2
 8003c32:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c42:	e029      	b.n	8003c98 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d10f      	bne.n	8003c72 <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	881a      	ldrh	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	3302      	adds	r3, #2
 8003c60:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c70:	e012      	b.n	8003c98 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_SPI_Transmit+0x172>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	d00c      	beq.n	8003c98 <HAL_SPI_Transmit+0x17c>
 8003c7e:	f7fe f879 	bl	8001d74 <HAL_GetTick>
 8003c82:	0002      	movs	r2, r0
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d804      	bhi.n	8003c98 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003c8e:	231f      	movs	r3, #31
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	2203      	movs	r2, #3
 8003c94:	701a      	strb	r2, [r3, #0]
          goto error;
 8003c96:	e09b      	b.n	8003dd0 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1d0      	bne.n	8003c44 <HAL_SPI_Transmit+0x128>
 8003ca2:	e071      	b.n	8003d88 <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d004      	beq.n	8003cb6 <HAL_SPI_Transmit+0x19a>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d163      	bne.n	8003d7e <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d90f      	bls.n	8003ce0 <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	881a      	ldrh	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	3302      	adds	r3, #2
 8003cce:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b02      	subs	r3, #2
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cde:	e04e      	b.n	8003d7e <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	60ba      	str	r2, [r7, #8]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	320c      	adds	r2, #12
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003cfe:	e03e      	b.n	8003d7e <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2202      	movs	r2, #2
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d124      	bne.n	8003d58 <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d90f      	bls.n	8003d38 <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	881a      	ldrh	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	3302      	adds	r3, #2
 8003d26:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b02      	subs	r3, #2
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d36:	e022      	b.n	8003d7e <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	60ba      	str	r2, [r7, #8]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	320c      	adds	r2, #12
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d56:	e012      	b.n	8003d7e <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_SPI_Transmit+0x258>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	3301      	adds	r3, #1
 8003d62:	d00c      	beq.n	8003d7e <HAL_SPI_Transmit+0x262>
 8003d64:	f7fe f806 	bl	8001d74 <HAL_GetTick>
 8003d68:	0002      	movs	r2, r0
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d804      	bhi.n	8003d7e <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8003d74:	231f      	movs	r3, #31
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	2203      	movs	r2, #3
 8003d7a:	701a      	strb	r2, [r3, #0]
          goto error;
 8003d7c:	e028      	b.n	8003dd0 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1bb      	bne.n	8003d00 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	6839      	ldr	r1, [r7, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f000 fa04 	bl	800419c <SPI_EndRxTxTransaction>
 8003d94:	1e03      	subs	r3, r0, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d004      	beq.n	8003dce <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 8003dc4:	231f      	movs	r3, #31
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	2201      	movs	r2, #1
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	e000      	b.n	8003dd0 <HAL_SPI_Transmit+0x2b4>
  }

error:
 8003dce:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	225d      	movs	r2, #93	; 0x5d
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	225c      	movs	r2, #92	; 0x5c
 8003ddc:	2100      	movs	r1, #0
 8003dde:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003de0:	231f      	movs	r3, #31
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	781b      	ldrb	r3, [r3, #0]
}
 8003de6:	0018      	movs	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b008      	add	sp, #32
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2240      	movs	r2, #64	; 0x40
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d10d      	bne.n	8003e2c <HAL_SPI_IRQHandler+0x3c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2201      	movs	r2, #1
 8003e14:	4013      	ands	r3, r2
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8003e16:	d009      	beq.n	8003e2c <HAL_SPI_IRQHandler+0x3c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2240      	movs	r2, #64	; 0x40
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d005      	beq.n	8003e2c <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	0010      	movs	r0, r2
 8003e28:	4798      	blx	r3
    return;
 8003e2a:	e0ac      	b.n	8003f86 <HAL_SPI_IRQHandler+0x196>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	4013      	ands	r3, r2
 8003e32:	d009      	beq.n	8003e48 <HAL_SPI_IRQHandler+0x58>
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2280      	movs	r2, #128	; 0x80
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d005      	beq.n	8003e48 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	0010      	movs	r0, r2
 8003e44:	4798      	blx	r3
    return;
 8003e46:	e09e      	b.n	8003f86 <HAL_SPI_IRQHandler+0x196>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	23b0      	movs	r3, #176	; 0xb0
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d100      	bne.n	8003e54 <HAL_SPI_IRQHandler+0x64>
 8003e52:	e098      	b.n	8003f86 <HAL_SPI_IRQHandler+0x196>
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	2220      	movs	r2, #32
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d100      	bne.n	8003e5e <HAL_SPI_IRQHandler+0x6e>
 8003e5c:	e093      	b.n	8003f86 <HAL_SPI_IRQHandler+0x196>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2240      	movs	r2, #64	; 0x40
 8003e62:	4013      	ands	r3, r2
 8003e64:	d023      	beq.n	8003eae <HAL_SPI_IRQHandler+0xbe>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	225d      	movs	r2, #93	; 0x5d
 8003e6a:	5c9b      	ldrb	r3, [r3, r2]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d011      	beq.n	8003e96 <HAL_SPI_IRQHandler+0xa6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e76:	2204      	movs	r2, #4
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	e00b      	b.n	8003eae <HAL_SPI_IRQHandler+0xbe>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e96:	2300      	movs	r3, #0
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	693b      	ldr	r3, [r7, #16]
        return;
 8003eac:	e06b      	b.n	8003f86 <HAL_SPI_IRQHandler+0x196>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d014      	beq.n	8003ee0 <HAL_SPI_IRQHandler+0xf0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eba:	2201      	movs	r2, #1
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2140      	movs	r1, #64	; 0x40
 8003eda:	438a      	bics	r2, r1
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d00c      	beq.n	8003f04 <HAL_SPI_IRQHandler+0x114>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eee:	2208      	movs	r2, #8
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d03b      	beq.n	8003f84 <HAL_SPI_IRQHandler+0x194>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	21e0      	movs	r1, #224	; 0xe0
 8003f18:	438a      	bics	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	225d      	movs	r2, #93	; 0x5d
 8003f20:	2101      	movs	r1, #1
 8003f22:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2202      	movs	r2, #2
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d103      	bne.n	8003f34 <HAL_SPI_IRQHandler+0x144>
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	4013      	ands	r3, r2
 8003f32:	d022      	beq.n	8003f7a <HAL_SPI_IRQHandler+0x18a>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2103      	movs	r1, #3
 8003f40:	438a      	bics	r2, r1
 8003f42:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_SPI_IRQHandler+0x16e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	4a0e      	ldr	r2, [pc, #56]	; (8003f8c <HAL_SPI_IRQHandler+0x19c>)
 8003f52:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7fe f80d 	bl	8001f78 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <HAL_SPI_IRQHandler+0x192>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	4a08      	ldr	r2, [pc, #32]	; (8003f8c <HAL_SPI_IRQHandler+0x19c>)
 8003f6c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	0018      	movs	r0, r3
 8003f74:	f7fe f800 	bl	8001f78 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8003f78:	e003      	b.n	8003f82 <HAL_SPI_IRQHandler+0x192>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f000 f807 	bl	8003f90 <HAL_SPI_ErrorCallback>
      }
    }
    return;
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	46c0      	nop			; (mov r8, r8)
  }
}
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b008      	add	sp, #32
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	08003fa1 	.word	0x08003fa1

08003f90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2246      	movs	r2, #70	; 0x46
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	87da      	strh	r2, [r3, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f7ff ffe6 	bl	8003f90 <HAL_SPI_ErrorCallback>
}
 8003fc4:	46c0      	nop			; (mov r8, r8)
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b004      	add	sp, #16
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fda:	e050      	b.n	800407e <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	d04d      	beq.n	800407e <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d007      	beq.n	8003ff8 <SPI_WaitFlagStateUntilTimeout+0x2c>
 8003fe8:	f7fd fec4 	bl	8001d74 <HAL_GetTick>
 8003fec:	0002      	movs	r2, r0
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d842      	bhi.n	800407e <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	21e0      	movs	r1, #224	; 0xe0
 8004004:	438a      	bics	r2, r1
 8004006:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	2382      	movs	r3, #130	; 0x82
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	429a      	cmp	r2, r3
 8004012:	d113      	bne.n	800403c <SPI_WaitFlagStateUntilTimeout+0x70>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	429a      	cmp	r2, r3
 800401e:	d005      	beq.n	800402c <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	429a      	cmp	r2, r3
 800402a:	d107      	bne.n	800403c <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2140      	movs	r1, #64	; 0x40
 8004038:	438a      	bics	r2, r1
 800403a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	019b      	lsls	r3, r3, #6
 8004044:	429a      	cmp	r2, r3
 8004046:	d110      	bne.n	800406a <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4914      	ldr	r1, [pc, #80]	; (80040a4 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8004054:	400a      	ands	r2, r1
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2180      	movs	r1, #128	; 0x80
 8004064:	0189      	lsls	r1, r1, #6
 8004066:	430a      	orrs	r2, r1
 8004068:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	225d      	movs	r2, #93	; 0x5d
 800406e:	2101      	movs	r1, #1
 8004070:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	225c      	movs	r2, #92	; 0x5c
 8004076:	2100      	movs	r1, #0
 8004078:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e00e      	b.n	800409c <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	4013      	ands	r3, r2
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	d101      	bne.n	8004092 <SPI_WaitFlagStateUntilTimeout+0xc6>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <SPI_WaitFlagStateUntilTimeout+0xc8>
 8004092:	2300      	movs	r3, #0
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	4293      	cmp	r3, r2
 8004098:	d1a0      	bne.n	8003fdc <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	0018      	movs	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	b004      	add	sp, #16
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	ffffdfff 	.word	0xffffdfff

080040a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80040b6:	e062      	b.n	800417e <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	23c0      	movs	r3, #192	; 0xc0
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	429a      	cmp	r2, r3
 80040c0:	d10c      	bne.n	80040dc <SPI_WaitFifoStateUntilTimeout+0x34>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	330c      	adds	r3, #12
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	2117      	movs	r1, #23
 80040d4:	187b      	adds	r3, r7, r1
 80040d6:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80040d8:	187b      	adds	r3, r7, r1
 80040da:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	3301      	adds	r3, #1
 80040e0:	d04d      	beq.n	800417e <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <SPI_WaitFifoStateUntilTimeout+0x50>
 80040e8:	f7fd fe44 	bl	8001d74 <HAL_GetTick>
 80040ec:	0002      	movs	r2, r0
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d842      	bhi.n	800417e <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	21e0      	movs	r1, #224	; 0xe0
 8004104:	438a      	bics	r2, r1
 8004106:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	2382      	movs	r3, #130	; 0x82
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	429a      	cmp	r2, r3
 8004112:	d113      	bne.n	800413c <SPI_WaitFifoStateUntilTimeout+0x94>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	429a      	cmp	r2, r3
 800411e:	d005      	beq.n	800412c <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	429a      	cmp	r2, r3
 800412a:	d107      	bne.n	800413c <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2140      	movs	r1, #64	; 0x40
 8004138:	438a      	bics	r2, r1
 800413a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	019b      	lsls	r3, r3, #6
 8004144:	429a      	cmp	r2, r3
 8004146:	d110      	bne.n	800416a <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4911      	ldr	r1, [pc, #68]	; (8004198 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8004154:	400a      	ands	r2, r1
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2180      	movs	r1, #128	; 0x80
 8004164:	0189      	lsls	r1, r1, #6
 8004166:	430a      	orrs	r2, r1
 8004168:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	225d      	movs	r2, #93	; 0x5d
 800416e:	2101      	movs	r1, #1
 8004170:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	225c      	movs	r2, #92	; 0x5c
 8004176:	2100      	movs	r1, #0
 8004178:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e008      	b.n	8004190 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	4013      	ands	r3, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d194      	bne.n	80040b8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	0018      	movs	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	b006      	add	sp, #24
 8004196:	bd80      	pop	{r7, pc}
 8004198:	ffffdfff 	.word	0xffffdfff

0800419c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	23c0      	movs	r3, #192	; 0xc0
 80041ac:	0159      	lsls	r1, r3, #5
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	0013      	movs	r3, r2
 80041b6:	2200      	movs	r2, #0
 80041b8:	f7ff ff76 	bl	80040a8 <SPI_WaitFifoStateUntilTimeout>
 80041bc:	1e03      	subs	r3, r0, #0
 80041be:	d007      	beq.n	80041d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c4:	2220      	movs	r2, #32
 80041c6:	431a      	orrs	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e027      	b.n	8004220 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	0013      	movs	r3, r2
 80041da:	2200      	movs	r2, #0
 80041dc:	2180      	movs	r1, #128	; 0x80
 80041de:	f7ff fef5 	bl	8003fcc <SPI_WaitFlagStateUntilTimeout>
 80041e2:	1e03      	subs	r3, r0, #0
 80041e4:	d007      	beq.n	80041f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ea:	2220      	movs	r2, #32
 80041ec:	431a      	orrs	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e014      	b.n	8004220 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	23c0      	movs	r3, #192	; 0xc0
 80041fa:	00d9      	lsls	r1, r3, #3
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	0013      	movs	r3, r2
 8004204:	2200      	movs	r2, #0
 8004206:	f7ff ff4f 	bl	80040a8 <SPI_WaitFifoStateUntilTimeout>
 800420a:	1e03      	subs	r3, r0, #0
 800420c:	d007      	beq.n	800421e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004212:	2220      	movs	r2, #32
 8004214:	431a      	orrs	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e000      	b.n	8004220 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	0018      	movs	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	b004      	add	sp, #16
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e047      	b.n	80042ca <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2269      	movs	r2, #105	; 0x69
 800423e:	5c9b      	ldrb	r3, [r3, r2]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d107      	bne.n	8004256 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2268      	movs	r2, #104	; 0x68
 800424a:	2100      	movs	r1, #0
 800424c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	0018      	movs	r0, r3
 8004252:	f001 fde5 	bl	8005e20 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2269      	movs	r2, #105	; 0x69
 800425a:	2124      	movs	r1, #36	; 0x24
 800425c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2101      	movs	r1, #1
 800426a:	438a      	bics	r2, r1
 800426c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	0018      	movs	r0, r3
 8004272:	f000 fa7d 	bl	8004770 <UART_SetConfig>
 8004276:	0003      	movs	r3, r0
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e024      	b.n	80042ca <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	0018      	movs	r0, r3
 800428c:	f000 fbe6 	bl	8004a5c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	490e      	ldr	r1, [pc, #56]	; (80042d4 <HAL_UART_Init+0xac>)
 800429c:	400a      	ands	r2, r1
 800429e:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	212a      	movs	r1, #42	; 0x2a
 80042ac:	438a      	bics	r2, r1
 80042ae:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2101      	movs	r1, #1
 80042bc:	430a      	orrs	r2, r1
 80042be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	0018      	movs	r0, r3
 80042c4:	f000 fc7e 	bl	8004bc4 <UART_CheckIdleState>
 80042c8:	0003      	movs	r3, r0
}
 80042ca:	0018      	movs	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b002      	add	sp, #8
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	ffffb7ff 	.word	0xffffb7ff

080042d8 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af02      	add	r7, sp, #8
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	1dbb      	adds	r3, r7, #6
 80042e6:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2269      	movs	r2, #105	; 0x69
 80042f0:	5c9b      	ldrb	r3, [r3, r2]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d000      	beq.n	80042fa <HAL_UART_Transmit+0x22>
 80042f8:	e08c      	b.n	8004414 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_UART_Transmit+0x30>
 8004300:	1dbb      	adds	r3, r7, #6
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e084      	b.n	8004416 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	015b      	lsls	r3, r3, #5
 8004314:	429a      	cmp	r2, r3
 8004316:	d109      	bne.n	800432c <HAL_UART_Transmit+0x54>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d105      	bne.n	800432c <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2201      	movs	r2, #1
 8004324:	4013      	ands	r3, r2
 8004326:	d001      	beq.n	800432c <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e074      	b.n	8004416 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2268      	movs	r2, #104	; 0x68
 8004330:	5c9b      	ldrb	r3, [r3, r2]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_UART_Transmit+0x62>
 8004336:	2302      	movs	r3, #2
 8004338:	e06d      	b.n	8004416 <HAL_UART_Transmit+0x13e>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2268      	movs	r2, #104	; 0x68
 800433e:	2101      	movs	r1, #1
 8004340:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2269      	movs	r2, #105	; 0x69
 800434c:	2121      	movs	r1, #33	; 0x21
 800434e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004350:	f7fd fd10 	bl	8001d74 <HAL_GetTick>
 8004354:	0003      	movs	r3, r0
 8004356:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	1dba      	adds	r2, r7, #6
 800435c:	2150      	movs	r1, #80	; 0x50
 800435e:	8812      	ldrh	r2, [r2, #0]
 8004360:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1dba      	adds	r2, r7, #6
 8004366:	2152      	movs	r1, #82	; 0x52
 8004368:	8812      	ldrh	r2, [r2, #0]
 800436a:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 800436c:	e035      	b.n	80043da <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2252      	movs	r2, #82	; 0x52
 8004372:	5a9b      	ldrh	r3, [r3, r2]
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b299      	uxth	r1, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2252      	movs	r2, #82	; 0x52
 800437e:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	0013      	movs	r3, r2
 800438a:	2200      	movs	r2, #0
 800438c:	2180      	movs	r1, #128	; 0x80
 800438e:	f000 fc6b 	bl	8004c68 <UART_WaitOnFlagUntilTimeout>
 8004392:	1e03      	subs	r3, r0, #0
 8004394:	d001      	beq.n	800439a <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e03d      	b.n	8004416 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	015b      	lsls	r3, r3, #5
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d111      	bne.n	80043ca <HAL_UART_Transmit+0xf2>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10d      	bne.n	80043ca <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	881a      	ldrh	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	05d2      	lsls	r2, r2, #23
 80043bc:	0dd2      	lsrs	r2, r2, #23
 80043be:	b292      	uxth	r2, r2
 80043c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	3302      	adds	r3, #2
 80043c6:	60bb      	str	r3, [r7, #8]
 80043c8:	e007      	b.n	80043da <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	60ba      	str	r2, [r7, #8]
 80043d0:	781a      	ldrb	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	b292      	uxth	r2, r2
 80043d8:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2252      	movs	r2, #82	; 0x52
 80043de:	5a9b      	ldrh	r3, [r3, r2]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1c3      	bne.n	800436e <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	0013      	movs	r3, r2
 80043f0:	2200      	movs	r2, #0
 80043f2:	2140      	movs	r1, #64	; 0x40
 80043f4:	f000 fc38 	bl	8004c68 <UART_WaitOnFlagUntilTimeout>
 80043f8:	1e03      	subs	r3, r0, #0
 80043fa:	d001      	beq.n	8004400 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e00a      	b.n	8004416 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2269      	movs	r2, #105	; 0x69
 8004404:	2120      	movs	r1, #32
 8004406:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2268      	movs	r2, #104	; 0x68
 800440c:	2100      	movs	r1, #0
 800440e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	e000      	b.n	8004416 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8004414:	2302      	movs	r3, #2
  }
}
 8004416:	0018      	movs	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	b006      	add	sp, #24
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <HAL_UART_Receive_IT>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	1dbb      	adds	r3, r7, #6
 800442c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	226a      	movs	r2, #106	; 0x6a
 8004432:	5c9b      	ldrb	r3, [r3, r2]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b20      	cmp	r3, #32
 8004438:	d000      	beq.n	800443c <HAL_UART_Receive_IT+0x1c>
 800443a:	e073      	b.n	8004524 <HAL_UART_Receive_IT+0x104>
  {
    if((pData == NULL ) || (Size == 0U))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_UART_Receive_IT+0x2a>
 8004442:	1dbb      	adds	r3, r7, #6
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_UART_Receive_IT+0x2e>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e06b      	b.n	8004526 <HAL_UART_Receive_IT+0x106>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	015b      	lsls	r3, r3, #5
 8004456:	429a      	cmp	r2, r3
 8004458:	d109      	bne.n	800446e <HAL_UART_Receive_IT+0x4e>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d105      	bne.n	800446e <HAL_UART_Receive_IT+0x4e>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2201      	movs	r2, #1
 8004466:	4013      	ands	r3, r2
 8004468:	d001      	beq.n	800446e <HAL_UART_Receive_IT+0x4e>
      {
        return  HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e05b      	b.n	8004526 <HAL_UART_Receive_IT+0x106>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2268      	movs	r2, #104	; 0x68
 8004472:	5c9b      	ldrb	r3, [r3, r2]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_UART_Receive_IT+0x5c>
 8004478:	2302      	movs	r3, #2
 800447a:	e054      	b.n	8004526 <HAL_UART_Receive_IT+0x106>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2268      	movs	r2, #104	; 0x68
 8004480:	2101      	movs	r1, #1
 8004482:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1dba      	adds	r2, r7, #6
 800448e:	2158      	movs	r1, #88	; 0x58
 8004490:	8812      	ldrh	r2, [r2, #0]
 8004492:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	1dba      	adds	r2, r7, #6
 8004498:	215a      	movs	r1, #90	; 0x5a
 800449a:	8812      	ldrh	r2, [r2, #0]
 800449c:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	015b      	lsls	r3, r3, #5
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d10d      	bne.n	80044c6 <HAL_UART_Receive_IT+0xa6>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d104      	bne.n	80044bc <HAL_UART_Receive_IT+0x9c>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	225c      	movs	r2, #92	; 0x5c
 80044b6:	491e      	ldr	r1, [pc, #120]	; (8004530 <HAL_UART_Receive_IT+0x110>)
 80044b8:	5299      	strh	r1, [r3, r2]
 80044ba:	e015      	b.n	80044e8 <HAL_UART_Receive_IT+0xc8>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	225c      	movs	r2, #92	; 0x5c
 80044c0:	21ff      	movs	r1, #255	; 0xff
 80044c2:	5299      	strh	r1, [r3, r2]
 80044c4:	e010      	b.n	80044e8 <HAL_UART_Receive_IT+0xc8>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10c      	bne.n	80044e8 <HAL_UART_Receive_IT+0xc8>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d104      	bne.n	80044e0 <HAL_UART_Receive_IT+0xc0>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	225c      	movs	r2, #92	; 0x5c
 80044da:	21ff      	movs	r1, #255	; 0xff
 80044dc:	5299      	strh	r1, [r3, r2]
 80044de:	e003      	b.n	80044e8 <HAL_UART_Receive_IT+0xc8>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	225c      	movs	r2, #92	; 0x5c
 80044e4:	217f      	movs	r1, #127	; 0x7f
 80044e6:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	226a      	movs	r2, #106	; 0x6a
 80044f2:	2122      	movs	r1, #34	; 0x22
 80044f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2268      	movs	r2, #104	; 0x68
 80044fa:	2100      	movs	r1, #0
 80044fc:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2101      	movs	r1, #1
 800450a:	430a      	orrs	r2, r1
 800450c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2190      	movs	r1, #144	; 0x90
 800451a:	0049      	lsls	r1, r1, #1
 800451c:	430a      	orrs	r2, r1
 800451e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <HAL_UART_Receive_IT+0x106>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	0018      	movs	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	b004      	add	sp, #16
 800452c:	bd80      	pop	{r7, pc}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	000001ff 	.word	0x000001ff

08004534 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	220f      	movs	r2, #15
 8004550:	4013      	ands	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10c      	bne.n	8004574 <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2220      	movs	r2, #32
 800455e:	4013      	ands	r3, r2
 8004560:	d008      	beq.n	8004574 <HAL_UART_IRQHandler+0x40>
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2220      	movs	r2, #32
 8004566:	4013      	ands	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0018      	movs	r0, r3
 800456e:	f000 fc6d 	bl	8004e4c <UART_Receive_IT>
      return;
 8004572:	e0ef      	b.n	8004754 <HAL_UART_IRQHandler+0x220>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d100      	bne.n	8004584 <HAL_UART_IRQHandler+0x50>
 8004582:	e0af      	b.n	80046e4 <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2201      	movs	r2, #1
 8004588:	4013      	ands	r3, r2
 800458a:	d105      	bne.n	8004598 <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	2390      	movs	r3, #144	; 0x90
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	4013      	ands	r3, r2
 8004594:	d100      	bne.n	8004598 <HAL_UART_IRQHandler+0x64>
 8004596:	e0a5      	b.n	80046e4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2201      	movs	r2, #1
 800459c:	4013      	ands	r3, r2
 800459e:	d00e      	beq.n	80045be <HAL_UART_IRQHandler+0x8a>
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	2380      	movs	r3, #128	; 0x80
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	4013      	ands	r3, r2
 80045a8:	d009      	beq.n	80045be <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2201      	movs	r2, #1
 80045b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b6:	2201      	movs	r2, #1
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2202      	movs	r2, #2
 80045c2:	4013      	ands	r3, r2
 80045c4:	d00d      	beq.n	80045e2 <HAL_UART_IRQHandler+0xae>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2201      	movs	r2, #1
 80045ca:	4013      	ands	r3, r2
 80045cc:	d009      	beq.n	80045e2 <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2202      	movs	r2, #2
 80045d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045da:	2204      	movs	r2, #4
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2204      	movs	r2, #4
 80045e6:	4013      	ands	r3, r2
 80045e8:	d00d      	beq.n	8004606 <HAL_UART_IRQHandler+0xd2>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2201      	movs	r2, #1
 80045ee:	4013      	ands	r3, r2
 80045f0:	d009      	beq.n	8004606 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2204      	movs	r2, #4
 80045f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045fe:	2202      	movs	r2, #2
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2208      	movs	r2, #8
 800460a:	4013      	ands	r3, r2
 800460c:	d011      	beq.n	8004632 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2220      	movs	r2, #32
 8004612:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8004614:	d103      	bne.n	800461e <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2201      	movs	r2, #1
 800461a:	4013      	ands	r3, r2
 800461c:	d009      	beq.n	8004632 <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2208      	movs	r2, #8
 8004624:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462a:	2208      	movs	r2, #8
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d100      	bne.n	800463c <HAL_UART_IRQHandler+0x108>
 800463a:	e08a      	b.n	8004752 <HAL_UART_IRQHandler+0x21e>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2220      	movs	r2, #32
 8004640:	4013      	ands	r3, r2
 8004642:	d007      	beq.n	8004654 <HAL_UART_IRQHandler+0x120>
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	2220      	movs	r2, #32
 8004648:	4013      	ands	r3, r2
 800464a:	d003      	beq.n	8004654 <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	0018      	movs	r0, r3
 8004650:	f000 fbfc 	bl	8004e4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004658:	2208      	movs	r2, #8
 800465a:	4013      	ands	r3, r2
 800465c:	d105      	bne.n	800466a <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2240      	movs	r2, #64	; 0x40
 8004666:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004668:	d032      	beq.n	80046d0 <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0018      	movs	r0, r3
 800466e:	f000 fb47 	bl	8004d00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2240      	movs	r2, #64	; 0x40
 800467a:	4013      	ands	r3, r2
 800467c:	d023      	beq.n	80046c6 <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2140      	movs	r1, #64	; 0x40
 800468a:	438a      	bics	r2, r1
 800468c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004692:	2b00      	cmp	r3, #0
 8004694:	d012      	beq.n	80046bc <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800469a:	4a30      	ldr	r2, [pc, #192]	; (800475c <HAL_UART_IRQHandler+0x228>)
 800469c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a2:	0018      	movs	r0, r3
 80046a4:	f7fd fc68 	bl	8001f78 <HAL_DMA_Abort_IT>
 80046a8:	1e03      	subs	r3, r0, #0
 80046aa:	d019      	beq.n	80046e0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b6:	0018      	movs	r0, r3
 80046b8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ba:	e011      	b.n	80046e0 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	0018      	movs	r0, r3
 80046c0:	f000 f84e 	bl	8004760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c4:	e00c      	b.n	80046e0 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f000 f849 	bl	8004760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ce:	e007      	b.n	80046e0 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	0018      	movs	r0, r3
 80046d4:	f000 f844 	bl	8004760 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80046de:	e038      	b.n	8004752 <HAL_UART_IRQHandler+0x21e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e0:	46c0      	nop			; (mov r8, r8)
    return;
 80046e2:	e036      	b.n	8004752 <HAL_UART_IRQHandler+0x21e>

  } /* End if some error occurs */

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	2380      	movs	r3, #128	; 0x80
 80046e8:	035b      	lsls	r3, r3, #13
 80046ea:	4013      	ands	r3, r2
 80046ec:	d016      	beq.n	800471c <HAL_UART_IRQHandler+0x1e8>
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	03db      	lsls	r3, r3, #15
 80046f4:	4013      	ands	r3, r2
 80046f6:	d011      	beq.n	800471c <HAL_UART_IRQHandler+0x1e8>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2280      	movs	r2, #128	; 0x80
 80046fe:	0352      	lsls	r2, r2, #13
 8004700:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2269      	movs	r2, #105	; 0x69
 8004706:	2120      	movs	r1, #32
 8004708:	5499      	strb	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	226a      	movs	r2, #106	; 0x6a
 800470e:	2120      	movs	r1, #32
 8004710:	5499      	strb	r1, [r3, r2]
    HAL_UARTEx_WakeupCallback(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0018      	movs	r0, r3
 8004716:	f000 fc15 	bl	8004f44 <HAL_UARTEx_WakeupCallback>
    return;
 800471a:	e01b      	b.n	8004754 <HAL_UART_IRQHandler+0x220>
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2280      	movs	r2, #128	; 0x80
 8004720:	4013      	ands	r3, r2
 8004722:	d008      	beq.n	8004736 <HAL_UART_IRQHandler+0x202>
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2280      	movs	r2, #128	; 0x80
 8004728:	4013      	ands	r3, r2
 800472a:	d004      	beq.n	8004736 <HAL_UART_IRQHandler+0x202>
  {
    UART_Transmit_IT(huart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	0018      	movs	r0, r3
 8004730:	f000 fb1b 	bl	8004d6a <UART_Transmit_IT>
    return;
 8004734:	e00e      	b.n	8004754 <HAL_UART_IRQHandler+0x220>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2240      	movs	r2, #64	; 0x40
 800473a:	4013      	ands	r3, r2
 800473c:	d00a      	beq.n	8004754 <HAL_UART_IRQHandler+0x220>
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2240      	movs	r2, #64	; 0x40
 8004742:	4013      	ands	r3, r2
 8004744:	d006      	beq.n	8004754 <HAL_UART_IRQHandler+0x220>
  {
    UART_EndTransmit_IT(huart);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	0018      	movs	r0, r3
 800474a:	f000 fb65 	bl	8004e18 <UART_EndTransmit_IT>
    return;
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	e000      	b.n	8004754 <HAL_UART_IRQHandler+0x220>
    return;
 8004752:	46c0      	nop			; (mov r8, r8)
  }

}
 8004754:	46bd      	mov	sp, r7
 8004756:	b006      	add	sp, #24
 8004758:	bd80      	pop	{r7, pc}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	08004d3d 	.word	0x08004d3d

08004760 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004768:	46c0      	nop			; (mov r8, r8)
 800476a:	46bd      	mov	sp, r7
 800476c:	b002      	add	sp, #8
 800476e:	bd80      	pop	{r7, pc}

08004770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004770:	b590      	push	{r4, r7, lr}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800477c:	2317      	movs	r3, #23
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	2210      	movs	r2, #16
 8004782:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8004784:	230a      	movs	r3, #10
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	2200      	movs	r2, #0
 800478a:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 800478c:	2314      	movs	r3, #20
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	2200      	movs	r2, #0
 8004792:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004794:	2313      	movs	r3, #19
 8004796:	18fb      	adds	r3, r7, r3
 8004798:	2200      	movs	r2, #0
 800479a:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4aa0      	ldr	r2, [pc, #640]	; (8004a3c <UART_SetConfig+0x2cc>)
 80047bc:	4013      	ands	r3, r2
 80047be:	0019      	movs	r1, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	4a9b      	ldr	r2, [pc, #620]	; (8004a40 <UART_SetConfig+0x2d0>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	0019      	movs	r1, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4a93      	ldr	r2, [pc, #588]	; (8004a44 <UART_SetConfig+0x2d4>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	0019      	movs	r1, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	430a      	orrs	r2, r1
 8004802:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a8f      	ldr	r2, [pc, #572]	; (8004a48 <UART_SetConfig+0x2d8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d125      	bne.n	800485a <UART_SetConfig+0xea>
 800480e:	4b8f      	ldr	r3, [pc, #572]	; (8004a4c <UART_SetConfig+0x2dc>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	2203      	movs	r2, #3
 8004814:	4013      	ands	r3, r2
 8004816:	2b01      	cmp	r3, #1
 8004818:	d00f      	beq.n	800483a <UART_SetConfig+0xca>
 800481a:	d304      	bcc.n	8004826 <UART_SetConfig+0xb6>
 800481c:	2b02      	cmp	r3, #2
 800481e:	d011      	beq.n	8004844 <UART_SetConfig+0xd4>
 8004820:	2b03      	cmp	r3, #3
 8004822:	d005      	beq.n	8004830 <UART_SetConfig+0xc0>
 8004824:	e013      	b.n	800484e <UART_SetConfig+0xde>
 8004826:	2317      	movs	r3, #23
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	e022      	b.n	8004876 <UART_SetConfig+0x106>
 8004830:	2317      	movs	r3, #23
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	2202      	movs	r2, #2
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	e01d      	b.n	8004876 <UART_SetConfig+0x106>
 800483a:	2317      	movs	r3, #23
 800483c:	18fb      	adds	r3, r7, r3
 800483e:	2204      	movs	r2, #4
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	e018      	b.n	8004876 <UART_SetConfig+0x106>
 8004844:	2317      	movs	r3, #23
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	2208      	movs	r2, #8
 800484a:	701a      	strb	r2, [r3, #0]
 800484c:	e013      	b.n	8004876 <UART_SetConfig+0x106>
 800484e:	2317      	movs	r3, #23
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	2210      	movs	r2, #16
 8004854:	701a      	strb	r2, [r3, #0]
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	e00d      	b.n	8004876 <UART_SetConfig+0x106>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a7c      	ldr	r2, [pc, #496]	; (8004a50 <UART_SetConfig+0x2e0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d104      	bne.n	800486e <UART_SetConfig+0xfe>
 8004864:	2317      	movs	r3, #23
 8004866:	18fb      	adds	r3, r7, r3
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	e003      	b.n	8004876 <UART_SetConfig+0x106>
 800486e:	2317      	movs	r3, #23
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	2210      	movs	r2, #16
 8004874:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	429a      	cmp	r2, r3
 8004880:	d000      	beq.n	8004884 <UART_SetConfig+0x114>
 8004882:	e077      	b.n	8004974 <UART_SetConfig+0x204>
  {
    switch (clocksource)
 8004884:	2317      	movs	r3, #23
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d01c      	beq.n	80048c8 <UART_SetConfig+0x158>
 800488e:	dc02      	bgt.n	8004896 <UART_SetConfig+0x126>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <UART_SetConfig+0x130>
 8004894:	e04f      	b.n	8004936 <UART_SetConfig+0x1c6>
 8004896:	2b04      	cmp	r3, #4
 8004898:	d027      	beq.n	80048ea <UART_SetConfig+0x17a>
 800489a:	2b08      	cmp	r3, #8
 800489c:	d039      	beq.n	8004912 <UART_SetConfig+0x1a2>
 800489e:	e04a      	b.n	8004936 <UART_SetConfig+0x1c6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80048a0:	f7fe ffae 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 80048a4:	0003      	movs	r3, r0
 80048a6:	005a      	lsls	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	18d2      	adds	r2, r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	0019      	movs	r1, r3
 80048b6:	0010      	movs	r0, r2
 80048b8:	f7fb fc26 	bl	8000108 <__udivsi3>
 80048bc:	0003      	movs	r3, r0
 80048be:	001a      	movs	r2, r3
 80048c0:	2314      	movs	r3, #20
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	801a      	strh	r2, [r3, #0]
        break;
 80048c6:	e03b      	b.n	8004940 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	4a61      	ldr	r2, [pc, #388]	; (8004a54 <UART_SetConfig+0x2e4>)
 80048d0:	189a      	adds	r2, r3, r2
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	0019      	movs	r1, r3
 80048d8:	0010      	movs	r0, r2
 80048da:	f7fb fc15 	bl	8000108 <__udivsi3>
 80048de:	0003      	movs	r3, r0
 80048e0:	001a      	movs	r2, r3
 80048e2:	2314      	movs	r3, #20
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	801a      	strh	r2, [r3, #0]
        break;
 80048e8:	e02a      	b.n	8004940 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80048ea:	f7fe ff1b 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80048ee:	0003      	movs	r3, r0
 80048f0:	005a      	lsls	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	18d2      	adds	r2, r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	0019      	movs	r1, r3
 8004900:	0010      	movs	r0, r2
 8004902:	f7fb fc01 	bl	8000108 <__udivsi3>
 8004906:	0003      	movs	r3, r0
 8004908:	001a      	movs	r2, r3
 800490a:	2314      	movs	r3, #20
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	801a      	strh	r2, [r3, #0]
        break;
 8004910:	e016      	b.n	8004940 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	2280      	movs	r2, #128	; 0x80
 800491a:	0252      	lsls	r2, r2, #9
 800491c:	189a      	adds	r2, r3, r2
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	0019      	movs	r1, r3
 8004924:	0010      	movs	r0, r2
 8004926:	f7fb fbef 	bl	8000108 <__udivsi3>
 800492a:	0003      	movs	r3, r0
 800492c:	001a      	movs	r2, r3
 800492e:	2314      	movs	r3, #20
 8004930:	18fb      	adds	r3, r7, r3
 8004932:	801a      	strh	r2, [r3, #0]
        break;
 8004934:	e004      	b.n	8004940 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004936:	2313      	movs	r3, #19
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	2201      	movs	r2, #1
 800493c:	701a      	strb	r2, [r3, #0]
        break;
 800493e:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8004940:	200a      	movs	r0, #10
 8004942:	183b      	adds	r3, r7, r0
 8004944:	2414      	movs	r4, #20
 8004946:	193a      	adds	r2, r7, r4
 8004948:	8812      	ldrh	r2, [r2, #0]
 800494a:	210f      	movs	r1, #15
 800494c:	438a      	bics	r2, r1
 800494e:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004950:	193b      	adds	r3, r7, r4
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	105b      	asrs	r3, r3, #1
 8004956:	b29b      	uxth	r3, r3
 8004958:	2207      	movs	r2, #7
 800495a:	4013      	ands	r3, r2
 800495c:	b299      	uxth	r1, r3
 800495e:	183b      	adds	r3, r7, r0
 8004960:	183a      	adds	r2, r7, r0
 8004962:	8812      	ldrh	r2, [r2, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	183a      	adds	r2, r7, r0
 800496e:	8812      	ldrh	r2, [r2, #0]
 8004970:	60da      	str	r2, [r3, #12]
 8004972:	e05b      	b.n	8004a2c <UART_SetConfig+0x2bc>
  }
  else
  {
    switch (clocksource)
 8004974:	2317      	movs	r3, #23
 8004976:	18fb      	adds	r3, r7, r3
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d01b      	beq.n	80049b6 <UART_SetConfig+0x246>
 800497e:	dc02      	bgt.n	8004986 <UART_SetConfig+0x216>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <UART_SetConfig+0x220>
 8004984:	e04d      	b.n	8004a22 <UART_SetConfig+0x2b2>
 8004986:	2b04      	cmp	r3, #4
 8004988:	d026      	beq.n	80049d8 <UART_SetConfig+0x268>
 800498a:	2b08      	cmp	r3, #8
 800498c:	d037      	beq.n	80049fe <UART_SetConfig+0x28e>
 800498e:	e048      	b.n	8004a22 <UART_SetConfig+0x2b2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004990:	f7fe ff36 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 8004994:	0002      	movs	r2, r0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	085b      	lsrs	r3, r3, #1
 800499c:	18d2      	adds	r2, r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	0019      	movs	r1, r3
 80049a4:	0010      	movs	r0, r2
 80049a6:	f7fb fbaf 	bl	8000108 <__udivsi3>
 80049aa:	0003      	movs	r3, r0
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
        break;
 80049b4:	e03a      	b.n	8004a2c <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	085b      	lsrs	r3, r3, #1
 80049bc:	4a26      	ldr	r2, [pc, #152]	; (8004a58 <UART_SetConfig+0x2e8>)
 80049be:	189a      	adds	r2, r3, r2
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	0019      	movs	r1, r3
 80049c6:	0010      	movs	r0, r2
 80049c8:	f7fb fb9e 	bl	8000108 <__udivsi3>
 80049cc:	0003      	movs	r3, r0
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60da      	str	r2, [r3, #12]
        break;
 80049d6:	e029      	b.n	8004a2c <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80049d8:	f7fe fea4 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80049dc:	0002      	movs	r2, r0
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	085b      	lsrs	r3, r3, #1
 80049e4:	18d2      	adds	r2, r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	0019      	movs	r1, r3
 80049ec:	0010      	movs	r0, r2
 80049ee:	f7fb fb8b 	bl	8000108 <__udivsi3>
 80049f2:	0003      	movs	r3, r0
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60da      	str	r2, [r3, #12]
        break;
 80049fc:	e016      	b.n	8004a2c <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	085b      	lsrs	r3, r3, #1
 8004a04:	2280      	movs	r2, #128	; 0x80
 8004a06:	0212      	lsls	r2, r2, #8
 8004a08:	189a      	adds	r2, r3, r2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	0019      	movs	r1, r3
 8004a10:	0010      	movs	r0, r2
 8004a12:	f7fb fb79 	bl	8000108 <__udivsi3>
 8004a16:	0003      	movs	r3, r0
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60da      	str	r2, [r3, #12]
        break;
 8004a20:	e004      	b.n	8004a2c <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004a22:	2313      	movs	r3, #19
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
        break;
 8004a2a:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8004a2c:	2313      	movs	r3, #19
 8004a2e:	18fb      	adds	r3, r7, r3
 8004a30:	781b      	ldrb	r3, [r3, #0]

}
 8004a32:	0018      	movs	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	b007      	add	sp, #28
 8004a38:	bd90      	pop	{r4, r7, pc}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	ffff69f3 	.word	0xffff69f3
 8004a40:	ffffcfff 	.word	0xffffcfff
 8004a44:	fffff4ff 	.word	0xfffff4ff
 8004a48:	40013800 	.word	0x40013800
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	40004400 	.word	0x40004400
 8004a54:	00f42400 	.word	0x00f42400
 8004a58:	007a1200 	.word	0x007a1200

08004a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	2201      	movs	r2, #1
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d00b      	beq.n	8004a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	4a4a      	ldr	r2, [pc, #296]	; (8004ba0 <UART_AdvFeatureConfig+0x144>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d00b      	beq.n	8004aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4a43      	ldr	r2, [pc, #268]	; (8004ba4 <UART_AdvFeatureConfig+0x148>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	2204      	movs	r2, #4
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d00b      	beq.n	8004aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a3b      	ldr	r2, [pc, #236]	; (8004ba8 <UART_AdvFeatureConfig+0x14c>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	0019      	movs	r1, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	2208      	movs	r2, #8
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d00b      	beq.n	8004aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4a34      	ldr	r2, [pc, #208]	; (8004bac <UART_AdvFeatureConfig+0x150>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	0019      	movs	r1, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	2210      	movs	r2, #16
 8004af2:	4013      	ands	r3, r2
 8004af4:	d00b      	beq.n	8004b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4a2c      	ldr	r2, [pc, #176]	; (8004bb0 <UART_AdvFeatureConfig+0x154>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	0019      	movs	r1, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	2220      	movs	r2, #32
 8004b14:	4013      	ands	r3, r2
 8004b16:	d00b      	beq.n	8004b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	4a25      	ldr	r2, [pc, #148]	; (8004bb4 <UART_AdvFeatureConfig+0x158>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	0019      	movs	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	2240      	movs	r2, #64	; 0x40
 8004b36:	4013      	ands	r3, r2
 8004b38:	d01d      	beq.n	8004b76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4a1d      	ldr	r2, [pc, #116]	; (8004bb8 <UART_AdvFeatureConfig+0x15c>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	0019      	movs	r1, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	035b      	lsls	r3, r3, #13
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d10b      	bne.n	8004b76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <UART_AdvFeatureConfig+0x160>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	0019      	movs	r1, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	2280      	movs	r2, #128	; 0x80
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d00b      	beq.n	8004b98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4a0e      	ldr	r2, [pc, #56]	; (8004bc0 <UART_AdvFeatureConfig+0x164>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	0019      	movs	r1, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	605a      	str	r2, [r3, #4]
  }
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b002      	add	sp, #8
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	fffdffff 	.word	0xfffdffff
 8004ba4:	fffeffff 	.word	0xfffeffff
 8004ba8:	fffbffff 	.word	0xfffbffff
 8004bac:	ffff7fff 	.word	0xffff7fff
 8004bb0:	ffffefff 	.word	0xffffefff
 8004bb4:	ffffdfff 	.word	0xffffdfff
 8004bb8:	ffefffff 	.word	0xffefffff
 8004bbc:	ff9fffff 	.word	0xff9fffff
 8004bc0:	fff7ffff 	.word	0xfff7ffff

08004bc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004bd6:	f7fd f8cd 	bl	8001d74 <HAL_GetTick>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1f      	ldr	r2, [pc, #124]	; (8004c60 <UART_CheckIdleState+0x9c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d129      	bne.n	8004c3c <UART_CheckIdleState+0x78>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2208      	movs	r2, #8
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d10d      	bne.n	8004c12 <UART_CheckIdleState+0x4e>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	2380      	movs	r3, #128	; 0x80
 8004bfa:	0399      	lsls	r1, r3, #14
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <UART_CheckIdleState+0xa0>)
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	0013      	movs	r3, r2
 8004c04:	2200      	movs	r2, #0
 8004c06:	f000 f82f 	bl	8004c68 <UART_WaitOnFlagUntilTimeout>
 8004c0a:	1e03      	subs	r3, r0, #0
 8004c0c:	d001      	beq.n	8004c12 <UART_CheckIdleState+0x4e>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e021      	b.n	8004c56 <UART_CheckIdleState+0x92>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2204      	movs	r2, #4
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d10d      	bne.n	8004c3c <UART_CheckIdleState+0x78>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	03d9      	lsls	r1, r3, #15
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <UART_CheckIdleState+0xa0>)
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	0013      	movs	r3, r2
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f000 f81a 	bl	8004c68 <UART_WaitOnFlagUntilTimeout>
 8004c34:	1e03      	subs	r3, r0, #0
 8004c36:	d001      	beq.n	8004c3c <UART_CheckIdleState+0x78>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e00c      	b.n	8004c56 <UART_CheckIdleState+0x92>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2269      	movs	r2, #105	; 0x69
 8004c40:	2120      	movs	r1, #32
 8004c42:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	226a      	movs	r2, #106	; 0x6a
 8004c48:	2120      	movs	r1, #32
 8004c4a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2268      	movs	r2, #104	; 0x68
 8004c50:	2100      	movs	r1, #0
 8004c52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	0018      	movs	r0, r3
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b004      	add	sp, #16
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	40013800 	.word	0x40013800
 8004c64:	01ffffff 	.word	0x01ffffff

08004c68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	1dfb      	adds	r3, r7, #7
 8004c76:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c78:	e02b      	b.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	d028      	beq.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004c86:	f7fd f875 	bl	8001d74 <HAL_GetTick>
 8004c8a:	0002      	movs	r2, r0
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d21d      	bcs.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4916      	ldr	r1, [pc, #88]	; (8004cfc <UART_WaitOnFlagUntilTimeout+0x94>)
 8004ca2:	400a      	ands	r2, r1
 8004ca4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	438a      	bics	r2, r1
 8004cb4:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2269      	movs	r2, #105	; 0x69
 8004cba:	2120      	movs	r1, #32
 8004cbc:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	226a      	movs	r2, #106	; 0x6a
 8004cc2:	2120      	movs	r1, #32
 8004cc4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2268      	movs	r2, #104	; 0x68
 8004cca:	2100      	movs	r1, #0
 8004ccc:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e00f      	b.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	425a      	negs	r2, r3
 8004ce2:	4153      	adcs	r3, r2
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	001a      	movs	r2, r3
 8004ce8:	1dfb      	adds	r3, r7, #7
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d0c4      	beq.n	8004c7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b004      	add	sp, #16
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	fffffe5f 	.word	0xfffffe5f

08004d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4909      	ldr	r1, [pc, #36]	; (8004d38 <UART_EndRxTransfer+0x38>)
 8004d14:	400a      	ands	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2101      	movs	r1, #1
 8004d24:	438a      	bics	r2, r1
 8004d26:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	226a      	movs	r2, #106	; 0x6a
 8004d2c:	2120      	movs	r1, #32
 8004d2e:	5499      	strb	r1, [r3, r2]
}
 8004d30:	46c0      	nop			; (mov r8, r8)
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b002      	add	sp, #8
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	fffffedf 	.word	0xfffffedf

08004d3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	225a      	movs	r2, #90	; 0x5a
 8004d4e:	2100      	movs	r1, #0
 8004d50:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2252      	movs	r2, #82	; 0x52
 8004d56:	2100      	movs	r1, #0
 8004d58:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f7ff fcff 	bl	8004760 <HAL_UART_ErrorCallback>
}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b004      	add	sp, #16
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2269      	movs	r2, #105	; 0x69
 8004d76:	5c9b      	ldrb	r3, [r3, r2]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b21      	cmp	r3, #33	; 0x21
 8004d7c:	d147      	bne.n	8004e0e <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2252      	movs	r2, #82	; 0x52
 8004d82:	5a9b      	ldrh	r3, [r3, r2]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d111      	bne.n	8004dae <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2180      	movs	r1, #128	; 0x80
 8004d96:	438a      	bics	r2, r1
 8004d98:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2140      	movs	r1, #64	; 0x40
 8004da6:	430a      	orrs	r2, r1
 8004da8:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e030      	b.n	8004e10 <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	015b      	lsls	r3, r3, #5
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d114      	bne.n	8004de4 <UART_Transmit_IT+0x7a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d110      	bne.n	8004de4 <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc6:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	881a      	ldrh	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	05d2      	lsls	r2, r2, #23
 8004dd2:	0dd2      	lsrs	r2, r2, #23
 8004dd4:	b292      	uxth	r2, r2
 8004dd6:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ddc:	1c9a      	adds	r2, r3, #2
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	64da      	str	r2, [r3, #76]	; 0x4c
 8004de2:	e009      	b.n	8004df8 <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de8:	1c59      	adds	r1, r3, #1
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	64d1      	str	r1, [r2, #76]	; 0x4c
 8004dee:	781a      	ldrb	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	b292      	uxth	r2, r2
 8004df6:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2252      	movs	r2, #82	; 0x52
 8004dfc:	5a9b      	ldrh	r3, [r3, r2]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b299      	uxth	r1, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2252      	movs	r2, #82	; 0x52
 8004e08:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e000      	b.n	8004e10 <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004e0e:	2302      	movs	r3, #2
  }
}
 8004e10:	0018      	movs	r0, r3
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b004      	add	sp, #16
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2140      	movs	r1, #64	; 0x40
 8004e2c:	438a      	bics	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2269      	movs	r2, #105	; 0x69
 8004e34:	2120      	movs	r1, #32
 8004e36:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f000 fe96 	bl	8005b6c <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	0018      	movs	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	b002      	add	sp, #8
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e4c:	b590      	push	{r4, r7, lr}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8004e54:	230e      	movs	r3, #14
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	215c      	movs	r1, #92	; 0x5c
 8004e5c:	5a52      	ldrh	r2, [r2, r1]
 8004e5e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	226a      	movs	r2, #106	; 0x6a
 8004e64:	5c9b      	ldrb	r3, [r3, r2]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b22      	cmp	r3, #34	; 0x22
 8004e6a:	d15b      	bne.n	8004f24 <UART_Receive_IT+0xd8>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	230c      	movs	r3, #12
 8004e72:	18fb      	adds	r3, r7, r3
 8004e74:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004e76:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	2380      	movs	r3, #128	; 0x80
 8004e7e:	015b      	lsls	r3, r3, #5
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d116      	bne.n	8004eb2 <UART_Receive_IT+0x66>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d112      	bne.n	8004eb2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e90:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8004e92:	230c      	movs	r3, #12
 8004e94:	18fb      	adds	r3, r7, r3
 8004e96:	220e      	movs	r2, #14
 8004e98:	18ba      	adds	r2, r7, r2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	8812      	ldrh	r2, [r2, #0]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	1c9a      	adds	r2, r3, #2
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54
 8004eb0:	e010      	b.n	8004ed4 <UART_Receive_IT+0x88>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004eb2:	230c      	movs	r3, #12
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b2d9      	uxtb	r1, r3
 8004eba:	230e      	movs	r3, #14
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	b2d8      	uxtb	r0, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec6:	1c5c      	adds	r4, r3, #1
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6554      	str	r4, [r2, #84]	; 0x54
 8004ecc:	0002      	movs	r2, r0
 8004ece:	400a      	ands	r2, r1
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	225a      	movs	r2, #90	; 0x5a
 8004ed8:	5a9b      	ldrh	r3, [r3, r2]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	215a      	movs	r1, #90	; 0x5a
 8004ee4:	1c18      	adds	r0, r3, #0
 8004ee6:	5250      	strh	r0, [r2, r1]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d119      	bne.n	8004f20 <UART_Receive_IT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4912      	ldr	r1, [pc, #72]	; (8004f40 <UART_Receive_IT+0xf4>)
 8004ef8:	400a      	ands	r2, r1
 8004efa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2101      	movs	r1, #1
 8004f08:	438a      	bics	r2, r1
 8004f0a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	226a      	movs	r2, #106	; 0x6a
 8004f10:	2120      	movs	r1, #32
 8004f12:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	0018      	movs	r0, r3
 8004f18:	f000 fdf0 	bl	8005afc <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e00a      	b.n	8004f36 <UART_Receive_IT+0xea>
    }

    return HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	e008      	b.n	8004f36 <UART_Receive_IT+0xea>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2108      	movs	r1, #8
 8004f30:	430a      	orrs	r2, r1
 8004f32:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
  }
}
 8004f36:	0018      	movs	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b005      	add	sp, #20
 8004f3c:	bd90      	pop	{r4, r7, pc}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	fffffedf 	.word	0xfffffedf

08004f44 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f4c:	46c0      	nop			; (mov r8, r8)
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b002      	add	sp, #8
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f5a:	f7fc fecf 	bl	8001cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f5e:	f000 f833 	bl	8004fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f62:	f000 f939 	bl	80051d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8004f66:	f000 f8c9 	bl	80050fc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004f6a:	f000 f905 	bl	8005178 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8004f6e:	f000 f885 	bl	800507c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, UARTbuffer, sizeof(UARTbuffer));
 8004f72:	4911      	ldr	r1, [pc, #68]	; (8004fb8 <main+0x64>)
 8004f74:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <main+0x68>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f7ff fa51 	bl	8004420 <HAL_UART_Receive_IT>

  writeDACVoltage(2.1);
 8004f7e:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <main+0x6c>)
 8004f80:	1c18      	adds	r0, r3, #0
 8004f82:	f000 fa0f 	bl	80053a4 <writeDACVoltage>



  setRTCTime(t);
 8004f86:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <main+0x70>)
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	6859      	ldr	r1, [r3, #4]
 8004f8c:	f000 fa79 	bl	8005482 <setRTCTime>
  startRTC();
 8004f90:	f000 fd3a 	bl	8005a08 <startRTC>
  /* USER CODE BEGIN WHILE */
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    t = getRTCTime();
 8004f94:	4c0b      	ldr	r4, [pc, #44]	; (8004fc4 <main+0x70>)
 8004f96:	003b      	movs	r3, r7
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f000 fa37 	bl	800540c <getRTCTime>
 8004f9e:	003b      	movs	r3, r7
 8004fa0:	0020      	movs	r0, r4
 8004fa2:	0019      	movs	r1, r3
 8004fa4:	2307      	movs	r3, #7
 8004fa6:	001a      	movs	r2, r3
 8004fa8:	f001 f86a 	bl	8006080 <memcpy>
	HAL_Delay(1000);
 8004fac:	23fa      	movs	r3, #250	; 0xfa
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f7fc fee9 	bl	8001d88 <HAL_Delay>
    t = getRTCTime();
 8004fb6:	e7ed      	b.n	8004f94 <main+0x40>
 8004fb8:	20000028 	.word	0x20000028
 8004fbc:	2000007c 	.word	0x2000007c
 8004fc0:	40066666 	.word	0x40066666
 8004fc4:	20000000 	.word	0x20000000

08004fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b097      	sub	sp, #92	; 0x5c
 8004fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fce:	2428      	movs	r4, #40	; 0x28
 8004fd0:	193b      	adds	r3, r7, r4
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	2330      	movs	r3, #48	; 0x30
 8004fd6:	001a      	movs	r2, r3
 8004fd8:	2100      	movs	r1, #0
 8004fda:	f001 f85a 	bl	8006092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004fde:	2318      	movs	r3, #24
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	001a      	movs	r2, r3
 8004fe8:	2100      	movs	r1, #0
 8004fea:	f001 f852 	bl	8006092 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fee:	1d3b      	adds	r3, r7, #4
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	2314      	movs	r3, #20
 8004ff4:	001a      	movs	r2, r3
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	f001 f84b 	bl	8006092 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004ffc:	0021      	movs	r1, r4
 8004ffe:	187b      	adds	r3, r7, r1
 8005000:	2202      	movs	r2, #2
 8005002:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005004:	187b      	adds	r3, r7, r1
 8005006:	2201      	movs	r2, #1
 8005008:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800500a:	187b      	adds	r3, r7, r1
 800500c:	2210      	movs	r2, #16
 800500e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005010:	187b      	adds	r3, r7, r1
 8005012:	2200      	movs	r2, #0
 8005014:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005016:	187b      	adds	r3, r7, r1
 8005018:	0018      	movs	r0, r3
 800501a:	f7fd ffa7 	bl	8002f6c <HAL_RCC_OscConfig>
 800501e:	1e03      	subs	r3, r0, #0
 8005020:	d001      	beq.n	8005026 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8005022:	f000 fe31 	bl	8005c88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005026:	2118      	movs	r1, #24
 8005028:	187b      	adds	r3, r7, r1
 800502a:	2207      	movs	r2, #7
 800502c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800502e:	187b      	adds	r3, r7, r1
 8005030:	2200      	movs	r2, #0
 8005032:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005034:	187b      	adds	r3, r7, r1
 8005036:	2200      	movs	r2, #0
 8005038:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800503a:	187b      	adds	r3, r7, r1
 800503c:	2200      	movs	r2, #0
 800503e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005040:	187b      	adds	r3, r7, r1
 8005042:	2100      	movs	r1, #0
 8005044:	0018      	movs	r0, r3
 8005046:	f7fe fa85 	bl	8003554 <HAL_RCC_ClockConfig>
 800504a:	1e03      	subs	r3, r0, #0
 800504c:	d001      	beq.n	8005052 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800504e:	f000 fe1b 	bl	8005c88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8005052:	1d3b      	adds	r3, r7, #4
 8005054:	2221      	movs	r2, #33	; 0x21
 8005056:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8005058:	1d3b      	adds	r3, r7, #4
 800505a:	2200      	movs	r2, #0
 800505c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800505e:	1d3b      	adds	r3, r7, #4
 8005060:	2200      	movs	r2, #0
 8005062:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005064:	1d3b      	adds	r3, r7, #4
 8005066:	0018      	movs	r0, r3
 8005068:	f7fe fbe0 	bl	800382c <HAL_RCCEx_PeriphCLKConfig>
 800506c:	1e03      	subs	r3, r0, #0
 800506e:	d001      	beq.n	8005074 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8005070:	f000 fe0a 	bl	8005c88 <Error_Handler>
  }
}
 8005074:	46c0      	nop			; (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	b017      	add	sp, #92	; 0x5c
 800507a:	bd90      	pop	{r4, r7, pc}

0800507c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005080:	4b1b      	ldr	r3, [pc, #108]	; (80050f0 <MX_I2C1_Init+0x74>)
 8005082:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <MX_I2C1_Init+0x78>)
 8005084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8005086:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <MX_I2C1_Init+0x74>)
 8005088:	4a1b      	ldr	r2, [pc, #108]	; (80050f8 <MX_I2C1_Init+0x7c>)
 800508a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800508c:	4b18      	ldr	r3, [pc, #96]	; (80050f0 <MX_I2C1_Init+0x74>)
 800508e:	2200      	movs	r2, #0
 8005090:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005092:	4b17      	ldr	r3, [pc, #92]	; (80050f0 <MX_I2C1_Init+0x74>)
 8005094:	2201      	movs	r2, #1
 8005096:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005098:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <MX_I2C1_Init+0x74>)
 800509a:	2200      	movs	r2, #0
 800509c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800509e:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <MX_I2C1_Init+0x74>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80050a4:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <MX_I2C1_Init+0x74>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80050aa:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <MX_I2C1_Init+0x74>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80050b0:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <MX_I2C1_Init+0x74>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80050b6:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <MX_I2C1_Init+0x74>)
 80050b8:	0018      	movs	r0, r3
 80050ba:	f7fd f963 	bl	8002384 <HAL_I2C_Init>
 80050be:	1e03      	subs	r3, r0, #0
 80050c0:	d001      	beq.n	80050c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80050c2:	f000 fde1 	bl	8005c88 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80050c6:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <MX_I2C1_Init+0x74>)
 80050c8:	2100      	movs	r1, #0
 80050ca:	0018      	movs	r0, r3
 80050cc:	f7fd feb4 	bl	8002e38 <HAL_I2CEx_ConfigAnalogFilter>
 80050d0:	1e03      	subs	r3, r0, #0
 80050d2:	d001      	beq.n	80050d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80050d4:	f000 fdd8 	bl	8005c88 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80050d8:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <MX_I2C1_Init+0x74>)
 80050da:	2100      	movs	r1, #0
 80050dc:	0018      	movs	r0, r3
 80050de:	f7fd fef7 	bl	8002ed0 <HAL_I2CEx_ConfigDigitalFilter>
 80050e2:	1e03      	subs	r3, r0, #0
 80050e4:	d001      	beq.n	80050ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80050e6:	f000 fdcf 	bl	8005c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	20000030 	.word	0x20000030
 80050f4:	40005400 	.word	0x40005400
 80050f8:	2000090e 	.word	0x2000090e

080050fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005100:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <MX_SPI1_Init+0x74>)
 8005102:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <MX_SPI1_Init+0x78>)
 8005104:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005106:	4b1a      	ldr	r3, [pc, #104]	; (8005170 <MX_SPI1_Init+0x74>)
 8005108:	2282      	movs	r2, #130	; 0x82
 800510a:	0052      	lsls	r2, r2, #1
 800510c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800510e:	4b18      	ldr	r3, [pc, #96]	; (8005170 <MX_SPI1_Init+0x74>)
 8005110:	2200      	movs	r2, #0
 8005112:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8005114:	4b16      	ldr	r3, [pc, #88]	; (8005170 <MX_SPI1_Init+0x74>)
 8005116:	22f0      	movs	r2, #240	; 0xf0
 8005118:	0112      	lsls	r2, r2, #4
 800511a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800511c:	4b14      	ldr	r3, [pc, #80]	; (8005170 <MX_SPI1_Init+0x74>)
 800511e:	2200      	movs	r2, #0
 8005120:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005122:	4b13      	ldr	r3, [pc, #76]	; (8005170 <MX_SPI1_Init+0x74>)
 8005124:	2200      	movs	r2, #0
 8005126:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005128:	4b11      	ldr	r3, [pc, #68]	; (8005170 <MX_SPI1_Init+0x74>)
 800512a:	2280      	movs	r2, #128	; 0x80
 800512c:	0092      	lsls	r2, r2, #2
 800512e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005130:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <MX_SPI1_Init+0x74>)
 8005132:	2238      	movs	r2, #56	; 0x38
 8005134:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005136:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <MX_SPI1_Init+0x74>)
 8005138:	2200      	movs	r2, #0
 800513a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800513c:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <MX_SPI1_Init+0x74>)
 800513e:	2200      	movs	r2, #0
 8005140:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005142:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <MX_SPI1_Init+0x74>)
 8005144:	2200      	movs	r2, #0
 8005146:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005148:	4b09      	ldr	r3, [pc, #36]	; (8005170 <MX_SPI1_Init+0x74>)
 800514a:	2207      	movs	r2, #7
 800514c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800514e:	4b08      	ldr	r3, [pc, #32]	; (8005170 <MX_SPI1_Init+0x74>)
 8005150:	2200      	movs	r2, #0
 8005152:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005154:	4b06      	ldr	r3, [pc, #24]	; (8005170 <MX_SPI1_Init+0x74>)
 8005156:	2208      	movs	r2, #8
 8005158:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <MX_SPI1_Init+0x74>)
 800515c:	0018      	movs	r0, r3
 800515e:	f7fe fc43 	bl	80039e8 <HAL_SPI_Init>
 8005162:	1e03      	subs	r3, r0, #0
 8005164:	d001      	beq.n	800516a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005166:	f000 fd8f 	bl	8005c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	200000ec 	.word	0x200000ec
 8005174:	40013000 	.word	0x40013000

08005178 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800517c:	4b14      	ldr	r3, [pc, #80]	; (80051d0 <MX_USART1_UART_Init+0x58>)
 800517e:	4a15      	ldr	r2, [pc, #84]	; (80051d4 <MX_USART1_UART_Init+0x5c>)
 8005180:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005182:	4b13      	ldr	r3, [pc, #76]	; (80051d0 <MX_USART1_UART_Init+0x58>)
 8005184:	2296      	movs	r2, #150	; 0x96
 8005186:	0192      	lsls	r2, r2, #6
 8005188:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800518a:	4b11      	ldr	r3, [pc, #68]	; (80051d0 <MX_USART1_UART_Init+0x58>)
 800518c:	2200      	movs	r2, #0
 800518e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005190:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <MX_USART1_UART_Init+0x58>)
 8005192:	2200      	movs	r2, #0
 8005194:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005196:	4b0e      	ldr	r3, [pc, #56]	; (80051d0 <MX_USART1_UART_Init+0x58>)
 8005198:	2200      	movs	r2, #0
 800519a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800519c:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <MX_USART1_UART_Init+0x58>)
 800519e:	220c      	movs	r2, #12
 80051a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051a2:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <MX_USART1_UART_Init+0x58>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80051a8:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <MX_USART1_UART_Init+0x58>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051ae:	4b08      	ldr	r3, [pc, #32]	; (80051d0 <MX_USART1_UART_Init+0x58>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051b4:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <MX_USART1_UART_Init+0x58>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <MX_USART1_UART_Init+0x58>)
 80051bc:	0018      	movs	r0, r3
 80051be:	f7ff f833 	bl	8004228 <HAL_UART_Init>
 80051c2:	1e03      	subs	r3, r0, #0
 80051c4:	d001      	beq.n	80051ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80051c6:	f000 fd5f 	bl	8005c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	2000007c 	.word	0x2000007c
 80051d4:	40013800 	.word	0x40013800

080051d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80051d8:	b590      	push	{r4, r7, lr}
 80051da:	b089      	sub	sp, #36	; 0x24
 80051dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051de:	240c      	movs	r4, #12
 80051e0:	193b      	adds	r3, r7, r4
 80051e2:	0018      	movs	r0, r3
 80051e4:	2314      	movs	r3, #20
 80051e6:	001a      	movs	r2, r3
 80051e8:	2100      	movs	r1, #0
 80051ea:	f000 ff52 	bl	8006092 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051ee:	4b48      	ldr	r3, [pc, #288]	; (8005310 <MX_GPIO_Init+0x138>)
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	4b47      	ldr	r3, [pc, #284]	; (8005310 <MX_GPIO_Init+0x138>)
 80051f4:	2180      	movs	r1, #128	; 0x80
 80051f6:	0289      	lsls	r1, r1, #10
 80051f8:	430a      	orrs	r2, r1
 80051fa:	615a      	str	r2, [r3, #20]
 80051fc:	4b44      	ldr	r3, [pc, #272]	; (8005310 <MX_GPIO_Init+0x138>)
 80051fe:	695a      	ldr	r2, [r3, #20]
 8005200:	2380      	movs	r3, #128	; 0x80
 8005202:	029b      	lsls	r3, r3, #10
 8005204:	4013      	ands	r3, r2
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800520a:	4b41      	ldr	r3, [pc, #260]	; (8005310 <MX_GPIO_Init+0x138>)
 800520c:	695a      	ldr	r2, [r3, #20]
 800520e:	4b40      	ldr	r3, [pc, #256]	; (8005310 <MX_GPIO_Init+0x138>)
 8005210:	2180      	movs	r1, #128	; 0x80
 8005212:	02c9      	lsls	r1, r1, #11
 8005214:	430a      	orrs	r2, r1
 8005216:	615a      	str	r2, [r3, #20]
 8005218:	4b3d      	ldr	r3, [pc, #244]	; (8005310 <MX_GPIO_Init+0x138>)
 800521a:	695a      	ldr	r2, [r3, #20]
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	02db      	lsls	r3, r3, #11
 8005220:	4013      	ands	r3, r2
 8005222:	607b      	str	r3, [r7, #4]
 8005224:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_GPIO_Port, DAC_Pin, GPIO_PIN_SET);
 8005226:	2390      	movs	r3, #144	; 0x90
 8005228:	05db      	lsls	r3, r3, #23
 800522a:	2201      	movs	r2, #1
 800522c:	2110      	movs	r1, #16
 800522e:	0018      	movs	r0, r3
 8005230:	f7fd f85c 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED3_Pin|LED3B3_Pin 
 8005234:	4b37      	ldr	r3, [pc, #220]	; (8005314 <MX_GPIO_Init+0x13c>)
 8005236:	2200      	movs	r2, #0
 8005238:	211f      	movs	r1, #31
 800523a:	0018      	movs	r0, r3
 800523c:	f7fd f856 	bl	80022ec <HAL_GPIO_WritePin>
                          |LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_GPIO_Port, ADC_Pin, GPIO_PIN_RESET);
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	0059      	lsls	r1, r3, #1
 8005244:	2390      	movs	r3, #144	; 0x90
 8005246:	05db      	lsls	r3, r3, #23
 8005248:	2200      	movs	r2, #0
 800524a:	0018      	movs	r0, r3
 800524c:	f7fd f84e 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW0_Pin SW1_Pin SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW0_Pin|SW1_Pin|SW2_Pin|SW3_Pin;
 8005250:	193b      	adds	r3, r7, r4
 8005252:	220f      	movs	r2, #15
 8005254:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005256:	193b      	adds	r3, r7, r4
 8005258:	4a2f      	ldr	r2, [pc, #188]	; (8005318 <MX_GPIO_Init+0x140>)
 800525a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800525c:	193b      	adds	r3, r7, r4
 800525e:	2201      	movs	r2, #1
 8005260:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005262:	193a      	adds	r2, r7, r4
 8005264:	2390      	movs	r3, #144	; 0x90
 8005266:	05db      	lsls	r3, r3, #23
 8005268:	0011      	movs	r1, r2
 800526a:	0018      	movs	r0, r3
 800526c:	f7fc feca 	bl	8002004 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_Pin */
  GPIO_InitStruct.Pin = DAC_Pin;
 8005270:	193b      	adds	r3, r7, r4
 8005272:	2210      	movs	r2, #16
 8005274:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005276:	193b      	adds	r3, r7, r4
 8005278:	2201      	movs	r2, #1
 800527a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527c:	193b      	adds	r3, r7, r4
 800527e:	2200      	movs	r2, #0
 8005280:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005282:	193b      	adds	r3, r7, r4
 8005284:	2201      	movs	r2, #1
 8005286:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 8005288:	193a      	adds	r2, r7, r4
 800528a:	2390      	movs	r3, #144	; 0x90
 800528c:	05db      	lsls	r3, r3, #23
 800528e:	0011      	movs	r1, r2
 8005290:	0018      	movs	r0, r3
 8005292:	f7fc feb7 	bl	8002004 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED3_Pin LED3B3_Pin 
                           LED4_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED3_Pin|LED3B3_Pin 
 8005296:	0021      	movs	r1, r4
 8005298:	187b      	adds	r3, r7, r1
 800529a:	221f      	movs	r2, #31
 800529c:	601a      	str	r2, [r3, #0]
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800529e:	187b      	adds	r3, r7, r1
 80052a0:	2201      	movs	r2, #1
 80052a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a4:	187b      	adds	r3, r7, r1
 80052a6:	2200      	movs	r2, #0
 80052a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052aa:	187b      	adds	r3, r7, r1
 80052ac:	2200      	movs	r2, #0
 80052ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052b0:	000c      	movs	r4, r1
 80052b2:	187b      	adds	r3, r7, r1
 80052b4:	4a17      	ldr	r2, [pc, #92]	; (8005314 <MX_GPIO_Init+0x13c>)
 80052b6:	0019      	movs	r1, r3
 80052b8:	0010      	movs	r0, r2
 80052ba:	f7fc fea3 	bl	8002004 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_Pin */
  GPIO_InitStruct.Pin = ADC_Pin;
 80052be:	0021      	movs	r1, r4
 80052c0:	187b      	adds	r3, r7, r1
 80052c2:	2280      	movs	r2, #128	; 0x80
 80052c4:	0052      	lsls	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052c8:	187b      	adds	r3, r7, r1
 80052ca:	2201      	movs	r2, #1
 80052cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ce:	187b      	adds	r3, r7, r1
 80052d0:	2200      	movs	r2, #0
 80052d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d4:	187b      	adds	r3, r7, r1
 80052d6:	2200      	movs	r2, #0
 80052d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 80052da:	187a      	adds	r2, r7, r1
 80052dc:	2390      	movs	r3, #144	; 0x90
 80052de:	05db      	lsls	r3, r3, #23
 80052e0:	0011      	movs	r1, r2
 80052e2:	0018      	movs	r0, r3
 80052e4:	f7fc fe8e 	bl	8002004 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 80052e8:	2200      	movs	r2, #0
 80052ea:	2103      	movs	r1, #3
 80052ec:	2005      	movs	r0, #5
 80052ee:	f7fc fe11 	bl	8001f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80052f2:	2005      	movs	r0, #5
 80052f4:	f7fc fe23 	bl	8001f3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80052f8:	2200      	movs	r2, #0
 80052fa:	2100      	movs	r1, #0
 80052fc:	2006      	movs	r0, #6
 80052fe:	f7fc fe09 	bl	8001f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8005302:	2006      	movs	r0, #6
 8005304:	f7fc fe1b 	bl	8001f3e <HAL_NVIC_EnableIRQ>

}
 8005308:	46c0      	nop			; (mov r8, r8)
 800530a:	46bd      	mov	sp, r7
 800530c:	b009      	add	sp, #36	; 0x24
 800530e:	bd90      	pop	{r4, r7, pc}
 8005310:	40021000 	.word	0x40021000
 8005314:	48000400 	.word	0x48000400
 8005318:	10210000 	.word	0x10210000

0800531c <writeDACNumber>:
 * The command assembles a transmitting stream and transmits it to the DAC.
 * Configure bits are hard coded by the coefficients in the summing line to predefined bit values.
 * @param n: The 10-bit DAC value. Bits 15-10 are nulled to 0 by default.
 * @retval None
 */
void writeDACNumber(uint16_t n){
 800531c:	b590      	push	{r4, r7, lr}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	0002      	movs	r2, r0
 8005324:	1dbb      	adds	r3, r7, #6
 8005326:	801a      	strh	r2, [r3, #0]
	uint8_t data[2];

	data[1] = (1*BUF + 1*GA + 1*SHDN);							// Set configuration bits
 8005328:	210c      	movs	r1, #12
 800532a:	187b      	adds	r3, r7, r1
 800532c:	2270      	movs	r2, #112	; 0x70
 800532e:	705a      	strb	r2, [r3, #1]
	data[1] |=((n & 0x03FF) >> 6);								// Add 4 MSB to RHS
 8005330:	0008      	movs	r0, r1
 8005332:	187b      	adds	r3, r7, r1
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	b25a      	sxtb	r2, r3
 8005338:	1dbb      	adds	r3, r7, #6
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	119b      	asrs	r3, r3, #6
 800533e:	b25b      	sxtb	r3, r3
 8005340:	210f      	movs	r1, #15
 8005342:	400b      	ands	r3, r1
 8005344:	b25b      	sxtb	r3, r3
 8005346:	4313      	orrs	r3, r2
 8005348:	b25b      	sxtb	r3, r3
 800534a:	b2da      	uxtb	r2, r3
 800534c:	0001      	movs	r1, r0
 800534e:	187b      	adds	r3, r7, r1
 8005350:	705a      	strb	r2, [r3, #1]
	data[0] = ((n * 0x003F) << 2);								// Add 6 LSb to LHS
 8005352:	1dbb      	adds	r3, r7, #6
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	1c1a      	adds	r2, r3, #0
 800535a:	0192      	lsls	r2, r2, #6
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	b2db      	uxtb	r3, r3
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	b2da      	uxtb	r2, r3
 8005364:	000c      	movs	r4, r1
 8005366:	187b      	adds	r3, r7, r1
 8005368:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(DAC_GPIO_Port, DAC_Pin, GPIO_PIN_RESET);
 800536a:	2390      	movs	r3, #144	; 0x90
 800536c:	05db      	lsls	r3, r3, #23
 800536e:	2200      	movs	r2, #0
 8005370:	2110      	movs	r1, #16
 8005372:	0018      	movs	r0, r3
 8005374:	f7fc ffba 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 8005378:	2301      	movs	r3, #1
 800537a:	425b      	negs	r3, r3
 800537c:	0021      	movs	r1, r4
 800537e:	1879      	adds	r1, r7, r1
 8005380:	4807      	ldr	r0, [pc, #28]	; (80053a0 <writeDACNumber+0x84>)
 8005382:	2202      	movs	r2, #2
 8005384:	f7fe fbca 	bl	8003b1c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_GPIO_Port, DAC_Pin, GPIO_PIN_SET);
 8005388:	2390      	movs	r3, #144	; 0x90
 800538a:	05db      	lsls	r3, r3, #23
 800538c:	2201      	movs	r2, #1
 800538e:	2110      	movs	r1, #16
 8005390:	0018      	movs	r0, r3
 8005392:	f7fc ffab 	bl	80022ec <HAL_GPIO_WritePin>
}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	46bd      	mov	sp, r7
 800539a:	b005      	add	sp, #20
 800539c:	bd90      	pop	{r4, r7, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	200000ec 	.word	0x200000ec

080053a4 <writeDACVoltage>:
 * @brief Command the DAC to output a set voltage between 0 and 3V3
 * If the input exceeds this range the output is set to 0V;
 * @param V: The desired voltage output. Set to 0 if out of 0-3V3 range.
 * @retval None
 */
void writeDACVoltage(float V){
 80053a4:	b590      	push	{r4, r7, lr}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
	if(V < 0.0){
 80053ac:	2100      	movs	r1, #0
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fb f832 	bl	8000418 <__aeabi_fcmplt>
 80053b4:	1e03      	subs	r3, r0, #0
 80053b6:	d001      	beq.n	80053bc <writeDACVoltage+0x18>
		V = 0.0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	607b      	str	r3, [r7, #4]
	}

	writeDACNumber((uint16_t) ( (V/3.3) * 0x3FF) & 0x3FF);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7fc fa63 	bl	8001888 <__aeabi_f2d>
 80053c2:	4a0f      	ldr	r2, [pc, #60]	; (8005400 <writeDACVoltage+0x5c>)
 80053c4:	4b0f      	ldr	r3, [pc, #60]	; (8005404 <writeDACVoltage+0x60>)
 80053c6:	f7fb f933 	bl	8000630 <__aeabi_ddiv>
 80053ca:	0003      	movs	r3, r0
 80053cc:	000c      	movs	r4, r1
 80053ce:	0018      	movs	r0, r3
 80053d0:	0021      	movs	r1, r4
 80053d2:	2200      	movs	r2, #0
 80053d4:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <writeDACVoltage+0x64>)
 80053d6:	f7fb fc2d 	bl	8000c34 <__aeabi_dmul>
 80053da:	0003      	movs	r3, r0
 80053dc:	000c      	movs	r4, r1
 80053de:	0018      	movs	r0, r3
 80053e0:	0021      	movs	r1, r4
 80053e2:	f7fb f841 	bl	8000468 <__aeabi_d2uiz>
 80053e6:	0003      	movs	r3, r0
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	059b      	lsls	r3, r3, #22
 80053ec:	0d9b      	lsrs	r3, r3, #22
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	0018      	movs	r0, r3
 80053f2:	f7ff ff93 	bl	800531c <writeDACNumber>
}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b003      	add	sp, #12
 80053fc:	bd90      	pop	{r4, r7, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	66666666 	.word	0x66666666
 8005404:	400a6666 	.word	0x400a6666
 8005408:	408ff800 	.word	0x408ff800

0800540c <getRTCTime>:
	float ADC_Value = ( ( ((ADC_Rx[1] & 0x3) << 8) + ADC_Rx[0]) << 1) * 3.3/1024.0;

	return ADC_Value;
}

time getRTCTime(){
 800540c:	b590      	push	{r4, r7, lr}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
	time t;
	t.seconds = getRTCSeconds();
 8005414:	f000 f9de 	bl	80057d4 <getRTCSeconds>
 8005418:	0003      	movs	r3, r0
 800541a:	001a      	movs	r2, r3
 800541c:	2408      	movs	r4, #8
 800541e:	193b      	adds	r3, r7, r4
 8005420:	701a      	strb	r2, [r3, #0]
	t.minutes = getRTCMinutes();
 8005422:	f000 fa01 	bl	8005828 <getRTCMinutes>
 8005426:	0003      	movs	r3, r0
 8005428:	001a      	movs	r2, r3
 800542a:	193b      	adds	r3, r7, r4
 800542c:	705a      	strb	r2, [r3, #1]
	t.hours	  = getRTCHours();
 800542e:	f000 fa25 	bl	800587c <getRTCHours>
 8005432:	0003      	movs	r3, r0
 8005434:	001a      	movs	r2, r3
 8005436:	193b      	adds	r3, r7, r4
 8005438:	709a      	strb	r2, [r3, #2]
	t.weekday = getRTCWeekday();
 800543a:	f000 fa49 	bl	80058d0 <getRTCWeekday>
 800543e:	0003      	movs	r3, r0
 8005440:	001a      	movs	r2, r3
 8005442:	193b      	adds	r3, r7, r4
 8005444:	70da      	strb	r2, [r3, #3]
	t.date	  = getRTCDate();
 8005446:	f000 fa61 	bl	800590c <getRTCDate>
 800544a:	0003      	movs	r3, r0
 800544c:	001a      	movs	r2, r3
 800544e:	193b      	adds	r3, r7, r4
 8005450:	711a      	strb	r2, [r3, #4]
	t.month	  = getRTCMonth();
 8005452:	f000 fa85 	bl	8005960 <getRTCMonth>
 8005456:	0003      	movs	r3, r0
 8005458:	001a      	movs	r2, r3
 800545a:	193b      	adds	r3, r7, r4
 800545c:	715a      	strb	r2, [r3, #5]
	t.year	  = getRTCYear();
 800545e:	f000 faa9 	bl	80059b4 <getRTCYear>
 8005462:	0003      	movs	r3, r0
 8005464:	001a      	movs	r2, r3
 8005466:	193b      	adds	r3, r7, r4
 8005468:	719a      	strb	r2, [r3, #6]
	return t;
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	193b      	adds	r3, r7, r4
 800546e:	0010      	movs	r0, r2
 8005470:	0019      	movs	r1, r3
 8005472:	2307      	movs	r3, #7
 8005474:	001a      	movs	r2, r3
 8005476:	f000 fe03 	bl	8006080 <memcpy>
}
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	46bd      	mov	sp, r7
 800547e:	b005      	add	sp, #20
 8005480:	bd90      	pop	{r4, r7, pc}

08005482 <setRTCTime>:

void setRTCTime(time t){
 8005482:	b580      	push	{r7, lr}
 8005484:	b082      	sub	sp, #8
 8005486:	af00      	add	r7, sp, #0
 8005488:	003b      	movs	r3, r7
 800548a:	6018      	str	r0, [r3, #0]
 800548c:	6059      	str	r1, [r3, #4]
	setRTCSeconds	(t.seconds);
 800548e:	003b      	movs	r3, r7
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	0018      	movs	r0, r3
 8005494:	f000 f820 	bl	80054d8 <setRTCSeconds>
	setRTCMinutes	(t.minutes);
 8005498:	003b      	movs	r3, r7
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	0018      	movs	r0, r3
 800549e:	f000 f855 	bl	800554c <setRTCMinutes>
	setRTCHours		(t.hours);
 80054a2:	003b      	movs	r3, r7
 80054a4:	789b      	ldrb	r3, [r3, #2]
 80054a6:	0018      	movs	r0, r3
 80054a8:	f000 f88a 	bl	80055c0 <setRTCHours>
	setRTCWeekday	(t.weekday);
 80054ac:	003b      	movs	r3, r7
 80054ae:	78db      	ldrb	r3, [r3, #3]
 80054b0:	0018      	movs	r0, r3
 80054b2:	f000 f8c1 	bl	8005638 <setRTCWeekday>
	setRTCMonth		(t.month, t.year);
 80054b6:	003b      	movs	r3, r7
 80054b8:	795a      	ldrb	r2, [r3, #5]
 80054ba:	003b      	movs	r3, r7
 80054bc:	799b      	ldrb	r3, [r3, #6]
 80054be:	0019      	movs	r1, r3
 80054c0:	0010      	movs	r0, r2
 80054c2:	f000 f8df 	bl	8005684 <setRTCMonth>
	setRTCYear		(t.year);
 80054c6:	003b      	movs	r3, r7
 80054c8:	799b      	ldrb	r3, [r3, #6]
 80054ca:	0018      	movs	r0, r3
 80054cc:	f000 f948 	bl	8005760 <setRTCYear>
}
 80054d0:	46c0      	nop			; (mov r8, r8)
 80054d2:	46bd      	mov	sp, r7
 80054d4:	b002      	add	sp, #8
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <setRTCSeconds>:

void setRTCSeconds(uint8_t sec){
 80054d8:	b590      	push	{r4, r7, lr}
 80054da:	b089      	sub	sp, #36	; 0x24
 80054dc:	af04      	add	r7, sp, #16
 80054de:	0002      	movs	r2, r0
 80054e0:	1dfb      	adds	r3, r7, #7
 80054e2:	701a      	strb	r2, [r3, #0]
	sec %= 60;
 80054e4:	1dfc      	adds	r4, r7, #7
 80054e6:	1dfb      	adds	r3, r7, #7
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	213c      	movs	r1, #60	; 0x3c
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7fa fe91 	bl	8000214 <__aeabi_uidivmod>
 80054f2:	000b      	movs	r3, r1
 80054f4:	7023      	strb	r3, [r4, #0]
	decimalSeperatedValue s = seperateDecimalValues(sec);
 80054f6:	1dfb      	adds	r3, r7, #7
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	0018      	movs	r0, r3
 80054fc:	f000 fb3e 	bl	8005b7c <seperateDecimalValues>
 8005500:	1c03      	adds	r3, r0, #0
 8005502:	1c1a      	adds	r2, r3, #0
 8005504:	210c      	movs	r1, #12
 8005506:	187b      	adds	r3, r7, r1
 8005508:	801a      	strh	r2, [r3, #0]
	uint8_t RTC_Tx[1] = {(s.tens<<4) | s.ones};
 800550a:	187b      	adds	r3, r7, r1
 800550c:	785b      	ldrb	r3, [r3, #1]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	b25a      	sxtb	r2, r3
 8005512:	187b      	adds	r3, r7, r1
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	b25b      	sxtb	r3, r3
 8005518:	4313      	orrs	r3, r2
 800551a:	b25b      	sxtb	r3, r3
 800551c:	b2da      	uxtb	r2, r3
 800551e:	2108      	movs	r1, #8
 8005520:	187b      	adds	r3, r7, r1
 8005522:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RTC_ADDR<<1, RTC_SEC_ADDR, 1, RTC_Tx, 1, HAL_MAX_DELAY);
 8005524:	4808      	ldr	r0, [pc, #32]	; (8005548 <setRTCSeconds+0x70>)
 8005526:	2301      	movs	r3, #1
 8005528:	425b      	negs	r3, r3
 800552a:	9302      	str	r3, [sp, #8]
 800552c:	2301      	movs	r3, #1
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	187b      	adds	r3, r7, r1
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	2301      	movs	r3, #1
 8005536:	2200      	movs	r2, #0
 8005538:	21de      	movs	r1, #222	; 0xde
 800553a:	f7fc ffb9 	bl	80024b0 <HAL_I2C_Mem_Write>
}
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	46bd      	mov	sp, r7
 8005542:	b005      	add	sp, #20
 8005544:	bd90      	pop	{r4, r7, pc}
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	20000030 	.word	0x20000030

0800554c <setRTCMinutes>:

void setRTCMinutes(uint8_t min){
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b089      	sub	sp, #36	; 0x24
 8005550:	af04      	add	r7, sp, #16
 8005552:	0002      	movs	r2, r0
 8005554:	1dfb      	adds	r3, r7, #7
 8005556:	701a      	strb	r2, [r3, #0]
	min %= 60;
 8005558:	1dfc      	adds	r4, r7, #7
 800555a:	1dfb      	adds	r3, r7, #7
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	213c      	movs	r1, #60	; 0x3c
 8005560:	0018      	movs	r0, r3
 8005562:	f7fa fe57 	bl	8000214 <__aeabi_uidivmod>
 8005566:	000b      	movs	r3, r1
 8005568:	7023      	strb	r3, [r4, #0]
	decimalSeperatedValue s = seperateDecimalValues(min);
 800556a:	1dfb      	adds	r3, r7, #7
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	0018      	movs	r0, r3
 8005570:	f000 fb04 	bl	8005b7c <seperateDecimalValues>
 8005574:	1c03      	adds	r3, r0, #0
 8005576:	1c1a      	adds	r2, r3, #0
 8005578:	210c      	movs	r1, #12
 800557a:	187b      	adds	r3, r7, r1
 800557c:	801a      	strh	r2, [r3, #0]
	uint8_t RTC_Tx[1] = {(s.tens<<4) | s.ones};
 800557e:	187b      	adds	r3, r7, r1
 8005580:	785b      	ldrb	r3, [r3, #1]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	b25a      	sxtb	r2, r3
 8005586:	187b      	adds	r3, r7, r1
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	b25b      	sxtb	r3, r3
 800558c:	4313      	orrs	r3, r2
 800558e:	b25b      	sxtb	r3, r3
 8005590:	b2da      	uxtb	r2, r3
 8005592:	2108      	movs	r1, #8
 8005594:	187b      	adds	r3, r7, r1
 8005596:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RTC_ADDR<<1, RTC_MIN_ADDR, 1, RTC_Tx, 1, HAL_MAX_DELAY);
 8005598:	4808      	ldr	r0, [pc, #32]	; (80055bc <setRTCMinutes+0x70>)
 800559a:	2301      	movs	r3, #1
 800559c:	425b      	negs	r3, r3
 800559e:	9302      	str	r3, [sp, #8]
 80055a0:	2301      	movs	r3, #1
 80055a2:	9301      	str	r3, [sp, #4]
 80055a4:	187b      	adds	r3, r7, r1
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	2301      	movs	r3, #1
 80055aa:	2201      	movs	r2, #1
 80055ac:	21de      	movs	r1, #222	; 0xde
 80055ae:	f7fc ff7f 	bl	80024b0 <HAL_I2C_Mem_Write>
}
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	46bd      	mov	sp, r7
 80055b6:	b005      	add	sp, #20
 80055b8:	bd90      	pop	{r4, r7, pc}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	20000030 	.word	0x20000030

080055c0 <setRTCHours>:

void setRTCHours(uint8_t hour){
 80055c0:	b590      	push	{r4, r7, lr}
 80055c2:	b089      	sub	sp, #36	; 0x24
 80055c4:	af04      	add	r7, sp, #16
 80055c6:	0002      	movs	r2, r0
 80055c8:	1dfb      	adds	r3, r7, #7
 80055ca:	701a      	strb	r2, [r3, #0]
	hour %= 24;
 80055cc:	1dfc      	adds	r4, r7, #7
 80055ce:	1dfb      	adds	r3, r7, #7
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2118      	movs	r1, #24
 80055d4:	0018      	movs	r0, r3
 80055d6:	f7fa fe1d 	bl	8000214 <__aeabi_uidivmod>
 80055da:	000b      	movs	r3, r1
 80055dc:	7023      	strb	r3, [r4, #0]
	decimalSeperatedValue s = seperateDecimalValues(hour);
 80055de:	1dfb      	adds	r3, r7, #7
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	0018      	movs	r0, r3
 80055e4:	f000 faca 	bl	8005b7c <seperateDecimalValues>
 80055e8:	1c03      	adds	r3, r0, #0
 80055ea:	1c1a      	adds	r2, r3, #0
 80055ec:	210c      	movs	r1, #12
 80055ee:	187b      	adds	r3, r7, r1
 80055f0:	801a      	strh	r2, [r3, #0]
	uint8_t RTC_Tx[1] = {~0x40 & ((s.tens<<4) | s.ones)};
 80055f2:	187b      	adds	r3, r7, r1
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	b25a      	sxtb	r2, r3
 80055fa:	187b      	adds	r3, r7, r1
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	b25b      	sxtb	r3, r3
 8005600:	4313      	orrs	r3, r2
 8005602:	b25b      	sxtb	r3, r3
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2240      	movs	r2, #64	; 0x40
 8005608:	4393      	bics	r3, r2
 800560a:	b2da      	uxtb	r2, r3
 800560c:	2108      	movs	r1, #8
 800560e:	187b      	adds	r3, r7, r1
 8005610:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RTC_ADDR<<1, RTC_HOUR_ADDR, 1, RTC_Tx, 1, HAL_MAX_DELAY);
 8005612:	4808      	ldr	r0, [pc, #32]	; (8005634 <setRTCHours+0x74>)
 8005614:	2301      	movs	r3, #1
 8005616:	425b      	negs	r3, r3
 8005618:	9302      	str	r3, [sp, #8]
 800561a:	2301      	movs	r3, #1
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	187b      	adds	r3, r7, r1
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	2301      	movs	r3, #1
 8005624:	2202      	movs	r2, #2
 8005626:	21de      	movs	r1, #222	; 0xde
 8005628:	f7fc ff42 	bl	80024b0 <HAL_I2C_Mem_Write>
}
 800562c:	46c0      	nop			; (mov r8, r8)
 800562e:	46bd      	mov	sp, r7
 8005630:	b005      	add	sp, #20
 8005632:	bd90      	pop	{r4, r7, pc}
 8005634:	20000030 	.word	0x20000030

08005638 <setRTCWeekday>:

void setRTCWeekday(uint8_t weekday){
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af04      	add	r7, sp, #16
 800563e:	0002      	movs	r2, r0
 8005640:	1dfb      	adds	r3, r7, #7
 8005642:	701a      	strb	r2, [r3, #0]
	if(weekday > 7)
 8005644:	1dfb      	adds	r3, r7, #7
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b07      	cmp	r3, #7
 800564a:	d902      	bls.n	8005652 <setRTCWeekday+0x1a>
		weekday = 1;
 800564c:	1dfb      	adds	r3, r7, #7
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]

	uint8_t RTC_Tx[1] = {weekday};
 8005652:	210c      	movs	r1, #12
 8005654:	187b      	adds	r3, r7, r1
 8005656:	1dfa      	adds	r2, r7, #7
 8005658:	7812      	ldrb	r2, [r2, #0]
 800565a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RTC_ADDR<<1, RTC_WEEKDAY_ADDR, 1, RTC_Tx, 1, HAL_MAX_DELAY);
 800565c:	4808      	ldr	r0, [pc, #32]	; (8005680 <setRTCWeekday+0x48>)
 800565e:	2301      	movs	r3, #1
 8005660:	425b      	negs	r3, r3
 8005662:	9302      	str	r3, [sp, #8]
 8005664:	2301      	movs	r3, #1
 8005666:	9301      	str	r3, [sp, #4]
 8005668:	187b      	adds	r3, r7, r1
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	2301      	movs	r3, #1
 800566e:	2203      	movs	r2, #3
 8005670:	21de      	movs	r1, #222	; 0xde
 8005672:	f7fc ff1d 	bl	80024b0 <HAL_I2C_Mem_Write>
}
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	46bd      	mov	sp, r7
 800567a:	b004      	add	sp, #16
 800567c:	bd80      	pop	{r7, pc}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	20000030 	.word	0x20000030

08005684 <setRTCMonth>:
	decimalSeperatedValue s = seperateDecimalValues(date);
	uint8_t RTC_Tx[1] = {(s.tens<<4) | s.ones};
	HAL_I2C_Mem_Write(&hi2c1, RTC_ADDR<<1, RTC_DATE_ADDR, 1, RTC_Tx, 1, HAL_MAX_DELAY);
}

void setRTCMonth(uint8_t month, uint8_t year){
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af04      	add	r7, sp, #16
 800568a:	0002      	movs	r2, r0
 800568c:	1dfb      	adds	r3, r7, #7
 800568e:	701a      	strb	r2, [r3, #0]
 8005690:	1dbb      	adds	r3, r7, #6
 8005692:	1c0a      	adds	r2, r1, #0
 8005694:	701a      	strb	r2, [r3, #0]
	if(month > 12)
 8005696:	1dfb      	adds	r3, r7, #7
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b0c      	cmp	r3, #12
 800569c:	d902      	bls.n	80056a4 <setRTCMonth+0x20>
		month = 1;
 800569e:	1dfb      	adds	r3, r7, #7
 80056a0:	2201      	movs	r2, #1
 80056a2:	701a      	strb	r2, [r3, #0]
	decimalSeperatedValue s = seperateDecimalValues(month);
 80056a4:	1dfb      	adds	r3, r7, #7
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	0018      	movs	r0, r3
 80056aa:	f000 fa67 	bl	8005b7c <seperateDecimalValues>
 80056ae:	1c03      	adds	r3, r0, #0
 80056b0:	1c1a      	adds	r2, r3, #0
 80056b2:	230c      	movs	r3, #12
 80056b4:	18fb      	adds	r3, r7, r3
 80056b6:	801a      	strh	r2, [r3, #0]

	uint8_t leapyear;
	if(year % 4 ==0){
 80056b8:	1dbb      	adds	r3, r7, #6
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2203      	movs	r2, #3
 80056be:	4013      	ands	r3, r2
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d121      	bne.n	800570a <setRTCMonth+0x86>
		if(year % 100 != 0){
 80056c6:	1dbb      	adds	r3, r7, #6
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2164      	movs	r1, #100	; 0x64
 80056cc:	0018      	movs	r0, r3
 80056ce:	f7fa fda1 	bl	8000214 <__aeabi_uidivmod>
 80056d2:	000b      	movs	r3, r1
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d012      	beq.n	8005700 <setRTCMonth+0x7c>
			if(year%400 == 0){
 80056da:	1dbb      	adds	r3, r7, #6
 80056dc:	781a      	ldrb	r2, [r3, #0]
 80056de:	23c8      	movs	r3, #200	; 0xc8
 80056e0:	0059      	lsls	r1, r3, #1
 80056e2:	0010      	movs	r0, r2
 80056e4:	f7fa fe80 	bl	80003e8 <__aeabi_idivmod>
 80056e8:	1e0b      	subs	r3, r1, #0
 80056ea:	d104      	bne.n	80056f6 <setRTCMonth+0x72>
				leapyear = 0x20;
 80056ec:	230f      	movs	r3, #15
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	2220      	movs	r2, #32
 80056f2:	701a      	strb	r2, [r3, #0]
 80056f4:	e00d      	b.n	8005712 <setRTCMonth+0x8e>
			}
			else{
				leapyear = 0x00;
 80056f6:	230f      	movs	r3, #15
 80056f8:	18fb      	adds	r3, r7, r3
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	e008      	b.n	8005712 <setRTCMonth+0x8e>
			}
		}
		else{
			leapyear = 0x20;
 8005700:	230f      	movs	r3, #15
 8005702:	18fb      	adds	r3, r7, r3
 8005704:	2220      	movs	r2, #32
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	e003      	b.n	8005712 <setRTCMonth+0x8e>
		}
	}
	else{
		leapyear = 0x00;
 800570a:	230f      	movs	r3, #15
 800570c:	18fb      	adds	r3, r7, r3
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]
	}

	uint8_t RTC_Tx[1] = {leapyear | (s.tens<<4) | s.ones};
 8005712:	210c      	movs	r1, #12
 8005714:	187b      	adds	r3, r7, r1
 8005716:	785b      	ldrb	r3, [r3, #1]
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	b25a      	sxtb	r2, r3
 800571c:	230f      	movs	r3, #15
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	b25b      	sxtb	r3, r3
 8005724:	4313      	orrs	r3, r2
 8005726:	b25a      	sxtb	r2, r3
 8005728:	187b      	adds	r3, r7, r1
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	b25b      	sxtb	r3, r3
 800572e:	4313      	orrs	r3, r2
 8005730:	b25b      	sxtb	r3, r3
 8005732:	b2da      	uxtb	r2, r3
 8005734:	2108      	movs	r1, #8
 8005736:	187b      	adds	r3, r7, r1
 8005738:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RTC_ADDR<<1, RTC_MONTH_ADDR, 1, RTC_Tx, 1, HAL_MAX_DELAY);
 800573a:	4808      	ldr	r0, [pc, #32]	; (800575c <setRTCMonth+0xd8>)
 800573c:	2301      	movs	r3, #1
 800573e:	425b      	negs	r3, r3
 8005740:	9302      	str	r3, [sp, #8]
 8005742:	2301      	movs	r3, #1
 8005744:	9301      	str	r3, [sp, #4]
 8005746:	187b      	adds	r3, r7, r1
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	2301      	movs	r3, #1
 800574c:	2205      	movs	r2, #5
 800574e:	21de      	movs	r1, #222	; 0xde
 8005750:	f7fc feae 	bl	80024b0 <HAL_I2C_Mem_Write>
}
 8005754:	46c0      	nop			; (mov r8, r8)
 8005756:	46bd      	mov	sp, r7
 8005758:	b004      	add	sp, #16
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20000030 	.word	0x20000030

08005760 <setRTCYear>:

void setRTCYear(uint8_t year){
 8005760:	b590      	push	{r4, r7, lr}
 8005762:	b089      	sub	sp, #36	; 0x24
 8005764:	af04      	add	r7, sp, #16
 8005766:	0002      	movs	r2, r0
 8005768:	1dfb      	adds	r3, r7, #7
 800576a:	701a      	strb	r2, [r3, #0]
	year %= 100;
 800576c:	1dfc      	adds	r4, r7, #7
 800576e:	1dfb      	adds	r3, r7, #7
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2164      	movs	r1, #100	; 0x64
 8005774:	0018      	movs	r0, r3
 8005776:	f7fa fd4d 	bl	8000214 <__aeabi_uidivmod>
 800577a:	000b      	movs	r3, r1
 800577c:	7023      	strb	r3, [r4, #0]
	decimalSeperatedValue s = seperateDecimalValues(year);
 800577e:	1dfb      	adds	r3, r7, #7
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	0018      	movs	r0, r3
 8005784:	f000 f9fa 	bl	8005b7c <seperateDecimalValues>
 8005788:	1c03      	adds	r3, r0, #0
 800578a:	1c1a      	adds	r2, r3, #0
 800578c:	210c      	movs	r1, #12
 800578e:	187b      	adds	r3, r7, r1
 8005790:	801a      	strh	r2, [r3, #0]
	uint8_t RTC_Tx[1] = {(s.tens<<4) | s.ones};
 8005792:	187b      	adds	r3, r7, r1
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	b25a      	sxtb	r2, r3
 800579a:	187b      	adds	r3, r7, r1
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	b25b      	sxtb	r3, r3
 80057a0:	4313      	orrs	r3, r2
 80057a2:	b25b      	sxtb	r3, r3
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	2108      	movs	r1, #8
 80057a8:	187b      	adds	r3, r7, r1
 80057aa:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, RTC_ADDR<<1, RTC_YEAR_ADDR, 1, RTC_Tx, 1, HAL_MAX_DELAY);
 80057ac:	4808      	ldr	r0, [pc, #32]	; (80057d0 <setRTCYear+0x70>)
 80057ae:	2301      	movs	r3, #1
 80057b0:	425b      	negs	r3, r3
 80057b2:	9302      	str	r3, [sp, #8]
 80057b4:	2301      	movs	r3, #1
 80057b6:	9301      	str	r3, [sp, #4]
 80057b8:	187b      	adds	r3, r7, r1
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	2301      	movs	r3, #1
 80057be:	2206      	movs	r2, #6
 80057c0:	21de      	movs	r1, #222	; 0xde
 80057c2:	f7fc fe75 	bl	80024b0 <HAL_I2C_Mem_Write>
}
 80057c6:	46c0      	nop			; (mov r8, r8)
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b005      	add	sp, #20
 80057cc:	bd90      	pop	{r4, r7, pc}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	20000030 	.word	0x20000030

080057d4 <getRTCSeconds>:

uint8_t getRTCSeconds(){
 80057d4:	b590      	push	{r4, r7, lr}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af04      	add	r7, sp, #16
	uint8_t RTC_Rx[1];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR<<1, RTC_SEC_ADDR, 1, RTC_Rx, 1, HAL_MAX_DELAY);
 80057da:	4812      	ldr	r0, [pc, #72]	; (8005824 <getRTCSeconds+0x50>)
 80057dc:	2301      	movs	r3, #1
 80057de:	425b      	negs	r3, r3
 80057e0:	9302      	str	r3, [sp, #8]
 80057e2:	2301      	movs	r3, #1
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	003b      	movs	r3, r7
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	2301      	movs	r3, #1
 80057ec:	2200      	movs	r2, #0
 80057ee:	21de      	movs	r1, #222	; 0xde
 80057f0:	f7fc ff9e 	bl	8002730 <HAL_I2C_Mem_Read>
	uint8_t sec = mergeDecimalSeperatedValue(extractRegisterValues(RTC_Rx[0], 3));
 80057f4:	003b      	movs	r3, r7
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2103      	movs	r1, #3
 80057fa:	0018      	movs	r0, r3
 80057fc:	f000 fa0a 	bl	8005c14 <extractRegisterValues>
 8005800:	1c03      	adds	r3, r0, #0
 8005802:	1c1a      	adds	r2, r3, #0
 8005804:	1d3b      	adds	r3, r7, #4
 8005806:	801a      	strh	r2, [r3, #0]
 8005808:	1dfc      	adds	r4, r7, #7
 800580a:	1d3b      	adds	r3, r7, #4
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	f000 f9ed 	bl	8005bec <mergeDecimalSeperatedValue>
 8005812:	0003      	movs	r3, r0
 8005814:	7023      	strb	r3, [r4, #0]
	return sec;
 8005816:	1dfb      	adds	r3, r7, #7
 8005818:	781b      	ldrb	r3, [r3, #0]
}
 800581a:	0018      	movs	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	b003      	add	sp, #12
 8005820:	bd90      	pop	{r4, r7, pc}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	20000030 	.word	0x20000030

08005828 <getRTCMinutes>:

uint8_t getRTCMinutes(){
 8005828:	b590      	push	{r4, r7, lr}
 800582a:	b087      	sub	sp, #28
 800582c:	af04      	add	r7, sp, #16
	uint8_t RTC_Rx[1];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR<<1, RTC_MIN_ADDR, 1, RTC_Rx, 1, HAL_MAX_DELAY);
 800582e:	4812      	ldr	r0, [pc, #72]	; (8005878 <getRTCMinutes+0x50>)
 8005830:	2301      	movs	r3, #1
 8005832:	425b      	negs	r3, r3
 8005834:	9302      	str	r3, [sp, #8]
 8005836:	2301      	movs	r3, #1
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	003b      	movs	r3, r7
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	2301      	movs	r3, #1
 8005840:	2201      	movs	r2, #1
 8005842:	21de      	movs	r1, #222	; 0xde
 8005844:	f7fc ff74 	bl	8002730 <HAL_I2C_Mem_Read>
	uint8_t min = mergeDecimalSeperatedValue(extractRegisterValues(RTC_Rx[0], 3));
 8005848:	003b      	movs	r3, r7
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2103      	movs	r1, #3
 800584e:	0018      	movs	r0, r3
 8005850:	f000 f9e0 	bl	8005c14 <extractRegisterValues>
 8005854:	1c03      	adds	r3, r0, #0
 8005856:	1c1a      	adds	r2, r3, #0
 8005858:	1d3b      	adds	r3, r7, #4
 800585a:	801a      	strh	r2, [r3, #0]
 800585c:	1dfc      	adds	r4, r7, #7
 800585e:	1d3b      	adds	r3, r7, #4
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	f000 f9c3 	bl	8005bec <mergeDecimalSeperatedValue>
 8005866:	0003      	movs	r3, r0
 8005868:	7023      	strb	r3, [r4, #0]
	return min;
 800586a:	1dfb      	adds	r3, r7, #7
 800586c:	781b      	ldrb	r3, [r3, #0]
}
 800586e:	0018      	movs	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	b003      	add	sp, #12
 8005874:	bd90      	pop	{r4, r7, pc}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	20000030 	.word	0x20000030

0800587c <getRTCHours>:

uint8_t getRTCHours(){
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b087      	sub	sp, #28
 8005880:	af04      	add	r7, sp, #16
	uint8_t RTC_Rx[1];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR<<1, RTC_HOUR_ADDR, 1, RTC_Rx, 1, HAL_MAX_DELAY);
 8005882:	4812      	ldr	r0, [pc, #72]	; (80058cc <getRTCHours+0x50>)
 8005884:	2301      	movs	r3, #1
 8005886:	425b      	negs	r3, r3
 8005888:	9302      	str	r3, [sp, #8]
 800588a:	2301      	movs	r3, #1
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	003b      	movs	r3, r7
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	2301      	movs	r3, #1
 8005894:	2202      	movs	r2, #2
 8005896:	21de      	movs	r1, #222	; 0xde
 8005898:	f7fc ff4a 	bl	8002730 <HAL_I2C_Mem_Read>
	uint8_t hour = mergeDecimalSeperatedValue(extractRegisterValues(RTC_Rx[0], 2));
 800589c:	003b      	movs	r3, r7
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2102      	movs	r1, #2
 80058a2:	0018      	movs	r0, r3
 80058a4:	f000 f9b6 	bl	8005c14 <extractRegisterValues>
 80058a8:	1c03      	adds	r3, r0, #0
 80058aa:	1c1a      	adds	r2, r3, #0
 80058ac:	1d3b      	adds	r3, r7, #4
 80058ae:	801a      	strh	r2, [r3, #0]
 80058b0:	1dfc      	adds	r4, r7, #7
 80058b2:	1d3b      	adds	r3, r7, #4
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	f000 f999 	bl	8005bec <mergeDecimalSeperatedValue>
 80058ba:	0003      	movs	r3, r0
 80058bc:	7023      	strb	r3, [r4, #0]
	return hour;
 80058be:	1dfb      	adds	r3, r7, #7
 80058c0:	781b      	ldrb	r3, [r3, #0]
}
 80058c2:	0018      	movs	r0, r3
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b003      	add	sp, #12
 80058c8:	bd90      	pop	{r4, r7, pc}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	20000030 	.word	0x20000030

080058d0 <getRTCWeekday>:

uint8_t getRTCWeekday(){
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af04      	add	r7, sp, #16
	uint8_t RTC_Rx[1];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR<<1, RTC_WEEKDAY_ADDR, 1, RTC_Rx, 1, HAL_MAX_DELAY);
 80058d6:	480c      	ldr	r0, [pc, #48]	; (8005908 <getRTCWeekday+0x38>)
 80058d8:	2301      	movs	r3, #1
 80058da:	425b      	negs	r3, r3
 80058dc:	9302      	str	r3, [sp, #8]
 80058de:	2301      	movs	r3, #1
 80058e0:	9301      	str	r3, [sp, #4]
 80058e2:	1d3b      	adds	r3, r7, #4
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	2301      	movs	r3, #1
 80058e8:	2203      	movs	r2, #3
 80058ea:	21de      	movs	r1, #222	; 0xde
 80058ec:	f7fc ff20 	bl	8002730 <HAL_I2C_Mem_Read>
	uint8_t weekday = RTC_Rx[0] & 0x07;
 80058f0:	1d3b      	adds	r3, r7, #4
 80058f2:	781a      	ldrb	r2, [r3, #0]
 80058f4:	1dfb      	adds	r3, r7, #7
 80058f6:	2107      	movs	r1, #7
 80058f8:	400a      	ands	r2, r1
 80058fa:	701a      	strb	r2, [r3, #0]
	return weekday;
 80058fc:	1dfb      	adds	r3, r7, #7
 80058fe:	781b      	ldrb	r3, [r3, #0]
}
 8005900:	0018      	movs	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	b002      	add	sp, #8
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20000030 	.word	0x20000030

0800590c <getRTCDate>:

uint8_t getRTCDate(){
 800590c:	b590      	push	{r4, r7, lr}
 800590e:	b087      	sub	sp, #28
 8005910:	af04      	add	r7, sp, #16
	uint8_t RTC_Rx[1];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR<<1, RTC_DATE_ADDR, 1, RTC_Rx, 1, HAL_MAX_DELAY);
 8005912:	4812      	ldr	r0, [pc, #72]	; (800595c <getRTCDate+0x50>)
 8005914:	2301      	movs	r3, #1
 8005916:	425b      	negs	r3, r3
 8005918:	9302      	str	r3, [sp, #8]
 800591a:	2301      	movs	r3, #1
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	003b      	movs	r3, r7
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	2301      	movs	r3, #1
 8005924:	2204      	movs	r2, #4
 8005926:	21de      	movs	r1, #222	; 0xde
 8005928:	f7fc ff02 	bl	8002730 <HAL_I2C_Mem_Read>
	uint8_t date = mergeDecimalSeperatedValue(extractRegisterValues(RTC_Rx[0], 2));
 800592c:	003b      	movs	r3, r7
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2102      	movs	r1, #2
 8005932:	0018      	movs	r0, r3
 8005934:	f000 f96e 	bl	8005c14 <extractRegisterValues>
 8005938:	1c03      	adds	r3, r0, #0
 800593a:	1c1a      	adds	r2, r3, #0
 800593c:	1d3b      	adds	r3, r7, #4
 800593e:	801a      	strh	r2, [r3, #0]
 8005940:	1dfc      	adds	r4, r7, #7
 8005942:	1d3b      	adds	r3, r7, #4
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	f000 f951 	bl	8005bec <mergeDecimalSeperatedValue>
 800594a:	0003      	movs	r3, r0
 800594c:	7023      	strb	r3, [r4, #0]
	return date;
 800594e:	1dfb      	adds	r3, r7, #7
 8005950:	781b      	ldrb	r3, [r3, #0]
}
 8005952:	0018      	movs	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	b003      	add	sp, #12
 8005958:	bd90      	pop	{r4, r7, pc}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	20000030 	.word	0x20000030

08005960 <getRTCMonth>:

uint8_t getRTCMonth(){
 8005960:	b590      	push	{r4, r7, lr}
 8005962:	b087      	sub	sp, #28
 8005964:	af04      	add	r7, sp, #16
	uint8_t RTC_Rx[1];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR<<1, RTC_MONTH_ADDR, 1, RTC_Rx, 1, HAL_MAX_DELAY);
 8005966:	4812      	ldr	r0, [pc, #72]	; (80059b0 <getRTCMonth+0x50>)
 8005968:	2301      	movs	r3, #1
 800596a:	425b      	negs	r3, r3
 800596c:	9302      	str	r3, [sp, #8]
 800596e:	2301      	movs	r3, #1
 8005970:	9301      	str	r3, [sp, #4]
 8005972:	003b      	movs	r3, r7
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	2301      	movs	r3, #1
 8005978:	2205      	movs	r2, #5
 800597a:	21de      	movs	r1, #222	; 0xde
 800597c:	f7fc fed8 	bl	8002730 <HAL_I2C_Mem_Read>
	uint8_t month = mergeDecimalSeperatedValue(extractRegisterValues(RTC_Rx[0], 1));
 8005980:	003b      	movs	r3, r7
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2101      	movs	r1, #1
 8005986:	0018      	movs	r0, r3
 8005988:	f000 f944 	bl	8005c14 <extractRegisterValues>
 800598c:	1c03      	adds	r3, r0, #0
 800598e:	1c1a      	adds	r2, r3, #0
 8005990:	1d3b      	adds	r3, r7, #4
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	1dfc      	adds	r4, r7, #7
 8005996:	1d3b      	adds	r3, r7, #4
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	f000 f927 	bl	8005bec <mergeDecimalSeperatedValue>
 800599e:	0003      	movs	r3, r0
 80059a0:	7023      	strb	r3, [r4, #0]
	return month;
 80059a2:	1dfb      	adds	r3, r7, #7
 80059a4:	781b      	ldrb	r3, [r3, #0]
}
 80059a6:	0018      	movs	r0, r3
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b003      	add	sp, #12
 80059ac:	bd90      	pop	{r4, r7, pc}
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	20000030 	.word	0x20000030

080059b4 <getRTCYear>:

uint8_t getRTCYear(){
 80059b4:	b590      	push	{r4, r7, lr}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af04      	add	r7, sp, #16
	uint8_t RTC_Rx[1];
	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR<<1, RTC_YEAR_ADDR, 1, RTC_Rx, 1, HAL_MAX_DELAY);
 80059ba:	4812      	ldr	r0, [pc, #72]	; (8005a04 <getRTCYear+0x50>)
 80059bc:	2301      	movs	r3, #1
 80059be:	425b      	negs	r3, r3
 80059c0:	9302      	str	r3, [sp, #8]
 80059c2:	2301      	movs	r3, #1
 80059c4:	9301      	str	r3, [sp, #4]
 80059c6:	003b      	movs	r3, r7
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	2301      	movs	r3, #1
 80059cc:	2206      	movs	r2, #6
 80059ce:	21de      	movs	r1, #222	; 0xde
 80059d0:	f7fc feae 	bl	8002730 <HAL_I2C_Mem_Read>
	uint8_t year = mergeDecimalSeperatedValue(extractRegisterValues(RTC_Rx[0], 4));
 80059d4:	003b      	movs	r3, r7
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2104      	movs	r1, #4
 80059da:	0018      	movs	r0, r3
 80059dc:	f000 f91a 	bl	8005c14 <extractRegisterValues>
 80059e0:	1c03      	adds	r3, r0, #0
 80059e2:	1c1a      	adds	r2, r3, #0
 80059e4:	1d3b      	adds	r3, r7, #4
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	1dfc      	adds	r4, r7, #7
 80059ea:	1d3b      	adds	r3, r7, #4
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	f000 f8fd 	bl	8005bec <mergeDecimalSeperatedValue>
 80059f2:	0003      	movs	r3, r0
 80059f4:	7023      	strb	r3, [r4, #0]
	return year;
 80059f6:	1dfb      	adds	r3, r7, #7
 80059f8:	781b      	ldrb	r3, [r3, #0]
}
 80059fa:	0018      	movs	r0, r3
 80059fc:	46bd      	mov	sp, r7
 80059fe:	b003      	add	sp, #12
 8005a00:	bd90      	pop	{r4, r7, pc}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	20000030 	.word	0x20000030

08005a08 <startRTC>:


uint8_t startRTC(){
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af04      	add	r7, sp, #16
	decimalSeperatedValue s = seperateDecimalValues(getRTCSeconds());
 8005a0e:	f7ff fee1 	bl	80057d4 <getRTCSeconds>
 8005a12:	0003      	movs	r3, r0
 8005a14:	0018      	movs	r0, r3
 8005a16:	f000 f8b1 	bl	8005b7c <seperateDecimalValues>
 8005a1a:	1c03      	adds	r3, r0, #0
 8005a1c:	1c1a      	adds	r2, r3, #0
 8005a1e:	1d3b      	adds	r3, r7, #4
 8005a20:	801a      	strh	r2, [r3, #0]

	uint8_t RTC_Tx[1] = {0x80 | (s.tens<<4) | s.ones};
 8005a22:	1d3b      	adds	r3, r7, #4
 8005a24:	785b      	ldrb	r3, [r3, #1]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	1d3b      	adds	r3, r7, #4
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2280      	movs	r2, #128	; 0x80
 8005a34:	4252      	negs	r2, r2
 8005a36:	4313      	orrs	r3, r2
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	003b      	movs	r3, r7
 8005a3c:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Write(&hi2c1, RTC_ADDR<<1, RTC_SEC_ADDR, 1, RTC_Tx, 1, HAL_MAX_DELAY);
 8005a3e:	480b      	ldr	r0, [pc, #44]	; (8005a6c <startRTC+0x64>)
 8005a40:	2301      	movs	r3, #1
 8005a42:	425b      	negs	r3, r3
 8005a44:	9302      	str	r3, [sp, #8]
 8005a46:	2301      	movs	r3, #1
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	003b      	movs	r3, r7
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	2301      	movs	r3, #1
 8005a50:	2200      	movs	r2, #0
 8005a52:	21de      	movs	r1, #222	; 0xde
 8005a54:	f7fc fd2c 	bl	80024b0 <HAL_I2C_Mem_Write>

	HAL_Delay(3);						// Delay by 3ms to give margin for ~1ms time for OSCRUN bit to set
 8005a58:	2003      	movs	r0, #3
 8005a5a:	f7fc f995 	bl	8001d88 <HAL_Delay>

	return getRTCOscillatorStatus();
 8005a5e:	f000 f807 	bl	8005a70 <getRTCOscillatorStatus>
 8005a62:	0003      	movs	r3, r0
}
 8005a64:	0018      	movs	r0, r3
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b002      	add	sp, #8
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20000030 	.word	0x20000030

08005a70 <getRTCOscillatorStatus>:
	setRTCSeconds(getRTCSeconds());		// This effectively clears the ST bit while retaining the seconds value.
	HAL_Delay(3);						// ~1ms of no oscillator is required before the OSCRUN bit is changed
	return getRTCOscillatorStatus();
}

uint8_t getRTCOscillatorStatus(){
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af04      	add	r7, sp, #16
	uint8_t RTC_Rx[1];

	HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR<<1, RTC_WEEKDAY_ADDR, 1, RTC_Rx, 1, HAL_MAX_DELAY);
 8005a76:	480d      	ldr	r0, [pc, #52]	; (8005aac <getRTCOscillatorStatus+0x3c>)
 8005a78:	2301      	movs	r3, #1
 8005a7a:	425b      	negs	r3, r3
 8005a7c:	9302      	str	r3, [sp, #8]
 8005a7e:	2301      	movs	r3, #1
 8005a80:	9301      	str	r3, [sp, #4]
 8005a82:	1d3b      	adds	r3, r7, #4
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	2301      	movs	r3, #1
 8005a88:	2203      	movs	r2, #3
 8005a8a:	21de      	movs	r1, #222	; 0xde
 8005a8c:	f7fc fe50 	bl	8002730 <HAL_I2C_Mem_Read>

	uint8_t oscStatus = (RTC_Rx[0] & 0x20) >> 5;
 8005a90:	1d3b      	adds	r3, r7, #4
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	115b      	asrs	r3, r3, #5
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	1dfb      	adds	r3, r7, #7
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	400a      	ands	r2, r1
 8005a9e:	701a      	strb	r2, [r3, #0]

	return oscStatus;
 8005aa0:	1dfb      	adds	r3, r7, #7
 8005aa2:	781b      	ldrb	r3, [r3, #0]
}
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	b002      	add	sp, #8
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	20000030 	.word	0x20000030

08005ab0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	0002      	movs	r2, r0
 8005ab8:	1dbb      	adds	r3, r7, #6
 8005aba:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005abc:	4b0e      	ldr	r3, [pc, #56]	; (8005af8 <HAL_GPIO_EXTI_Callback+0x48>)
 8005abe:	2102      	movs	r1, #2
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	f7fc fc30 	bl	8002326 <HAL_GPIO_TogglePin>

	switch(GPIO_Pin){
 8005ac6:	1dbb      	adds	r3, r7, #6
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d008      	beq.n	8005ae0 <HAL_GPIO_EXTI_Callback+0x30>
 8005ace:	dc02      	bgt.n	8005ad6 <HAL_GPIO_EXTI_Callback+0x26>
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d007      	beq.n	8005ae4 <HAL_GPIO_EXTI_Callback+0x34>
			break;
		case SW3_Pin:

			break;
		default:
			break;
 8005ad4:	e00b      	b.n	8005aee <HAL_GPIO_EXTI_Callback+0x3e>
	switch(GPIO_Pin){
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d006      	beq.n	8005ae8 <HAL_GPIO_EXTI_Callback+0x38>
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d006      	beq.n	8005aec <HAL_GPIO_EXTI_Callback+0x3c>
			break;
 8005ade:	e006      	b.n	8005aee <HAL_GPIO_EXTI_Callback+0x3e>
			break;
 8005ae0:	46c0      	nop			; (mov r8, r8)
 8005ae2:	e004      	b.n	8005aee <HAL_GPIO_EXTI_Callback+0x3e>
			break;
 8005ae4:	46c0      	nop			; (mov r8, r8)
 8005ae6:	e002      	b.n	8005aee <HAL_GPIO_EXTI_Callback+0x3e>
			break;
 8005ae8:	46c0      	nop			; (mov r8, r8)
 8005aea:	e000      	b.n	8005aee <HAL_GPIO_EXTI_Callback+0x3e>
			break;
 8005aec:	46c0      	nop			; (mov r8, r8)
	}

}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b002      	add	sp, #8
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	48000400 	.word	0x48000400

08005afc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005afc:	b590      	push	{r4, r7, lr}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8005b04:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <HAL_UART_RxCpltCallback+0x5c>)
 8005b06:	2101      	movs	r1, #1
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f7fc fc0c 	bl	8002326 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart1, UARTbuffer, sizeof(UARTbuffer), HAL_MAX_DELAY);
 8005b0e:	2301      	movs	r3, #1
 8005b10:	425b      	negs	r3, r3
 8005b12:	4912      	ldr	r1, [pc, #72]	; (8005b5c <HAL_UART_RxCpltCallback+0x60>)
 8005b14:	4812      	ldr	r0, [pc, #72]	; (8005b60 <HAL_UART_RxCpltCallback+0x64>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	f7fe fbde 	bl	80042d8 <HAL_UART_Transmit>

	writeDACVoltage((float) (((UARTbuffer[0]-'0') * (3.3/10))));
 8005b1c:	4b0f      	ldr	r3, [pc, #60]	; (8005b5c <HAL_UART_RxCpltCallback+0x60>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	3b30      	subs	r3, #48	; 0x30
 8005b22:	0018      	movs	r0, r3
 8005b24:	f7fb fe76 	bl	8001814 <__aeabi_i2d>
 8005b28:	4a0e      	ldr	r2, [pc, #56]	; (8005b64 <HAL_UART_RxCpltCallback+0x68>)
 8005b2a:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <HAL_UART_RxCpltCallback+0x6c>)
 8005b2c:	f7fb f882 	bl	8000c34 <__aeabi_dmul>
 8005b30:	0003      	movs	r3, r0
 8005b32:	000c      	movs	r4, r1
 8005b34:	0018      	movs	r0, r3
 8005b36:	0021      	movs	r1, r4
 8005b38:	f7fb fef8 	bl	800192c <__aeabi_d2f>
 8005b3c:	1c03      	adds	r3, r0, #0
 8005b3e:	1c18      	adds	r0, r3, #0
 8005b40:	f7ff fc30 	bl	80053a4 <writeDACVoltage>

	HAL_UART_Receive_IT(&huart1, UARTbuffer, sizeof(UARTbuffer));
 8005b44:	4905      	ldr	r1, [pc, #20]	; (8005b5c <HAL_UART_RxCpltCallback+0x60>)
 8005b46:	4b06      	ldr	r3, [pc, #24]	; (8005b60 <HAL_UART_RxCpltCallback+0x64>)
 8005b48:	2201      	movs	r2, #1
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	f7fe fc68 	bl	8004420 <HAL_UART_Receive_IT>
}
 8005b50:	46c0      	nop			; (mov r8, r8)
 8005b52:	46bd      	mov	sp, r7
 8005b54:	b003      	add	sp, #12
 8005b56:	bd90      	pop	{r4, r7, pc}
 8005b58:	48000400 	.word	0x48000400
 8005b5c:	20000028 	.word	0x20000028
 8005b60:	2000007c 	.word	0x2000007c
 8005b64:	51eb851e 	.word	0x51eb851e
 8005b68:	3fd51eb8 	.word	0x3fd51eb8

08005b6c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]

}
 8005b74:	46c0      	nop			; (mov r8, r8)
 8005b76:	46bd      	mov	sp, r7
 8005b78:	b002      	add	sp, #8
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <seperateDecimalValues>:
		sum+=a[i];
	}
	return (float)(sum / n);
}

decimalSeperatedValue seperateDecimalValues(uint8_t n){
 8005b7c:	b590      	push	{r4, r7, lr}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	0002      	movs	r2, r0
 8005b84:	1dfb      	adds	r3, r7, #7
 8005b86:	701a      	strb	r2, [r3, #0]
	decimalSeperatedValue s;
	s.ones = n % 10;
 8005b88:	1dfb      	adds	r3, r7, #7
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	210a      	movs	r1, #10
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f7fa fb40 	bl	8000214 <__aeabi_uidivmod>
 8005b94:	000b      	movs	r3, r1
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	2408      	movs	r4, #8
 8005b9a:	193b      	adds	r3, r7, r4
 8005b9c:	701a      	strb	r2, [r3, #0]
	s.tens = (n - s.ones) / 10;
 8005b9e:	1dfb      	adds	r3, r7, #7
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	193a      	adds	r2, r7, r4
 8005ba4:	7812      	ldrb	r2, [r2, #0]
 8005ba6:	1a9b      	subs	r3, r3, r2
 8005ba8:	210a      	movs	r1, #10
 8005baa:	0018      	movs	r0, r3
 8005bac:	f7fa fb36 	bl	800021c <__divsi3>
 8005bb0:	0003      	movs	r3, r0
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	193b      	adds	r3, r7, r4
 8005bb6:	705a      	strb	r2, [r3, #1]

	return s;
 8005bb8:	210c      	movs	r1, #12
 8005bba:	187b      	adds	r3, r7, r1
 8005bbc:	193a      	adds	r2, r7, r4
 8005bbe:	8812      	ldrh	r2, [r2, #0]
 8005bc0:	801a      	strh	r2, [r3, #0]
 8005bc2:	187a      	adds	r2, r7, r1
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	7811      	ldrb	r1, [r2, #0]
 8005bc8:	20ff      	movs	r0, #255	; 0xff
 8005bca:	4001      	ands	r1, r0
 8005bcc:	20ff      	movs	r0, #255	; 0xff
 8005bce:	4383      	bics	r3, r0
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	7852      	ldrb	r2, [r2, #1]
 8005bd4:	21ff      	movs	r1, #255	; 0xff
 8005bd6:	400a      	ands	r2, r1
 8005bd8:	0212      	lsls	r2, r2, #8
 8005bda:	4903      	ldr	r1, [pc, #12]	; (8005be8 <seperateDecimalValues+0x6c>)
 8005bdc:	400b      	ands	r3, r1
 8005bde:	4313      	orrs	r3, r2
}
 8005be0:	1c18      	adds	r0, r3, #0
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b005      	add	sp, #20
 8005be6:	bd90      	pop	{r4, r7, pc}
 8005be8:	ffff00ff 	.word	0xffff00ff

08005bec <mergeDecimalSeperatedValue>:

uint8_t mergeDecimalSeperatedValue(decimalSeperatedValue s){
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	1d3b      	adds	r3, r7, #4
 8005bf4:	8018      	strh	r0, [r3, #0]
	return s.tens*10 + s.ones;
 8005bf6:	1d3b      	adds	r3, r7, #4
 8005bf8:	785b      	ldrb	r3, [r3, #1]
 8005bfa:	1c1a      	adds	r2, r3, #0
 8005bfc:	0092      	lsls	r2, r2, #2
 8005bfe:	18d3      	adds	r3, r2, r3
 8005c00:	18db      	adds	r3, r3, r3
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	1d3b      	adds	r3, r7, #4
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	18d3      	adds	r3, r2, r3
 8005c0a:	b2db      	uxtb	r3, r3
}
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	b002      	add	sp, #8
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <extractRegisterValues>:

decimalSeperatedValue extractRegisterValues(uint8_t reg, uint8_t n_tens){
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	0002      	movs	r2, r0
 8005c1c:	1dfb      	adds	r3, r7, #7
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	1dbb      	adds	r3, r7, #6
 8005c22:	1c0a      	adds	r2, r1, #0
 8005c24:	701a      	strb	r2, [r3, #0]
	decimalSeperatedValue s;
	s.tens = (reg & ( (1<<n_tens) - 1)<<4) >> 4;
 8005c26:	1dfb      	adds	r3, r7, #7
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	1dba      	adds	r2, r7, #6
 8005c2c:	7812      	ldrb	r2, [r2, #0]
 8005c2e:	2101      	movs	r1, #1
 8005c30:	4091      	lsls	r1, r2
 8005c32:	000a      	movs	r2, r1
 8005c34:	3a01      	subs	r2, #1
 8005c36:	0112      	lsls	r2, r2, #4
 8005c38:	4013      	ands	r3, r2
 8005c3a:	111b      	asrs	r3, r3, #4
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	2108      	movs	r1, #8
 8005c40:	187b      	adds	r3, r7, r1
 8005c42:	705a      	strb	r2, [r3, #1]
	s.ones = reg & 0x0F;
 8005c44:	1dfb      	adds	r3, r7, #7
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	220f      	movs	r2, #15
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	187b      	adds	r3, r7, r1
 8005c50:	701a      	strb	r2, [r3, #0]

	return s;
 8005c52:	200c      	movs	r0, #12
 8005c54:	183b      	adds	r3, r7, r0
 8005c56:	187a      	adds	r2, r7, r1
 8005c58:	8812      	ldrh	r2, [r2, #0]
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	183a      	adds	r2, r7, r0
 8005c5e:	2300      	movs	r3, #0
 8005c60:	7811      	ldrb	r1, [r2, #0]
 8005c62:	20ff      	movs	r0, #255	; 0xff
 8005c64:	4001      	ands	r1, r0
 8005c66:	20ff      	movs	r0, #255	; 0xff
 8005c68:	4383      	bics	r3, r0
 8005c6a:	430b      	orrs	r3, r1
 8005c6c:	7852      	ldrb	r2, [r2, #1]
 8005c6e:	21ff      	movs	r1, #255	; 0xff
 8005c70:	400a      	ands	r2, r1
 8005c72:	0212      	lsls	r2, r2, #8
 8005c74:	4903      	ldr	r1, [pc, #12]	; (8005c84 <extractRegisterValues+0x70>)
 8005c76:	400b      	ands	r3, r1
 8005c78:	4313      	orrs	r3, r2
}
 8005c7a:	1c18      	adds	r0, r3, #0
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b004      	add	sp, #16
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	ffff00ff 	.word	0xffff00ff

08005c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005c8c:	46c0      	nop			; (mov r8, r8)
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c9a:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <HAL_MspInit+0x44>)
 8005c9c:	699a      	ldr	r2, [r3, #24]
 8005c9e:	4b0e      	ldr	r3, [pc, #56]	; (8005cd8 <HAL_MspInit+0x44>)
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	619a      	str	r2, [r3, #24]
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <HAL_MspInit+0x44>)
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	2201      	movs	r2, #1
 8005cac:	4013      	ands	r3, r2
 8005cae:	607b      	str	r3, [r7, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005cb2:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <HAL_MspInit+0x44>)
 8005cb4:	69da      	ldr	r2, [r3, #28]
 8005cb6:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <HAL_MspInit+0x44>)
 8005cb8:	2180      	movs	r1, #128	; 0x80
 8005cba:	0549      	lsls	r1, r1, #21
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	61da      	str	r2, [r3, #28]
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <HAL_MspInit+0x44>)
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	055b      	lsls	r3, r3, #21
 8005cc8:	4013      	ands	r3, r2
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	b002      	add	sp, #8
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	40021000 	.word	0x40021000

08005cdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08a      	sub	sp, #40	; 0x28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ce4:	2314      	movs	r3, #20
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	0018      	movs	r0, r3
 8005cea:	2314      	movs	r3, #20
 8005cec:	001a      	movs	r2, r3
 8005cee:	2100      	movs	r1, #0
 8005cf0:	f000 f9cf 	bl	8006092 <memset>
  if(hi2c->Instance==I2C1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1c      	ldr	r2, [pc, #112]	; (8005d6c <HAL_I2C_MspInit+0x90>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d132      	bne.n	8005d64 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cfe:	4b1c      	ldr	r3, [pc, #112]	; (8005d70 <HAL_I2C_MspInit+0x94>)
 8005d00:	695a      	ldr	r2, [r3, #20]
 8005d02:	4b1b      	ldr	r3, [pc, #108]	; (8005d70 <HAL_I2C_MspInit+0x94>)
 8005d04:	2180      	movs	r1, #128	; 0x80
 8005d06:	02c9      	lsls	r1, r1, #11
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	615a      	str	r2, [r3, #20]
 8005d0c:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <HAL_I2C_MspInit+0x94>)
 8005d0e:	695a      	ldr	r2, [r3, #20]
 8005d10:	2380      	movs	r3, #128	; 0x80
 8005d12:	02db      	lsls	r3, r3, #11
 8005d14:	4013      	ands	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005d1a:	2114      	movs	r1, #20
 8005d1c:	187b      	adds	r3, r7, r1
 8005d1e:	22c0      	movs	r2, #192	; 0xc0
 8005d20:	0092      	lsls	r2, r2, #2
 8005d22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d24:	187b      	adds	r3, r7, r1
 8005d26:	2212      	movs	r2, #18
 8005d28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d2a:	187b      	adds	r3, r7, r1
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d30:	187b      	adds	r3, r7, r1
 8005d32:	2203      	movs	r2, #3
 8005d34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8005d36:	187b      	adds	r3, r7, r1
 8005d38:	2201      	movs	r2, #1
 8005d3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d3c:	187b      	adds	r3, r7, r1
 8005d3e:	4a0d      	ldr	r2, [pc, #52]	; (8005d74 <HAL_I2C_MspInit+0x98>)
 8005d40:	0019      	movs	r1, r3
 8005d42:	0010      	movs	r0, r2
 8005d44:	f7fc f95e 	bl	8002004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d48:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <HAL_I2C_MspInit+0x94>)
 8005d4a:	69da      	ldr	r2, [r3, #28]
 8005d4c:	4b08      	ldr	r3, [pc, #32]	; (8005d70 <HAL_I2C_MspInit+0x94>)
 8005d4e:	2180      	movs	r1, #128	; 0x80
 8005d50:	0389      	lsls	r1, r1, #14
 8005d52:	430a      	orrs	r2, r1
 8005d54:	61da      	str	r2, [r3, #28]
 8005d56:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <HAL_I2C_MspInit+0x94>)
 8005d58:	69da      	ldr	r2, [r3, #28]
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	039b      	lsls	r3, r3, #14
 8005d5e:	4013      	ands	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005d64:	46c0      	nop			; (mov r8, r8)
 8005d66:	46bd      	mov	sp, r7
 8005d68:	b00a      	add	sp, #40	; 0x28
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40005400 	.word	0x40005400
 8005d70:	40021000 	.word	0x40021000
 8005d74:	48000400 	.word	0x48000400

08005d78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d80:	2314      	movs	r3, #20
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	0018      	movs	r0, r3
 8005d86:	2314      	movs	r3, #20
 8005d88:	001a      	movs	r2, r3
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	f000 f981 	bl	8006092 <memset>
  if(hspi->Instance==SPI1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a20      	ldr	r2, [pc, #128]	; (8005e18 <HAL_SPI_MspInit+0xa0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d13a      	bne.n	8005e10 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005d9a:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <HAL_SPI_MspInit+0xa4>)
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	4b1f      	ldr	r3, [pc, #124]	; (8005e1c <HAL_SPI_MspInit+0xa4>)
 8005da0:	2180      	movs	r1, #128	; 0x80
 8005da2:	0149      	lsls	r1, r1, #5
 8005da4:	430a      	orrs	r2, r1
 8005da6:	619a      	str	r2, [r3, #24]
 8005da8:	4b1c      	ldr	r3, [pc, #112]	; (8005e1c <HAL_SPI_MspInit+0xa4>)
 8005daa:	699a      	ldr	r2, [r3, #24]
 8005dac:	2380      	movs	r3, #128	; 0x80
 8005dae:	015b      	lsls	r3, r3, #5
 8005db0:	4013      	ands	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005db6:	4b19      	ldr	r3, [pc, #100]	; (8005e1c <HAL_SPI_MspInit+0xa4>)
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	4b18      	ldr	r3, [pc, #96]	; (8005e1c <HAL_SPI_MspInit+0xa4>)
 8005dbc:	2180      	movs	r1, #128	; 0x80
 8005dbe:	0289      	lsls	r1, r1, #10
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	615a      	str	r2, [r3, #20]
 8005dc4:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <HAL_SPI_MspInit+0xa4>)
 8005dc6:	695a      	ldr	r2, [r3, #20]
 8005dc8:	2380      	movs	r3, #128	; 0x80
 8005dca:	029b      	lsls	r3, r3, #10
 8005dcc:	4013      	ands	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005dd2:	2114      	movs	r1, #20
 8005dd4:	187b      	adds	r3, r7, r1
 8005dd6:	22e0      	movs	r2, #224	; 0xe0
 8005dd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dda:	187b      	adds	r3, r7, r1
 8005ddc:	2202      	movs	r2, #2
 8005dde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005de0:	187b      	adds	r3, r7, r1
 8005de2:	2200      	movs	r2, #0
 8005de4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005de6:	187b      	adds	r3, r7, r1
 8005de8:	2203      	movs	r2, #3
 8005dea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005dec:	187b      	adds	r3, r7, r1
 8005dee:	2200      	movs	r2, #0
 8005df0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005df2:	187a      	adds	r2, r7, r1
 8005df4:	2390      	movs	r3, #144	; 0x90
 8005df6:	05db      	lsls	r3, r3, #23
 8005df8:	0011      	movs	r1, r2
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f7fc f902 	bl	8002004 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005e00:	2200      	movs	r2, #0
 8005e02:	2100      	movs	r1, #0
 8005e04:	2019      	movs	r0, #25
 8005e06:	f7fc f885 	bl	8001f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005e0a:	2019      	movs	r0, #25
 8005e0c:	f7fc f897 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005e10:	46c0      	nop			; (mov r8, r8)
 8005e12:	46bd      	mov	sp, r7
 8005e14:	b00a      	add	sp, #40	; 0x28
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40013000 	.word	0x40013000
 8005e1c:	40021000 	.word	0x40021000

08005e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	; 0x28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e28:	2314      	movs	r3, #20
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	2314      	movs	r3, #20
 8005e30:	001a      	movs	r2, r3
 8005e32:	2100      	movs	r1, #0
 8005e34:	f000 f92d 	bl	8006092 <memset>
  if(huart->Instance==USART1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a21      	ldr	r2, [pc, #132]	; (8005ec4 <HAL_UART_MspInit+0xa4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d13b      	bne.n	8005eba <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e42:	4b21      	ldr	r3, [pc, #132]	; (8005ec8 <HAL_UART_MspInit+0xa8>)
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	4b20      	ldr	r3, [pc, #128]	; (8005ec8 <HAL_UART_MspInit+0xa8>)
 8005e48:	2180      	movs	r1, #128	; 0x80
 8005e4a:	01c9      	lsls	r1, r1, #7
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	619a      	str	r2, [r3, #24]
 8005e50:	4b1d      	ldr	r3, [pc, #116]	; (8005ec8 <HAL_UART_MspInit+0xa8>)
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	01db      	lsls	r3, r3, #7
 8005e58:	4013      	ands	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e5e:	4b1a      	ldr	r3, [pc, #104]	; (8005ec8 <HAL_UART_MspInit+0xa8>)
 8005e60:	695a      	ldr	r2, [r3, #20]
 8005e62:	4b19      	ldr	r3, [pc, #100]	; (8005ec8 <HAL_UART_MspInit+0xa8>)
 8005e64:	2180      	movs	r1, #128	; 0x80
 8005e66:	0289      	lsls	r1, r1, #10
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	615a      	str	r2, [r3, #20]
 8005e6c:	4b16      	ldr	r3, [pc, #88]	; (8005ec8 <HAL_UART_MspInit+0xa8>)
 8005e6e:	695a      	ldr	r2, [r3, #20]
 8005e70:	2380      	movs	r3, #128	; 0x80
 8005e72:	029b      	lsls	r3, r3, #10
 8005e74:	4013      	ands	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005e7a:	2114      	movs	r1, #20
 8005e7c:	187b      	adds	r3, r7, r1
 8005e7e:	22c0      	movs	r2, #192	; 0xc0
 8005e80:	00d2      	lsls	r2, r2, #3
 8005e82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e84:	187b      	adds	r3, r7, r1
 8005e86:	2202      	movs	r2, #2
 8005e88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e8a:	187b      	adds	r3, r7, r1
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e90:	187b      	adds	r3, r7, r1
 8005e92:	2203      	movs	r2, #3
 8005e94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8005e96:	187b      	adds	r3, r7, r1
 8005e98:	2201      	movs	r2, #1
 8005e9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e9c:	187a      	adds	r2, r7, r1
 8005e9e:	2390      	movs	r3, #144	; 0x90
 8005ea0:	05db      	lsls	r3, r3, #23
 8005ea2:	0011      	movs	r1, r2
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f7fc f8ad 	bl	8002004 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2102      	movs	r1, #2
 8005eae:	201b      	movs	r0, #27
 8005eb0:	f7fc f830 	bl	8001f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005eb4:	201b      	movs	r0, #27
 8005eb6:	f7fc f842 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	b00a      	add	sp, #40	; 0x28
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	46c0      	nop			; (mov r8, r8)
 8005ec4:	40013800 	.word	0x40013800
 8005ec8:	40021000 	.word	0x40021000

08005ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005ed0:	46c0      	nop			; (mov r8, r8)
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005eda:	e7fe      	b.n	8005eda <HardFault_Handler+0x4>

08005edc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005ee0:	46c0      	nop			; (mov r8, r8)
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ef4:	f7fb ff32 	bl	8001d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ef8:	46c0      	nop			; (mov r8, r8)
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005f02:	2001      	movs	r0, #1
 8005f04:	f7fc fa22 	bl	800234c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005f08:	2002      	movs	r0, #2
 8005f0a:	f7fc fa1f 	bl	800234c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005f18:	2004      	movs	r0, #4
 8005f1a:	f7fc fa17 	bl	800234c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005f1e:	2008      	movs	r0, #8
 8005f20:	f7fc fa14 	bl	800234c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8005f24:	46c0      	nop			; (mov r8, r8)
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005f30:	4b03      	ldr	r3, [pc, #12]	; (8005f40 <SPI1_IRQHandler+0x14>)
 8005f32:	0018      	movs	r0, r3
 8005f34:	f7fd ff5c 	bl	8003df0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005f38:	46c0      	nop			; (mov r8, r8)
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	200000ec 	.word	0x200000ec

08005f44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005f48:	4b03      	ldr	r3, [pc, #12]	; (8005f58 <USART1_IRQHandler+0x14>)
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	f7fe faf2 	bl	8004534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005f50:	46c0      	nop			; (mov r8, r8)
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	2000007c 	.word	0x2000007c

08005f5c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8005f60:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <SystemInit+0x70>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	4b19      	ldr	r3, [pc, #100]	; (8005fcc <SystemInit+0x70>)
 8005f66:	2101      	movs	r1, #1
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8005f6c:	4b17      	ldr	r3, [pc, #92]	; (8005fcc <SystemInit+0x70>)
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <SystemInit+0x70>)
 8005f72:	4917      	ldr	r1, [pc, #92]	; (8005fd0 <SystemInit+0x74>)
 8005f74:	400a      	ands	r2, r1
 8005f76:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8005f78:	4b14      	ldr	r3, [pc, #80]	; (8005fcc <SystemInit+0x70>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4b13      	ldr	r3, [pc, #76]	; (8005fcc <SystemInit+0x70>)
 8005f7e:	4915      	ldr	r1, [pc, #84]	; (8005fd4 <SystemInit+0x78>)
 8005f80:	400a      	ands	r2, r1
 8005f82:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005f84:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <SystemInit+0x70>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4b10      	ldr	r3, [pc, #64]	; (8005fcc <SystemInit+0x70>)
 8005f8a:	4913      	ldr	r1, [pc, #76]	; (8005fd8 <SystemInit+0x7c>)
 8005f8c:	400a      	ands	r2, r1
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8005f90:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <SystemInit+0x70>)
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <SystemInit+0x70>)
 8005f96:	4911      	ldr	r1, [pc, #68]	; (8005fdc <SystemInit+0x80>)
 8005f98:	400a      	ands	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <SystemInit+0x70>)
 8005f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <SystemInit+0x70>)
 8005fa2:	210f      	movs	r1, #15
 8005fa4:	438a      	bics	r2, r1
 8005fa6:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8005fa8:	4b08      	ldr	r3, [pc, #32]	; (8005fcc <SystemInit+0x70>)
 8005faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fac:	4b07      	ldr	r3, [pc, #28]	; (8005fcc <SystemInit+0x70>)
 8005fae:	490c      	ldr	r1, [pc, #48]	; (8005fe0 <SystemInit+0x84>)
 8005fb0:	400a      	ands	r2, r1
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <SystemInit+0x70>)
 8005fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb8:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <SystemInit+0x70>)
 8005fba:	2101      	movs	r1, #1
 8005fbc:	438a      	bics	r2, r1
 8005fbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005fc0:	4b02      	ldr	r3, [pc, #8]	; (8005fcc <SystemInit+0x70>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	609a      	str	r2, [r3, #8]

}
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	f8ffb80c 	.word	0xf8ffb80c
 8005fd4:	fef6ffff 	.word	0xfef6ffff
 8005fd8:	fffbffff 	.word	0xfffbffff
 8005fdc:	ffc0ffff 	.word	0xffc0ffff
 8005fe0:	fffffeac 	.word	0xfffffeac

08005fe4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005fe4:	480d      	ldr	r0, [pc, #52]	; (800601c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005fe6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005fe8:	480d      	ldr	r0, [pc, #52]	; (8006020 <LoopForever+0x6>)
  ldr r1, =_edata
 8005fea:	490e      	ldr	r1, [pc, #56]	; (8006024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005fec:	4a0e      	ldr	r2, [pc, #56]	; (8006028 <LoopForever+0xe>)
  movs r3, #0
 8005fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ff0:	e002      	b.n	8005ff8 <LoopCopyDataInit>

08005ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ff6:	3304      	adds	r3, #4

08005ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ffc:	d3f9      	bcc.n	8005ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ffe:	4a0b      	ldr	r2, [pc, #44]	; (800602c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006000:	4c0b      	ldr	r4, [pc, #44]	; (8006030 <LoopForever+0x16>)
  movs r3, #0
 8006002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006004:	e001      	b.n	800600a <LoopFillZerobss>

08006006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006008:	3204      	adds	r2, #4

0800600a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800600a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800600c:	d3fb      	bcc.n	8006006 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800600e:	f7ff ffa5 	bl	8005f5c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006012:	f000 f811 	bl	8006038 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006016:	f7fe ff9d 	bl	8004f54 <main>

0800601a <LoopForever>:

LoopForever:
    b LoopForever
 800601a:	e7fe      	b.n	800601a <LoopForever>
  ldr   r0, =_estack
 800601c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8006020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006024:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8006028:	0800617c 	.word	0x0800617c
  ldr r2, =_sbss
 800602c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8006030:	20000150 	.word	0x20000150

08006034 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006034:	e7fe      	b.n	8006034 <ADC1_COMP_IRQHandler>
	...

08006038 <__libc_init_array>:
 8006038:	b570      	push	{r4, r5, r6, lr}
 800603a:	2600      	movs	r6, #0
 800603c:	4d0c      	ldr	r5, [pc, #48]	; (8006070 <__libc_init_array+0x38>)
 800603e:	4c0d      	ldr	r4, [pc, #52]	; (8006074 <__libc_init_array+0x3c>)
 8006040:	1b64      	subs	r4, r4, r5
 8006042:	10a4      	asrs	r4, r4, #2
 8006044:	42a6      	cmp	r6, r4
 8006046:	d109      	bne.n	800605c <__libc_init_array+0x24>
 8006048:	2600      	movs	r6, #0
 800604a:	f000 f82b 	bl	80060a4 <_init>
 800604e:	4d0a      	ldr	r5, [pc, #40]	; (8006078 <__libc_init_array+0x40>)
 8006050:	4c0a      	ldr	r4, [pc, #40]	; (800607c <__libc_init_array+0x44>)
 8006052:	1b64      	subs	r4, r4, r5
 8006054:	10a4      	asrs	r4, r4, #2
 8006056:	42a6      	cmp	r6, r4
 8006058:	d105      	bne.n	8006066 <__libc_init_array+0x2e>
 800605a:	bd70      	pop	{r4, r5, r6, pc}
 800605c:	00b3      	lsls	r3, r6, #2
 800605e:	58eb      	ldr	r3, [r5, r3]
 8006060:	4798      	blx	r3
 8006062:	3601      	adds	r6, #1
 8006064:	e7ee      	b.n	8006044 <__libc_init_array+0xc>
 8006066:	00b3      	lsls	r3, r6, #2
 8006068:	58eb      	ldr	r3, [r5, r3]
 800606a:	4798      	blx	r3
 800606c:	3601      	adds	r6, #1
 800606e:	e7f2      	b.n	8006056 <__libc_init_array+0x1e>
 8006070:	08006174 	.word	0x08006174
 8006074:	08006174 	.word	0x08006174
 8006078:	08006174 	.word	0x08006174
 800607c:	08006178 	.word	0x08006178

08006080 <memcpy>:
 8006080:	2300      	movs	r3, #0
 8006082:	b510      	push	{r4, lr}
 8006084:	429a      	cmp	r2, r3
 8006086:	d100      	bne.n	800608a <memcpy+0xa>
 8006088:	bd10      	pop	{r4, pc}
 800608a:	5ccc      	ldrb	r4, [r1, r3]
 800608c:	54c4      	strb	r4, [r0, r3]
 800608e:	3301      	adds	r3, #1
 8006090:	e7f8      	b.n	8006084 <memcpy+0x4>

08006092 <memset>:
 8006092:	0003      	movs	r3, r0
 8006094:	1812      	adds	r2, r2, r0
 8006096:	4293      	cmp	r3, r2
 8006098:	d100      	bne.n	800609c <memset+0xa>
 800609a:	4770      	bx	lr
 800609c:	7019      	strb	r1, [r3, #0]
 800609e:	3301      	adds	r3, #1
 80060a0:	e7f9      	b.n	8006096 <memset+0x4>
	...

080060a4 <_init>:
 80060a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a6:	46c0      	nop			; (mov r8, r8)
 80060a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060aa:	bc08      	pop	{r3}
 80060ac:	469e      	mov	lr, r3
 80060ae:	4770      	bx	lr

080060b0 <_fini>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b6:	bc08      	pop	{r3}
 80060b8:	469e      	mov	lr, r3
 80060ba:	4770      	bx	lr
